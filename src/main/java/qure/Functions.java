package qure;
import java.util.*;

public class Functions
{
	/*public static Vector<GlobalVariant> mergeGlobalVariantSet(Vector<GlobalVariant> b)
	{
		Vector<GlobalVariant> a = new Vector();
		for (int j=0; j<b.size(); j++)
		{
			boolean found = false;
			GlobalVariant c = b.get(j);
			for (int k=0; k<a.size(); k++)
			{
				GlobalVariant d = a.get(k);
				if (d.SNP.equals(c.SNP) || d.sequence.equals(c.sequence))
				{
					d.frequency+=c.frequency;
					found=true;
					break;
				}
			}
			if (!found)
				a.add(new GlobalVariant(c.SNP, c.sequence, c.frequency, c.stdevFreq));
		}
		return a;
	}
	
	public static void setFrequencies(Vector<GlobalVariant> reconstructedQuasispecies)
	{
		double sumFrequencies=0;
		for (int i=0; i<reconstructedQuasispecies.size(); i++)
			sumFrequencies+=reconstructedQuasispecies.get(i).frequency;
		for (int i=0; i<reconstructedQuasispecies.size(); i++)
			reconstructedQuasispecies.get(i).frequency=100d*reconstructedQuasispecies.get(i).frequency/sumFrequencies;
	}
	
	public static Vector<GlobalVariant> correct(Vector<GlobalVariant> gv, double start, double stop, String genome, double hErr, double nonhErr, int runs, int n_proc)
	{
		LocalVariantSet lvs = new LocalVariantSet();
		Hashtable<String,LocalVariant> h=new Hashtable();
		Vector<LocalVariant> a=new Vector();
		for (int i=0; i<gv.size(); i++)
		{
			String snpA="";
			String snpO1="";
			String snpO2="";
			String snp=gv.get(i).SNP;
			LocalVariant lv = new LocalVariant(snpA,snpO1,snpO2,snp,gv.get(i).frequency);
			h.put(snp,lv);
		}
		lvs.lvsH=h;
		Object [] keys = lvs.lvsH.keySet().toArray();
		for (int i=0; i<keys.length; i++)
		{
			LocalVariant lv = lvs.lvsH.get(keys[i]);
			a.add(lv);
		}
		Comparator<LocalVariant> comparatorFrequencies = new Comparator<LocalVariant>()
		{
			public int compare(LocalVariant lv1, LocalVariant lv2)
			{
				if (lv1.frequency>lv2.frequency)
					return -1;
				if (lv1.frequency<lv2.frequency)
					return 1;
				return 0;
			}
		};
		Collections.sort(a,comparatorFrequencies);
		lvs.lvsA=a;
		lvs.correctLocalVariantSetParallel(start, stop, genome, hErr, nonhErr, runs, n_proc);
		Collections.sort(lvs.lvsA,comparatorFrequencies);
		Vector<GlobalVariant> gvsNew = new Vector();
		for (int i=0; i<lvs.lvsA.size(); i++)
		{
			GlobalVariant g = new GlobalVariant(lvs.lvsA.get(i).SNP, "none", lvs.lvsA.get(i).frequency, -1);
			g.setSequence(genome, start, stop);
			gvsNew.add(g);
			
		}
		return gvsNew;
	}
	
	public static double posteriorClusteringLikelihood(Vector<Integer> clusterIndices, Vector<LocalVariant> lv, double length, String genome, double hErr, double nonhErr)
	{
		if (clusterIndices.size()==0)
			return Double.MAX_VALUE;
		Vector<LocalVariant> clusterSet = new Vector();
		for (int i=0; i<clusterIndices.size(); i++)
			clusterSet.add(lv.get(clusterIndices.get(i)));
		double logLikelihood=0;
		double tot=0;
		for (int i=0; i<lv.size(); i++)
		{
			int index = lv.get(i).classify(clusterSet);
			double dist = lv.get(i).distance(clusterSet.get(index));
			if (dist!=0)
			{
				String snp_differences = lv.get(i).snpDifferences(clusterSet.get(index));
				//System.out.println("indice="+i+" dist="+dist+" diffLength="+snp_differences.split(",").length);
				double errorRate = localErrorProbability(snp_differences, genome, hErr, nonhErr);
				double newlength = length + lv.get(i).lengthUpdate(clusterSet.get(index));
				double prob = Math.max(Double.MIN_VALUE,Functions.poissonError(dist, newlength, errorRate));
				//System.out.println("oldProb="+Math.max(Double.MIN_VALUE,Functions.poissonError(dist, length, errorRate))+" newProb="+Math.max(Double.MIN_VALUE,Functions.poissonError(dist, newlength, errorRate)));
				double loglikel = lv.get(i).frequency*Math.log(prob);
				logLikelihood += loglikel;
				
			}
			tot+=lv.get(i).frequency;
		}
		double posterior = -2*logLikelihood + clusterSet.size()*Math.log(tot);
		if (posterior<0)
			return Double.MAX_VALUE;
		return posterior;
	}*/
	
	public static Vector<Integer> proposeClusterSet(Vector<Integer> c, int size)
	{
		Vector<Integer> result = new Vector();
		for (int i=0; i<c.size(); i++)
			result.add(c.get(i));
		int num = Math.max(1,randomPoisson(Math.log(size)));
		for (int i=0; i<num; i++)
		{
			//int rnd = (int)(size*Math.pow(Math.random(),Math.exp(1)));
			int rnd = (int)(Math.floor(size*Math.random()));
			int ind = result.indexOf(rnd);
			if (ind!=-1)
				result.remove(ind);
			else
				result.add(rnd);
		}
		if (result.isEmpty())
			result.add((int)(Math.floor(size*Math.random())));
		Collections.sort(result);
		return result;
	}
	
	public static int randomPoisson(double lambda)
	{
		double L = Math.exp(-lambda);
		double p = 1;
		int k = 0;
		do
		{
			k++;
			p*=Math.random();
		}
		while(p>L);
		return k-1;
	}
	
	public static double overallErrorProbability(double start,double stop, String genome, double hErr, double nonhErr)
	{
		double prob=0;
		double tot=0;
		for (int i=(int)start; i<(int)stop; i++)
		{
			if (isHomopolymeric(i,genome,false))
				prob+=hErr;
			else
				prob+=nonhErr;
			tot++;
		}
		prob=prob/tot;
		return prob;
	}
	
	public static double localErrorProbability(String snp_differences, String genome, double hErr, double nonhErr)
	{
		if (snp_differences.startsWith(","))
			snp_differences = snp_differences.substring(1);
		String [] snp_array = snp_differences.split(",");
		double prob=0;
		double tot=0;
		for (int i=0; i<snp_array.length; i++)
		{
			String [] single_snp = snp_array[i].split("_");
			boolean indel = false;
			if (single_snp[2].equals("-") || single_snp[0].equals("-"))
				indel = true;
			if (isHomopolymeric((int)(Double.parseDouble(single_snp[1])-1),genome,indel))
			{
				
				prob+=hErr;
			}
			else
				prob+=nonhErr;
			tot++;
		}
		prob=prob/tot;
		return prob;
	}
	
	public static boolean isHomopolymeric(int position, String genome, boolean indel)
	{
		int start = Math.max(0,position-2);
		int stop = Math.min(genome.length(),position+3);
		if (indel)
		{
			start = Math.max(0,position-2);
			stop = Math.min(genome.length(),position+4);
		}
		String substring=genome.substring(start,stop);
		boolean ret = false;
		if (substring.indexOf("AAA")!=-1 || substring.indexOf("CCC")!=-1 || substring.indexOf("GGG")!=-1 || substring.indexOf("TTT")!=-1)
			ret=true;
		return (ret);
	}
	
	public static double factorial(double n)
	{
		if (n>170)
			return Double.MAX_VALUE;
		double ret = 1;
		for (int i = 1; i <= n; ++i)
			ret = ret*i;
		return ret;
    	}
	
	public static double poissonError(double n, double N, double errorRate)
	{
		double p = 0;
		double lambda = N*errorRate;
		if (lambda>=10 || n>170)
			return (1-zetaStandardProbability((n-lambda+0.5)/Math.sqrt(lambda)));
		for (int i=0; i<n; i++)
			p=p+( Math.exp(-lambda)*Math.pow(lambda,i) )/factorial(i);
		return (1-p);
	}
	
	public static String shuffle(String s)
	{
		if (s.length()<=1)
	    		return s;
		int split=s.length()/2;
		String temp1=shuffle(s.substring(0,split));
		String temp2=shuffle(s.substring(split));
		if (Math.random() > 0.5) 
	    		return temp1 + temp2;
		else 
	    		return temp2 + temp1;
	}
	
	public static double [][] createConsistentAmplicon(LinkedList<Double> hotSpots)
	{
		double [][] ca = new double [2][];
		return ca;
	}

	public static double alignmentScoreSignificance(double z)
	{
		double p = 1d-Math.exp(-Math.exp(-z*3.141592654d/2.449489743d-0.5772d));
		return p;
	}
	
	public static double average (double [] a)
	{
		double avg = 0;
		for (int i=0; i<a.length; i++)
			avg+=a[i];
		avg=avg/a.length;
		return avg;
	}
	
	public static double stdev (double [] a)
	{
		double avg = average(a);
		double std = 0;
		for (int i=0; i<a.length; i++)
			std+=(a[i]-avg)*(a[i]-avg);
		std=std/(a.length-1);
		return Math.sqrt(std);
	}
	
	public static double average (Double [] a)
	{
		double avg = 0;
		for (int i=0; i<a.length; i++)
			avg+=a[i];
		avg=avg/a.length;
		return avg;
	}
	
	public static double stdev (Double [] a)
	{
		double avg = average(a);
		double std = 0;
		for (int i=0; i<a.length; i++)
			std+=(a[i]-avg)*(a[i]-avg);
		std=std/(a.length-1);
		return Math.sqrt(std);
	}
	
	public static double average (Integer [] a)
	{
		double avg = 0;
		for (int i=0; i<a.length; i++)
			avg+=a[i];
		avg=avg/a.length;
		return avg;
	}
	
	public static double stdev (Integer [] a)
	{
		double avg = average(a);
		double std = 0;
		for (int i=0; i<a.length; i++)
			std+=(a[i]-avg)*(a[i]-avg);
		std=std/(a.length-1);
		return Math.sqrt(std);
	}
	
	public static double max (double [] a)
	{
		double max = a[0];
		for (int i=1; i<a.length; i++)
			if (a[i]>max)
				max=a[i];
		return max;
	}
	
	public static double min (double [] a)
	{
		double min = a[0];
		for (int i=1; i<a.length; i++)
			if (a[i]<min)
				min=a[i];
		return min;
	}
	
	public static double max (int [] a)
	{
		double max = a[0];
		for (int i=1; i<a.length; i++)
			if (a[i]>max)
				max=a[i];
		return max;
	}
	
	public static double min (int [] a)
	{
		double min = a[0];
		for (int i=1; i<a.length; i++)
			if (a[i]<min)
				min=a[i];
		return min;
	}
	
	public static double max (Integer [] a)
	{
		double max = a[0];
		for (int i=1; i<a.length; i++)
			if (a[i]>max)
				max=a[i];
		return max;
	}
	
	public static double min (Integer [] a)
	{
		double min = a[0];
		for (int i=1; i<a.length; i++)
			if (a[i]<min)
				min=a[i];
		return min;
	}
	
	public static String reverseComplement (String s)
	{
		String rev = s;
		StringBuffer sb = new StringBuffer(rev);
		sb.reverse();
		rev = sb.toString();
		rev = rev.replaceAll("A","_01_");
		rev = rev.replaceAll("C","_02_");
		rev = rev.replaceAll("G","_03_");
		rev = rev.replaceAll("T","_04_");
		rev = rev.replaceAll("R","_05_");
		rev = rev.replaceAll("Y","_06_");
		rev = rev.replaceAll("K","_07_");
		rev = rev.replaceAll("M","_08_");
		rev = rev.replaceAll("S","_09_");
		rev = rev.replaceAll("W","_10_");
		rev = rev.replaceAll("B","_11_");
		rev = rev.replaceAll("D","_12_");
		rev = rev.replaceAll("H","_13_");
		rev = rev.replaceAll("V","_14_");
		rev = rev.replaceAll("N","_15_");
		rev = rev.replaceAll("_01_","T");
		rev = rev.replaceAll("_02_","G");
		rev = rev.replaceAll("_03_","C");
		rev = rev.replaceAll("_04_","A");
		rev = rev.replaceAll("_05_","Y");
		rev = rev.replaceAll("_06_","R");
		rev = rev.replaceAll("_07_","M");
		rev = rev.replaceAll("_08_","K");
		rev = rev.replaceAll("_09_","S");
		rev = rev.replaceAll("_10_","W");
		rev = rev.replaceAll("_11_","V");
		rev = rev.replaceAll("_12_","H");
		rev = rev.replaceAll("_13_","D");
		rev = rev.replaceAll("_14_","B");
		rev = rev.replaceAll("_15_","N");
		return rev;
	}
	
	public static Integer [] SBLAT (Hashtable h, String query, int kmer)
	{
		int index = 0;
		int k = kmer;
		LinkedList<Integer> positions = new LinkedList();
		while((index+k)<query.length())
		{
			String qkmer = query.substring(index,index+k);
			if (h.get(qkmer)!=null)
			{
				LinkedList<Integer> list = (LinkedList)(h.get(qkmer));
				for (int i=0; i<list.size(); i++)
				{
					positions.add(list.get(i));
				}
			}
			index++;
		}
		Integer [] result = positions.toArray(new Integer[0]);
		return result;
	}
	
	public static int getMappingPosition (Integer [] array)
	{
		if (array==null || array.length==0)
			return -1;
		double min = min(array);
		double max = max(array);
		double step = Math.sqrt(array.length);
		//double step = 3.5d*stdev(array)/Math.cbrt(array.length);
		int [] bins = new int [(int)((max-min)/step)];
		for (int i=0; i<array.length; i++)
		{
			int currStep = (int)(min);
			for (int j=0; j<bins.length; j++)
			{
				if (array[i]<currStep)
				{
					bins[j]++;
					break;
				}
				currStep+=step;
			}
		}
		int maxFreq = -1;
		int result = -1;
		int currStep = (int)(min);
		for (int j=0; j<bins.length; j++)
		{
			if (bins[j]>maxFreq)
			{
				maxFreq=bins[j];
				result=currStep;
			}
			currStep+=step;
		}
		//result = (int)(Math.round(((double)(result)-step/2d)));
		return result;
	}
	
	public static double zetaStandardProbability(double z)
	{
		if ( z<(-26d) ) return 4.9406564584124E-324d;
		if ( z<(-25d) ) return 3.0566967063826E-138d;
		if ( z<(-24d) ) return 1.3903921185496E-127d;
		if ( z<(-23d) ) return 2.3306370062207E-117d;
		if ( z<(-22d) ) return 1.439892435145E-107d;
		if ( z<(-21d) ) return 3.27927801897894E-98d;
		if ( z<(-20d) ) return 2.75362411860615E-89d;
		if ( z<(-19d) ) return 8.52722395263049E-81d;
		if ( z<(-18d) ) return 9.74094891893687E-73d;
		if ( z<(-17d) ) return 4.10599620209879E-65d;
		if ( z<(-16d) ) return 6.3887544005379E-58d;
		if ( z<(-15d) ) return 3.6709661993127E-51d;
		if ( z<(-14d) ) return 7.7935368191928E-45d;
		if ( z<(-13d) ) return 6.1171643995497E-39d;
		if ( z<(-12d) ) return 1.77648211207765E-33d;
		if ( z<(-11d) ) return 1.91065957449866E-28d;
		if ( z<(-10d) ) return 7.61985302416047E-24d;
		if ( z<(-9.5d) ) return 1.04945150753625E-21d;
		if ( z<(-9d) ) return 1.12858840595383E-19d;
		if ( z<(-8.5d) ) return 9.47953482220325E-18d;
		if ( z<(-8d) ) return 6.22096057427174E-16d;
		if ( z<(-7.5d) ) return 3.19089167291088E-14d;
		if ( z<(-7d) ) return 1.27981254388583E-12d;
		if ( z<(-6.5d) ) return 4.01600058385896E-11d;
		if ( z<(-6d) ) return 9.86587645037514E-10d;
		if ( z<(-5.5d) ) return 1.89895624658663E-08d;
		if ( z<(-5d) ) return 2.86651571877013E-07d;
		if ( z<(-4.995d) ) return 2.94179153925711E-07d;
		if ( z<(-4.99d) ) return 3.01896877497043E-07d;
		if ( z<(-4.985d) ) return 3.09809314424925E-07d;
		if ( z<(-4.98d) ) return 3.17921837522661E-07d;
		if ( z<(-4.975d) ) return 3.26237928227613E-07d;
		if ( z<(-4.97d) ) return 3.34764375442553E-07d;
		if ( z<(-4.965d) ) return 3.43505413002987E-07d;
		if ( z<(-4.96d) ) return 3.52465888586728E-07d;
		if ( z<(-4.955d) ) return 3.61651418256947E-07d;
		if ( z<(-4.95d) ) return 3.71067745863485E-07d;
		if ( z<(-4.945d) ) return 3.80719464954105E-07d;
		if ( z<(-4.94d) ) return 3.90613042577925E-07d;
		if ( z<(-4.935d) ) return 4.00753778051488E-07d;
		if ( z<(-4.93d) ) return 4.11148159518149E-07d;
		if ( z<(-4.925d) ) return 4.21802029415552E-07d;
		if ( z<(-4.92d) ) return 4.32721186882645E-07d;
		if ( z<(-4.915d) ) return 4.43912454461959E-07d;
		if ( z<(-4.91d) ) return 4.55381967578994E-07d;
		if ( z<(-4.905d) ) return 4.6713670687204E-07d;
		if ( z<(-4.9d) ) return 4.79183413837347E-07d;
		if ( z<(-4.895d) ) return 4.91528841406463E-07d;
		if ( z<(-4.89d) ) return 5.04179969107454E-07d;
		if ( z<(-4.885d) ) return 5.17144311928952E-07d;
		if ( z<(-4.88d) ) return 5.30429213108086E-07d;
		if ( z<(-4.875d) ) return 5.44042483507923E-07d;
		if ( z<(-4.87d) ) return 5.57991219896081E-07d;
		if ( z<(-4.865d) ) return 5.7228413585797E-07d;
		if ( z<(-4.86d) ) return 5.86928537438247E-07d;
		if ( z<(-4.855d) ) return 6.01933795474352E-07d;
		if ( z<(-4.85d) ) return 6.17307339689788E-07d;
		if ( z<(-4.845d) ) return 6.33058532484299E-07d;
		if ( z<(-4.84d) ) return 6.49195567414829E-07d;
		if ( z<(-4.835d) ) return 6.65728280613287E-07d;
		if ( z<(-4.83d) ) return 6.82665347584432E-07d;
		if ( z<(-4.825d) ) return 7.00016309584939E-07d;
		if ( z<(-4.82d) ) return 7.17791156290559E-07d;
		if ( z<(-4.815d) ) return 7.3599955685566E-07d;
		if ( z<(-4.81d) ) return 7.5465163384969E-07d;
		if ( z<(-4.805d) ) return 7.73757788952167E-07d;
		if ( z<(-4.8d) ) return 7.93328208237298E-07d;
		if ( z<(-4.795d) ) return 8.13374335328909E-07d;
		if ( z<(-4.79d) ) return 8.33906605657297E-07d;
		if ( z<(-4.785d) ) return 8.5493668178227E-07d;
		if ( z<(-4.78d) ) return 8.76475983235814E-07d;
		if ( z<(-4.775d) ) return 8.98536349103196E-07d;
		if ( z<(-4.77d) ) return 9.21129677866617E-07d;
		if ( z<(-4.76500000000001d) ) return 9.44268273572746E-07d;
		if ( z<(-4.76000000000001d) ) return 9.67964771003693E-07d;
		if ( z<(-4.75500000000001d) ) return 9.92232143337546E-07d;
		if ( z<(-4.75000000000001d) ) return 1.01708320121574E-06d;
		if ( z<(-4.74500000000001d) ) return 1.04253171295809E-06d;
		if ( z<(-4.74000000000001d) ) return 1.0685910818431E-06d;
		if ( z<(-4.73500000000001d) ) return 1.09527553493471E-06d;
		if ( z<(-4.73000000000001d) ) return 1.12259917917079E-06d;
		if ( z<(-4.72500000000001d) ) return 1.15057676008945E-06d;
		if ( z<(-4.72000000000001d) ) return 0.000001179223183434d;
		if ( z<(-4.71500000000001d) ) return 1.20855385166152E-06d;
		if ( z<(-4.71000000000001d) ) return 1.23858395739695E-06d;
		if ( z<(-4.70500000000001d) ) return 1.26932982613681E-06d;
		if ( z<(-4.70000000000001d) ) return 1.30080752169803E-06d;
		if ( z<(-4.69500000000001d) ) return 1.33303375804417E-06d;
		if ( z<(-4.69000000000001d) ) return 1.36602521072504E-06d;
		if ( z<(-4.68500000000001d) ) return 1.39979962232584E-06d;
		if ( z<(-4.68000000000001d) ) return 1.43437472743813E-06d;
		if ( z<(-4.67500000000001d) ) return 1.46976810877497E-06d;
		if ( z<(-4.67000000000001d) ) return 1.50599870218926E-06d;
		if ( z<(-4.66500000000001d) ) return 1.54308523425684E-06d;
		if ( z<(-4.66000000000001d) ) return 1.58104693515071E-06d;
		if ( z<(-4.65500000000001d) ) return 1.61990352975927E-06d;
		if ( z<(-4.65000000000001d) ) return 1.65967514687004E-06d;
		if ( z<(-4.64500000000001d) ) return 1.70038229940772E-06d;
		if ( z<(-4.64000000000001d) ) return 1.74204589786786E-06d;
		if ( z<(-4.63500000000001d) ) return 1.78468748979199E-06d;
		if ( z<(-4.63000000000001d) ) return 1.82832861250759E-06d;
		if ( z<(-4.62500000000001d) ) return 1.87299204112978E-06d;
		if ( z<(-4.62000000000001d) ) return 1.91870028198871E-06d;
		if ( z<(-4.61500000000001d) ) return 1.96547661235336E-06d;
		if ( z<(-4.61000000000001d) ) return 2.01334486626958E-06d;
		if ( z<(-4.60500000000001d) ) return 2.06232935329176E-06d;
		if ( z<(-4.60000000000001d) ) return 2.11245467363064E-06d;
		if ( z<(-4.59500000000001d) ) return 2.16374638872807E-06d;
		if ( z<(-4.59000000000001d) ) return 2.21623008367366E-06d;
		if ( z<(-4.58500000000001d) ) return 2.26993220442395E-06d;
		if ( z<(-4.58000000000001d) ) return 2.32487955442728E-06d;
		if ( z<(-4.57500000000001d) ) return 2.38109997297009E-06d;
		if ( z<(-4.57000000000001d) ) return 2.43862111137805E-06d;
		if ( z<(-4.56500000000001d) ) return 2.49747176273019E-06d;
		if ( z<(-4.56000000000001d) ) return 2.55768110712928E-06d;
		if ( z<(-4.55500000000001d) ) return 2.61927892886149E-06d;
		if ( z<(-4.55000000000001d) ) return 2.68229579825086E-06d;
		if ( z<(-4.54500000000001d) ) return 2.7467627106148E-06d;
		if ( z<(-4.54000000000001d) ) return 2.81271150692763E-06d;
		if ( z<(-4.53500000000001d) ) return 2.88017432603649E-06d;
		if ( z<(-4.53000000000001d) ) return 2.94918431387181E-06d;
		if ( z<(-4.52500000000001d) ) return 3.01977530625663E-06d;
		if ( z<(-4.52000000000001d) ) return 3.09198156434043E-06d;
		if ( z<(-4.51500000000001d) ) return 3.16583832082884E-06d;
		if ( z<(-4.51000000000001d) ) return 3.24138133911411E-06d;
		if ( z<(-4.50500000000001d) ) return 3.31864711689001E-06d;
		if ( z<(-4.50000000000001d) ) return 3.39767313095596E-06d;
		if ( z<(-4.49500000000001d) ) return 3.47849735393702E-06d;
		if ( z<(-4.49000000000001d) ) return 3.56115874289298E-06d;
		if ( z<(-4.48500000000001d) ) return 3.64569675359583E-06d;
		if ( z<(-4.48000000000001d) ) return 3.73215197890797E-06d;
		if ( z<(-4.47500000000001d) ) return 3.82056564540711E-06d;
		if ( z<(-4.47000000000001d) ) return 3.9109798415371E-06d;
		if ( z<(-4.46500000000001d) ) return 4.00343759132671E-06d;
		if ( z<(-4.46000000000001d) ) return 4.09798267808625E-06d;
		if ( z<(-4.45500000000001d) ) return 4.19465977541389E-06d;
		if ( z<(-4.45000000000001d) ) return 4.29351446284976E-06d;
		if ( z<(-4.44500000000001d) ) return 4.39459336254444E-06d;
		if ( z<(-4.44000000000001d) ) return 4.49794389489888E-06d;
		if ( z<(-4.43500000000001d) ) return 4.60361447240931E-06d;
		if ( z<(-4.43000000000001d) ) return 4.71165442061938E-06d;
		if ( z<(-4.42500000000001d) ) return 4.82211417107692E-06d;
		if ( z<(-4.42000000000001d) ) return 4.9350450750385E-06d;
		if ( z<(-4.41500000000001d) ) return 5.05049952981285E-06d;
		if ( z<(-4.41000000000001d) ) return 5.16853097654035E-06d;
		if ( z<(-4.40500000000001d) ) return 5.28919391129534E-06d;
		if ( z<(-4.40000000000001d) ) return 5.41254392261159E-06d;
		if ( z<(-4.39500000000001d) ) return 5.53863770857976E-06d;
		if ( z<(-4.39000000000001d) ) return 5.6675330075695E-06d;
		if ( z<(-4.38500000000001d) ) return 5.79928893151838E-06d;
		if ( z<(-4.38000000000001d) ) return 5.9339654299162E-06d;
		if ( z<(-4.37500000000001d) ) return 6.07162389831828E-06d;
		if ( z<(-4.37000000000001d) ) return 6.21232684694384E-06d;
		if ( z<(-4.36500000000001d) ) return 6.35613793731338E-06d;
		if ( z<(-4.36000000000001d) ) return 6.50312219352411E-06d;
		if ( z<(-4.35500000000001d) ) return 6.65334591287703E-06d;
		if ( z<(-4.35000000000001d) ) return 6.8068765948226E-06d;
		if ( z<(-4.34500000000001d) ) return 6.96378316811241E-06d;
		if ( z<(-4.34000000000001d) ) return 7.12413581793747E-06d;
		if ( z<(-4.33500000000001d) ) return 7.2880061180447E-06d;
		if ( z<(-4.33000000000001d) ) return 7.45546711100609E-06d;
		if ( z<(-4.32500000000001d) ) return 7.62659312747438E-06d;
		if ( z<(-4.32000000000001d) ) return 7.80146005108229E-06d;
		if ( z<(-4.31500000000001d) ) return 7.9801451801087E-06d;
		if ( z<(-4.31000000000001d) ) return 8.16272731452017E-06d;
		if ( z<(-4.30500000000001d) ) return 8.34928678239422E-06d;
		if ( z<(-4.30000000000001d) ) return 8.53990546390015E-06d;
		if ( z<(-4.29500000000002d) ) return 8.73466683415369E-06d;
		if ( z<(-4.29000000000002d) ) return 8.93365591481121E-06d;
		if ( z<(-4.28500000000002d) ) return 9.13695941573422E-06d;
		if ( z<(-4.28000000000002d) ) return 9.34466566804293E-06d;
		if ( z<(-4.27500000000002d) ) return 9.55686473369521E-06d;
		if ( z<(-4.27000000000002d) ) return 9.77364837950745E-06d;
		if ( z<(-4.26500000000002d) ) return 9.99511009203147E-06d;
		if ( z<(-4.26000000000002d) ) return 1.02213451862454E-05d;
		if ( z<(-4.25500000000002d) ) return 1.04524507786863E-05d;
		if ( z<(-4.25000000000002d) ) return 1.06885257844525E-05d;
		if ( z<(-4.24500000000002d) ) return 1.09296710606444E-05d;
		if ( z<(-4.24000000000002d) ) return 1.11759893370866E-05d;
		if ( z<(-4.23500000000002d) ) return 1.14275852967083E-05d;
		if ( z<(-4.23000000000002d) ) return 1.16845655857567E-05d;
		if ( z<(-4.22500000000002d) ) return 1.19470389088328E-05d;
		if ( z<(-4.22000000000002d) ) return 1.22151159436257E-05d;
		if ( z<(-4.21500000000002d) ) return 1.24889094672564E-05d;
		if ( z<(-4.21000000000002d) ) return 1.27685344137873E-05d;
		if ( z<(-4.20500000000002d) ) return 1.30541078502411E-05d;
		if ( z<(-4.20000000000002d) ) return 1.33457490291145E-05d;
		if ( z<(-4.19500000000002d) ) return 1.36435793882672E-05d;
		if ( z<(-4.19000000000002d) ) return 0.000013947722724339d;
		if ( z<(-4.18500000000002d) ) return 1.42583050686262E-05d;
		if ( z<(-4.18000000000002d) ) return 1.45754547922206E-05d;
		if ( z<(-4.17500000000002d) ) return 1.48993026906075E-05d;
		if ( z<(-4.17000000000002d) ) return 1.52299819519142E-05d;
		if ( z<(-4.16500000000002d) ) return 0.000015567628254165d;
		if ( z<(-4.16000000000002d) ) return 1.59123797143224E-05d;
		if ( z<(-4.15500000000002d) ) return 1.62643771147719E-05d;
		if ( z<(-4.15000000000002d) ) return 0.000016623763729795d;
		if ( z<(-4.14500000000002d) ) return 1.69906855083113E-05d;
		if ( z<(-4.14000000000002d) ) return 1.73652910859801E-05d;
		if ( z<(-4.13500000000002d) ) return 0.000017747731773099d;
		if ( z<(-4.13000000000002d) ) return 1.81381617208043E-05d;
		if ( z<(-4.12500000000002d) ) return 1.85367378449097E-05d;
		if ( z<(-4.12000000000002d) ) return 1.89436199482529E-05d;
		if ( z<(-4.11500000000002d) ) return 0.000019358970743788d;
		if ( z<(-4.11000000000002d) ) return 1.97829558735707E-05d;
		if ( z<(-4.10500000000002d) ) return 2.02157440221118E-05d;
		if ( z<(-4.10000000000002d) ) return 2.06575069170434E-05d;
		if ( z<(-4.09500000000002d) ) return 2.11084193966204E-05d;
		if ( z<(-4.09000000000002d) ) return 0.000021568659455462d;
		if ( z<(-4.08500000000002d) ) return 0.000022038408292735d;
		if ( z<(-4.08000000000002d) ) return 2.25178503849843E-05d;
		if ( z<(-4.07500000000002d) ) return 0.000023007173527545d;
		if ( z<(-4.07000000000002d) ) return 2.35065688647396E-05d;
		if ( z<(-4.06500000000002d) ) return 2.40162309992353E-05d;
		if ( z<(-4.06000000000002d) ) return 2.45363579624014E-05d;
		if ( z<(-4.05500000000002d) ) return 2.50671513930545E-05d;
		if ( z<(-4.05000000000002d) ) return 2.56088164710677E-05d;
		if ( z<(-4.04500000000002d) ) return 2.61615620671396E-05d;
		if ( z<(-4.04000000000002d) ) return 2.67256007211447E-05d;
		if ( z<(-4.03500000000002d) ) return 2.73011487901265E-05d;
		if ( z<(-4.03000000000002d) ) return 2.78884264386381E-05d;
		if ( z<(-4.02500000000002d) ) return 2.84876577467674E-05d;
		if ( z<(-4.02000000000002d) ) return 2.90990707164651E-05d;
		if ( z<(-4.01500000000002d) ) return 2.97228974017738E-05d;
		if ( z<(-4.01000000000002d) ) return 3.03593739252594E-05d;
		if ( z<(-4.00500000000002d) ) return 3.10087405769321E-05d;
		if ( z<(-4.00000000000002d) ) return 3.16712418352294E-05d;
		if ( z<(-3.99500000000002d) ) return 3.23471264789266E-05d;
		if ( z<(-3.99000000000002d) ) return 0.000033036647632434d;
		if ( z<(-3.98500000000002d) ) return 3.37400628303008E-05d;
		if ( z<(-3.98000000000002d) ) return 3.44576341169134E-05d;
		if ( z<(-3.97500000000002d) ) return 3.51896280712527E-05d;
		if ( z<(-3.97000000000002d) ) return 3.59363159010417E-05d;
		if ( z<(-3.96500000000002d) ) return 3.66979735495487E-05d;
		if ( z<(-3.96000000000002d) ) return 3.74748816984738E-05d;
		if ( z<(-3.95500000000002d) ) return 3.82673258862987E-05d;
		if ( z<(-3.95000000000002d) ) return 3.90755965996581E-05d;
		if ( z<(-3.94500000000002d) ) return 3.98999893087559E-05d;
		if ( z<(-3.94000000000002d) ) return 4.07408045599578E-05d;
		if ( z<(-3.93500000000002d) ) return 4.15983480668292E-05d;
		if ( z<(-3.93000000000002d) ) return 4.24729307904048E-05d;
		if ( z<(-3.92500000000002d) ) return 4.33648689782684E-05d;
		if ( z<(-3.92000000000002d) ) return 4.42744843097698E-05d;
		if ( z<(-3.91500000000002d) ) return 4.52021039343276E-05d;
		if ( z<(-3.91000000000002d) ) return 4.61480605566944E-05d;
		if ( z<(-3.90500000000002d) ) return 4.71126925507548E-05d;
		if ( z<(-3.90000000000002d) ) return 4.80963440157023E-05d;
		if ( z<(-3.89500000000002d) ) return 4.90993648892823E-05d;
		if ( z<(-3.89000000000002d) ) return 5.01221109987515E-05d;
		if ( z<(-3.88500000000002d) ) return 5.11649441904405E-05d;
		if ( z<(-3.88000000000002d) ) return 0.000052228232399365d;
		if ( z<(-3.87500000000002d) ) return 5.33123497550303E-05d;
		if ( z<(-3.87000000000002d) ) return 5.44176766383853E-05d;
		if ( z<(-3.86500000000002d) ) return 5.55445998162707E-05d;
		if ( z<(-3.86000000000002d) ) return 5.66935125322354E-05d;
		if ( z<(-3.85500000000002d) ) return 5.78648145826977E-05d;
		if ( z<(-3.85000000000002d) ) return 5.90589124186414E-05d;
		if ( z<(-3.84500000000002d) ) return 6.02762192656314E-05d;
		if ( z<(-3.84000000000002d) ) return 6.15171551836546E-05d;
		if ( z<(-3.83500000000002d) ) return 6.27821472238832E-05d;
		if ( z<(-3.83000000000002d) ) return 6.40716294879606E-05d;
		if ( z<(-3.82500000000003d) ) return 6.53860432451303E-05d;
		if ( z<(-3.82000000000003d) ) return 6.67258370314894E-05d;
		if ( z<(-3.81500000000003d) ) return 6.80914667736676E-05d;
		if ( z<(-3.81000000000003d) ) return 6.94833958820862E-05d;
		if ( z<(-3.80500000000003d) ) return 7.09020953622019E-05d;
		if ( z<(-3.80000000000003d) ) return 7.23480439255297E-05d;
		if ( z<(-3.79500000000003d) ) return 7.38217281112119E-05d;
		if ( z<(-3.79000000000003d) ) return 7.53236423788328E-05d;
		if ( z<(-3.78500000000003d) ) return 7.68542892464197E-05d;
		if ( z<(-3.78000000000003d) ) return 0.000078414179387476d;
		if ( z<(-3.77500000000003d) ) return 8.00038317554375E-05d;
		if ( z<(-3.77000000000003d) ) return 8.16237737013559E-05d;
		if ( z<(-3.76500000000003d) ) return 8.32745411132318E-05d;
		if ( z<(-3.76000000000003d) ) return 8.49566784983935E-05d;
		if ( z<(-3.75500000000003d) ) return 8.66707391384836E-05d;
		if ( z<(-3.75000000000003d) ) return 8.84172852028131E-05d;
		if ( z<(-3.74500000000003d) ) return 9.01968878733728E-05d;
		if ( z<(-3.74000000000003d) ) return 9.20101274741736E-05d;
		if ( z<(-3.73500000000003d) ) return 9.38575936059172E-05d;
		if ( z<(-3.73000000000003d) ) return 9.57398852685643E-05d;
		if ( z<(-3.72500000000003d) ) return 9.76576109934513E-05d;
		if ( z<(-3.72000000000003d) ) return 0.00009961138897574d;
		if ( z<(-3.71500000000003d) ) return 0.000101601847224186d;
		if ( z<(-3.71000000000003d) ) return 0.000103629623674939d;
		if ( z<(-3.70500000000003d) ) return 0.000105695366347636d;
		if ( z<(-3.70000000000003d) ) return 0.000107799733476965d;
		if ( z<(-3.69500000000003d) ) return 0.000109943393656775d;
		if ( z<(-3.69000000000003d) ) return 0.000112127025980735d;
		if ( z<(-3.68500000000003d) ) return 0.00011435132019022d;
		if ( z<(-3.68000000000003d) ) return 0.000116616976814976d;
		if ( z<(-3.67500000000003d) ) return 0.000118924707327661d;
		if ( z<(-3.67000000000003d) ) return 0.000121275234284512d;
		if ( z<(-3.66500000000003d) ) return 0.00012366929149199d;
		if ( z<(-3.66000000000003d) ) return 0.000126107624139005d;
		if ( z<(-3.65500000000003d) ) return 0.000128590988968225d;
		if ( z<(-3.65000000000003d) ) return 0.000131120154421183d;
		if ( z<(-3.64500000000003d) ) return 0.000133695900802921d;
		if ( z<(-3.64000000000003d) ) return 0.000136319020446418d;
		if ( z<(-3.63500000000003d) ) return 0.000138990317854359d;
		if ( z<(-3.63000000000003d) ) return 0.000141710609875112d;
		if ( z<(-3.62500000000003d) ) return 0.000144480725882135d;
		if ( z<(-3.62000000000003d) ) return 0.000147301507907427d;
		if ( z<(-3.61500000000003d) ) return 0.000150173810838927d;
		if ( z<(-3.61000000000003d) ) return 0.000153098502573057d;
		if ( z<(-3.60500000000003d) ) return 0.000156076464196686d;
		if ( z<(-3.60000000000003d) ) return 0.000159108590157886d;
		if ( z<(-3.59500000000003d) ) return 0.000162195788432573d;
		if ( z<(-3.59000000000003d) ) return 0.000165338980719909d;
		if ( z<(-3.58500000000003d) ) return 0.000168539102605281d;
		if ( z<(-3.58000000000003d) ) return 0.000171797103745597d;
		if ( z<(-3.57500000000003d) ) return 0.000175113948060801d;
		if ( z<(-3.57000000000003d) ) return 0.000178490613905513d;
		if ( z<(-3.56500000000003d) ) return 0.000181928094260542d;
		if ( z<(-3.56000000000003d) ) return 0.000185427396932392d;
		if ( z<(-3.55500000000003d) ) return 0.00018898954472113d;
		if ( z<(-3.55000000000003d) ) return 0.000192615575636434d;
		if ( z<(-3.54500000000003d) ) return 0.000196306543067681d;
		if ( z<(-3.54000000000003d) ) return 0.000200063516008653d;
		if ( z<(-3.53500000000003d) ) return 0.000203887579224182d;
		if ( z<(-3.53000000000003d) ) return 0.000207779833480748d;
		if ( z<(-3.52500000000003d) ) return 0.000211741395723442d;
		if ( z<(-3.52000000000003d) ) return 0.000215773399294683d;
		if ( z<(-3.51500000000003d) ) return 0.000219876994134394d;
		if ( z<(-3.51000000000003d) ) return 0.000224053346991049d;
		if ( z<(-3.50500000000003d) ) return 0.00022830364162596d;
		if ( z<(-3.50000000000003d) ) return 0.00023262907903554d;
		if ( z<(-3.49500000000003d) ) return 0.000237030877652256d;
		if ( z<(-3.49000000000003d) ) return 0.000241510273568779d;
		if ( z<(-3.48500000000003d) ) return 0.000246068520755705d;
		if ( z<(-3.48000000000003d) ) return 0.000250706891281594d;
		if ( z<(-3.47500000000003d) ) return 0.000255426675528359d;
		if ( z<(-3.47000000000003d) ) return 0.000260229182427185d;
		if ( z<(-3.46500000000003d) ) return 0.000265115739674693d;
		if ( z<(-3.46000000000003d) ) return 0.000270087693963861d;
		if ( z<(-3.45500000000003d) ) return 0.000275146411216509d;
		if ( z<(-3.45000000000003d) ) return 0.000280293276816002d;
		if ( z<(-3.44500000000003d) ) return 0.000285529695837505d;
		if ( z<(-3.44000000000003d) ) return 0.000290857093290686d;
		if ( z<(-3.43500000000003d) ) return 0.000296276914351745d;
		if ( z<(-3.43000000000003d) ) return 0.000301790624609666d;
		if ( z<(-3.42500000000003d) ) return 0.000307399710305356d;
		if ( z<(-3.42000000000003d) ) return 0.000313105678581449d;
		if ( z<(-3.41500000000003d) ) return 0.000318910057724775d;
		if ( z<(-3.41000000000003d) ) return 0.000324814397419049d;
		if ( z<(-3.40500000000003d) ) return 0.000330820268992227d;
		if ( z<(-3.40000000000003d) ) return 0.000336929265676744d;
		if ( z<(-3.39500000000003d) ) return 0.000343143002858426d;
		if ( z<(-3.39000000000003d) ) return 0.000349463118338611d;
		if ( z<(-3.38500000000003d) ) return 0.000355891272592057d;
		if ( z<(-3.38000000000003d) ) return 0.000362429149033616d;
		if ( z<(-3.37500000000003d) ) return 0.000369078454275362d;
		if ( z<(-3.37000000000003d) ) return 0.000375840918400039d;
		if ( z<(-3.36500000000003d) ) return 0.000382718295227624d;
		if ( z<(-3.36000000000003d) ) return 0.000389712362581784d;
		if ( z<(-3.35500000000004d) ) return 0.00039682492257298d;
		if ( z<(-3.35000000000004d) ) return 0.000404057801864477d;
		if ( z<(-3.34500000000004d) ) return 0.00041141285195323d;
		if ( z<(-3.34000000000004d) ) return 0.000418891949449884d;
		if ( z<(-3.33500000000004d) ) return 0.000426496996364101d;
		if ( z<(-3.33000000000004d) ) return 0.000434229920382112d;
		if ( z<(-3.32500000000004d) ) return 0.000442092675155714d;
		if ( z<(-3.32000000000004d) ) return 0.000450087240591479d;
		if ( z<(-3.31500000000004d) ) return 0.000458215623146074d;
		if ( z<(-3.31000000000004d) ) return 0.000466479856108037d;
		if ( z<(-3.30500000000004d) ) return 0.000474881999901644d;
		if ( z<(-3.30000000000004d) ) return 0.000483424142384337d;
		if ( z<(-3.29500000000004d) ) return 0.000492108399138935d;
		if ( z<(-3.29000000000004d) ) return 0.000500936913785721d;
		if ( z<(-3.28500000000004d) ) return 0.000509911858276313d;
		if ( z<(-3.28000000000004d) ) return 0.000519035433206749d;
		if ( z<(-3.27500000000004d) ) return 0.000528309868122356d;
		if ( z<(-3.27000000000004d) ) return 0.000537737421830053d;
		if ( z<(-3.26500000000004d) ) return 0.00054732038270755d;
		if ( z<(-3.26000000000004d) ) return 0.000557061069024645d;
		if ( z<(-3.25500000000004d) ) return 0.000566961829253532d;
		if ( z<(-3.25000000000004d) ) return 0.000577025042390766d;
		if ( z<(-3.24500000000004d) ) return 0.000587253118280895d;
		if ( z<(-3.24000000000004d) ) return 0.000597648497933978d;
		if ( z<(-3.23500000000004d) ) return 0.000608213653859102d;
		if ( z<(-3.23000000000004d) ) return 0.000618951090387121d;
		if ( z<(-3.22500000000004d) ) return 0.000629863343998061d;
		if ( z<(-3.22000000000004d) ) return 0.000640952983660403d;
		if ( z<(-3.21500000000004d) ) return 0.000652222611160047d;
		if ( z<(-3.21000000000004d) ) return 0.000663674861440033d;
		if ( z<(-3.20500000000004d) ) return 0.00067531240293528d;
		if ( z<(-3.20000000000004d) ) return 0.000687137937915971d;
		if ( z<(-3.19500000000004d) ) return 0.000699154202828955d;
		if ( z<(-3.19000000000004d) ) return 0.000711363968645351d;
		if ( z<(-3.18500000000004d) ) return 0.000723770041201832d;
		if ( z<(-3.18000000000004d) ) return 0.00073637526155379d;
		if ( z<(-3.17500000000004d) ) return 0.000749182506327051d;
		if ( z<(-3.17000000000004d) ) return 0.000762194688066931d;
		if ( z<(-3.16500000000004d) ) return 0.000775414755597614d;
		if ( z<(-3.16000000000004d) ) return 0.000788845694375206d;
		if ( z<(-3.15500000000004d) ) return 0.000802490526850441d;
		if ( z<(-3.15000000000004d) ) return 0.000816352312828394d;
		if ( z<(-3.14500000000004d) ) return 0.000830434149829751d;
		if ( z<(-3.14000000000004d) ) return 0.000844739173458509d;
		if ( z<(-3.13500000000004d) ) return 0.000859270557768355d;
		if ( z<(-3.13000000000004d) ) return 0.000874031515631146d;
		if ( z<(-3.12500000000004d) ) return 0.000889025299108281d;
		if ( z<(-3.12000000000004d) ) return 0.000904255199822845d;
		if ( z<(-3.11500000000004d) ) return 0.000919724549333312d;
		if ( z<(-3.11000000000004d) ) return 0.000935436719514016d;
		if ( z<(-3.10500000000004d) ) return 0.000951395122930521d;
		if ( z<(-3.10000000000004d) ) return 0.000967603213217982d;
		if ( z<(-3.09500000000004d) ) return 0.000984064485469283d;
		if ( z<(-3.09000000000004d) ) return 0.00100078247661406d;
		if ( z<(-3.08500000000004d) ) return 0.00101776076580351d;
		if ( z<(-3.08000000000004d) ) return 0.00103500297480252d;
		if ( z<(-3.07500000000004d) ) return 0.00105251276837581d;
		if ( z<(-3.07000000000004d) ) return 0.00107029385467883d;
		if ( z<(-3.06500000000004d) ) return 0.00108834998565055d;
		if ( z<(-3.06000000000004d) ) return 0.00110668495740918d;
		if ( z<(-3.05500000000004d) ) return 0.00112530261064503d;
		if ( z<(-3.05000000000004d) ) return 0.00114420683102268d;
		if ( z<(-3.04500000000004d) ) return 0.00116340154957384d;
		if ( z<(-3.04000000000004d) ) return 0.00118289074310429d;
		if ( z<(-3.03500000000004d) ) return 0.00120267843459154d;
		if ( z<(-3.03000000000004d) ) return 0.00122276869359206d;
		if ( z<(-3.02500000000004d) ) return 0.00124316563664306d;
		if ( z<(-3.02000000000004d) ) return 0.00126387342767198d;
		if ( z<(-3.01500000000004d) ) return 0.00128489627840378d;
		if ( z<(-3.01000000000004d) ) return 0.0013062384487692d;
		if ( z<(-3.00500000000004d) ) return 0.00132790424731777d;
		if ( z<(-3.00000000000004d) ) return 0.00134989803162977d;
		if ( z<(-2.99500000000004d) ) return 0.00137222420872685d;
		if ( z<(-2.99000000000004d) ) return 0.00139488723549208d;
		if ( z<(-2.98500000000004d) ) return 0.0014178916190799d;
		if ( z<(-2.98000000000004d) ) return 0.00144124191733985d;
		if ( z<(-2.97500000000004d) ) return 0.00146494273922881d;
		if ( z<(-2.97000000000004d) ) return 0.00148899874523734d;
		if ( z<(-2.96500000000004d) ) return 0.00151341464780264d;
		if ( z<(-2.96000000000004d) ) return 0.00153819521173792d;
		if ( z<(-2.95500000000004d) ) return 0.00156334525464974d;
		if ( z<(-2.95000000000004d) ) return 0.00158886964736449d;
		if ( z<(-2.94500000000004d) ) return 0.00161477331435345d;
		if ( z<(-2.94000000000004d) ) return 0.00164106123415686d;
		if ( z<(-2.93500000000004d) ) return 0.00166773843981094d;
		if ( z<(-2.93000000000004d) ) return 0.00169481001927696d;
		if ( z<(-2.92500000000004d) ) return 0.00172228111586759d;
		if ( z<(-2.92000000000004d) ) return 0.00175015692867597d;
		if ( z<(-2.91500000000004d) ) return 0.00177844271300676d;
		if ( z<(-2.91000000000004d) ) return 0.00180714378080649d;
		if ( z<(-2.90500000000004d) ) return 0.00183626550109151d;
		if ( z<(-2.90000000000004d) ) return 0.00186581330038371d;
		if ( z<(-2.89500000000004d) ) return 0.00189579266314077d;
		if ( z<(-2.89000000000004d) ) return 0.00192620913218766d;
		if ( z<(-2.88500000000005d) ) return 0.00195706830915132d;
		if ( z<(-2.88000000000005d) ) return 0.0019883758548942d;
		if ( z<(-2.87500000000005d) ) return 0.00202013748994556d;
		if ( z<(-2.87000000000005d) ) return 0.0020523589949395d;
		if ( z<(-2.86500000000005d) ) return 0.00208504621104533d;
		if ( z<(-2.86000000000005d) ) return 0.00211820504040428d;
		if ( z<(-2.85500000000005d) ) return 0.002151841446564d;
		if ( z<(-2.85000000000005d) ) return 0.0021859614549129d;
		if ( z<(-2.84500000000005d) ) return 0.00222057115311425d;
		if ( z<(-2.84000000000005d) ) return 0.00225567669154203d;
		if ( z<(-2.83500000000005d) ) return 0.00229128428371483d;
		if ( z<(-2.83000000000005d) ) return 0.0023274002067315d;
		if ( z<(-2.82500000000005d) ) return 0.00236403080170267d;
		if ( z<(-2.82000000000005d) ) return 0.00240118247418897d;
		if ( z<(-2.81500000000005d) ) return 0.00243886169463137d;
		if ( z<(-2.81000000000005d) ) return 0.00247707499878547d;
		if ( z<(-2.80500000000005d) ) return 0.00251582898815605d;
		if ( z<(-2.80000000000005d) ) return 0.00255513033042765d;
		if ( z<(-2.79500000000005d) ) return 0.00259498575989658d;
		if ( z<(-2.79000000000005d) ) return 0.00263540207790447d;
		if ( z<(-2.78500000000005d) ) return 0.00267638615326615d;
		if ( z<(-2.78000000000005d) ) return 0.00271794492270094d;
		if ( z<(-2.77500000000005d) ) return 0.00276008539126216d;
		if ( z<(-2.77000000000005d) ) return 0.00280281463276455d;
		if ( z<(-2.76500000000005d) ) return 0.00284613979021264d;
		if ( z<(-2.76000000000005d) ) return 0.00289006807622583d;
		if ( z<(-2.75500000000005d) ) return 0.00293460677346413d;
		if ( z<(-2.75000000000005d) ) return 0.00297976323505411d;
		if ( z<(-2.74500000000005d) ) return 0.00302554488500828d;
		if ( z<(-2.74000000000005d) ) return 0.00307195921865011d;
		if ( z<(-2.73500000000005d) ) return 0.00311901380303248d;
		if ( z<(-2.73000000000005d) ) return 0.00316671627735732d;
		if ( z<(-2.72500000000005d) ) return 0.00321507435339341d;
		if ( z<(-2.72000000000005d) ) return 0.00326409581589093d;
		if ( z<(-2.71500000000005d) ) return 0.00331378852299724d;
		if ( z<(-2.71000000000005d) ) return 0.00336416040666854d;
		if ( z<(-2.70500000000005d) ) return 0.00341521947308143d;
		if ( z<(-2.70000000000005d) ) return 0.00346697380303995d;
		if ( z<(-2.69500000000005d) ) return 0.00351943155238577d;
		if ( z<(-2.69000000000005d) ) return 0.00357260095239909d;
		if ( z<(-2.68500000000005d) ) return 0.0036264903102059d;
		if ( z<(-2.68000000000005d) ) return 0.00368110800917454d;
		if ( z<(-2.67500000000005d) ) return 0.00373646250931703d;
		if ( z<(-2.67000000000005d) ) return 0.00379256234768488d;
		if ( z<(-2.66500000000005d) ) return 0.00384941613876066d;
		if ( z<(-2.66000000000005d) ) return 0.00390703257485214d;
		if ( z<(-2.65500000000005d) ) return 0.00396542042647863d;
		if ( z<(-2.65000000000005d) ) return 0.00402458854275789d;
		if ( z<(-2.64500000000005d) ) return 0.00408454585178952d;
		if ( z<(-2.64000000000005d) ) return 0.00414530136103552d;
		if ( z<(-2.63500000000005d) ) return 0.00420686415769711d;
		if ( z<(-2.63000000000005d) ) return 0.00426924340908852d;
		if ( z<(-2.62500000000005d) ) return 0.00433244836301183d;
		if ( z<(-2.62000000000005d) ) return 0.00439648834812045d;
		if ( z<(-2.61500000000005d) ) return 0.00446137277428771d;
		if ( z<(-2.61000000000005d) ) return 0.00452711113296644d;
		if ( z<(-2.60500000000005d) ) return 0.0045937129975484d;
		if ( z<(-2.60000000000005d) ) return 0.00466118802371795d;
		if ( z<(-2.59500000000005d) ) return 0.00472954594980379d;
		if ( z<(-2.59000000000005d) ) return 0.00479879659712545d;
		if ( z<(-2.58500000000005d) ) return 0.00486894987033792d;
		if ( z<(-2.58000000000005d) ) return 0.00494001575776981d;
		if ( z<(-2.57500000000005d) ) return 0.00501200433176074d;
		if ( z<(-2.57000000000005d) ) return 0.00508492574899022d;
		if ( z<(-2.56500000000005d) ) return 0.00515879025080812d;
		if ( z<(-2.56000000000005d) ) return 0.00523360816355489d;
		if ( z<(-2.55500000000005d) ) return 0.0053093898988823d;
		if ( z<(-2.55000000000005d) ) return 0.00538614595406584d;
		if ( z<(-2.54500000000005d) ) return 0.00546388691231603d;
		if ( z<(-2.54000000000005d) ) return 0.00554262344308176d;
		if ( z<(-2.53500000000005d) ) return 0.00562236630235213d;
		if ( z<(-2.53000000000005d) ) return 0.00570312633294989d;
		if ( z<(-2.52500000000005d) ) return 0.00578491446482354d;
		if ( z<(-2.52000000000005d) ) return 0.00586774171533144d;
		if ( z<(-2.51500000000005d) ) return 0.00595161918952303d;
		if ( z<(-2.51000000000005d) ) return 0.00603655808041159d;
		if ( z<(-2.50500000000005d) ) return 0.00612256966924662d;
		if ( z<(-2.50000000000005d) ) return 0.00620966532577527d;
		if ( z<(-2.49500000000005d) ) return 0.0062978565085019d;
		if ( z<(-2.49000000000005d) ) return 0.00638715476494234d;
		if ( z<(-2.48500000000005d) ) return 0.00647757173186703d;
		if ( z<(-2.48000000000005d) ) return 0.0065691191355457d;
		if ( z<(-2.47500000000005d) ) return 0.00666180879198186d;
		if ( z<(-2.47000000000005d) ) return 0.00675565260713973d;
		if ( z<(-2.46500000000005d) ) return 0.0068506625771696d;
		if ( z<(-2.46000000000005d) ) return 0.006946850788623d;
		if ( z<(-2.45500000000005d) ) return 0.00704422941866367d;
		if ( z<(-2.45000000000005d) ) return 0.00714281073527023d;
		if ( z<(-2.44500000000005d) ) return 0.00724260709743363d;
		if ( z<(-2.44000000000005d) ) return 0.00734363095534718d;
		if ( z<(-2.43500000000005d) ) return 0.00744589485059133d;
		if ( z<(-2.43000000000005d) ) return 0.00754941141630816d;
		if ( z<(-2.42500000000005d) ) return 0.00765419337737228d;
		if ( z<(-2.42000000000005d) ) return 0.00776025355055254d;
		if ( z<(-2.41500000000006d) ) return 0.00786760484466731d;
		if ( z<(-2.41000000000006d) ) return 0.0079762602607325d;
		if ( z<(-2.40500000000006d) ) return 0.00808623289210064d;
		if ( z<(-2.40000000000006d) ) return 0.00819753592459482d;
		if ( z<(-2.39500000000006d) ) return 0.00831018263663286d;
		if ( z<(-2.39000000000006d) ) return 0.00842418639934428d;
		if ( z<(-2.38500000000006d) ) return 0.00853956067668071d;
		if ( z<(-2.38000000000006d) ) return 0.00865631902551534d;
		if ( z<(-2.37500000000006d) ) return 0.00877447509573703d;
		if ( z<(-2.37000000000006d) ) return 0.00889404263033544d;
		if ( z<(-2.36500000000006d) ) return 0.00901503546547666d;
		if ( z<(-2.36000000000006d) ) return 0.00913746753057132d;
		if ( z<(-2.35500000000006d) ) return 0.00926135284833474d;
		if ( z<(-2.35000000000006d) ) return 0.00938670553483711d;
		if ( z<(-2.34500000000006d) ) return 0.00951353979954561d;
		if ( z<(-2.34000000000006d) ) return 0.00964186994535698d;
		if ( z<(-2.33500000000006d) ) return 0.00977171036862257d;
		if ( z<(-2.33000000000006d) ) return 0.0099030755591627d;
		if ( z<(-2.32500000000006d) ) return 0.0100359801002725d;
		if ( z<(-2.32000000000006d) ) return 0.0101704386687183d;
		if ( z<(-2.31500000000006d) ) return 0.010306466034724d;
		if ( z<(-2.31000000000006d) ) return 0.0104440770619494d;
		if ( z<(-2.30500000000006d) ) return 0.0105832867074582d;
		if ( z<(-2.30000000000006d) ) return 0.0107241100216742d;
		if ( z<(-2.29500000000006d) ) return 0.010866562148331d;
		if ( z<(-2.29000000000006d) ) return 0.0110106583244098d;
		if ( z<(-2.28500000000006d) ) return 0.0111564138800666d;
		if ( z<(-2.28000000000006d) ) return 0.0113038442385511d;
		if ( z<(-2.27500000000006d) ) return 0.0114529649161135d;
		if ( z<(-2.27000000000006d) ) return 0.0116037915219018d;
		if ( z<(-2.26500000000006d) ) return 0.0117563397578482d;
		if ( z<(-2.26000000000006d) ) return 0.0119106254185452d;
		if ( z<(-2.25500000000006d) ) return 0.0120666643911109d;
		if ( z<(-2.25000000000006d) ) return 0.0122244726550429d;
		if ( z<(-2.24500000000006d) ) return 0.0123840662820622d;
		if ( z<(-2.24000000000006d) ) return 0.0125454614359446d;
		if ( z<(-2.23500000000006d) ) return 0.012708674372344d;
		if ( z<(-2.23000000000006d) ) return 0.0128737214386001d;
		if ( z<(-2.22500000000006d) ) return 0.0130406190735377d;
		if ( z<(-2.22000000000006d) ) return 0.0132093838072542d;
		if ( z<(-2.21500000000006d) ) return 0.0133800322608952d;
		if ( z<(-2.21000000000006d) ) return 0.0135525811464179d;
		if ( z<(-2.20500000000006d) ) return 0.0137270472663431d;
		if ( z<(-2.20000000000006d) ) return 0.0139034475134965d;
		if ( z<(-2.19500000000006d) ) return 0.0140817988707356d;
		if ( z<(-2.19000000000006d) ) return 0.0142621184106666d;
		if ( z<(-2.18500000000006d) ) return 0.0144444232953493d;
		if ( z<(-2.18000000000006d) ) return 0.0146287307759869d;
		if ( z<(-2.17500000000006d) ) return 0.0148150581926079d;
		if ( z<(-2.17000000000006d) ) return 0.01500342297373d;
		if ( z<(-2.16500000000006d) ) return 0.0151938426360181d;
		if ( z<(-2.16000000000006d) ) return 0.015386334783923d;
		if ( z<(-2.15500000000006d) ) return 0.0155809171093131d;
		if ( z<(-2.15000000000006d) ) return 0.015777607391088d;
		if ( z<(-2.14500000000006d) ) return 0.0159764234947842d;
		if ( z<(-2.14000000000006d) ) return 0.0161773833721637d;
		if ( z<(-2.13500000000006d) ) return 0.0163805050607921d;
		if ( z<(-2.13000000000006d) ) return 0.0165858066836027d;
		if ( z<(-2.12500000000006d) ) return 0.0167933064484463d;
		if ( z<(-2.12000000000006d) ) return 0.0170030226476303d;
		if ( z<(-2.11500000000006d) ) return 0.0172149736574408d;
		if ( z<(-2.11000000000006d) ) return 0.0174291779376544d;
		if ( z<(-2.10500000000006d) ) return 0.0176456540310344d;
		if ( z<(-2.10000000000006d) ) return 0.0178644205628138d;
		if ( z<(-2.09500000000006d) ) return 0.0180854962401654d;
		if ( z<(-2.09000000000006d) ) return 0.0183088998516563d;
		if ( z<(-2.08500000000006d) ) return 0.0185346502666901d;
		if ( z<(-2.08000000000006d) ) return 0.018762766434935d;
		if ( z<(-2.07500000000006d) ) return 0.0189932673857356d;
		if ( z<(-2.07000000000006d) ) return 0.0192261722275144d;
		if ( z<(-2.06500000000006d) ) return 0.019461500147155d;
		if ( z<(-2.06000000000006d) ) return 0.0196992704093738d;
		if ( z<(-2.05500000000006d) ) return 0.0199395023560769d;
		if ( z<(-2.05000000000006d) ) return 0.0201822154057016d;
		if ( z<(-2.04500000000006d) ) return 0.0204274290525421d;
		if ( z<(-2.04000000000006d) ) return 0.0206751628660669d;
		if ( z<(-2.03500000000006d) ) return 0.0209254364902123d;
		if ( z<(-2.03000000000006d) ) return 0.0211782696426691d;
		if ( z<(-2.02500000000006d) ) return 0.0214336821141499d;
		if ( z<(-2.02000000000006d) ) return 0.0216916937676437d;
		if ( z<(-2.01500000000006d) ) return 0.0219523245376549d;
		if ( z<(-2.01000000000006d) ) return 0.0222155944294282d;
		if ( z<(-2.00500000000006d) ) return 0.0224815235181564d;
		if ( z<(-2.00000000000006d) ) return 0.0227501319481758d;
		if ( z<(-1.99500000000006d) ) return 0.0230214399321449d;
		if ( z<(-1.99000000000006d) ) return 0.0232954677502083d;
		if ( z<(-1.98500000000006d) ) return 0.0235722357491457d;
		if ( z<(-1.98000000000006d) ) return 0.0238517643415049d;
		if ( z<(-1.97500000000006d) ) return 0.0241340740047212d;
		if ( z<(-1.97000000000006d) ) return 0.0244191852802188d;
		if ( z<(-1.96500000000006d) ) return 0.0247071187725001d;
		if ( z<(-1.96000000000006d) ) return 0.0249978951482166d;
		if ( z<(-1.95500000000006d) ) return 0.0252915351352262d;
		if ( z<(-1.95000000000007d) ) return 0.0255880595216349d;
		if ( z<(-1.94500000000007d) ) return 0.0258874891548212d;
		if ( z<(-1.94000000000007d) ) return 0.0261898449404487d;
		if ( z<(-1.93500000000007d) ) return 0.0264951478414589d;
		if ( z<(-1.93000000000007d) ) return 0.026803418877051d;
		if ( z<(-1.92500000000007d) ) return 0.0271146791216454d;
		if ( z<(-1.92000000000007d) ) return 0.0274289497038329d;
		if ( z<(-1.91500000000007d) ) return 0.0277462518053038d;
		if ( z<(-1.91000000000007d) ) return 0.0280666066597681d;
		if ( z<(-1.90500000000007d) ) return 0.0283900355518549d;
		if ( z<(-1.90000000000007d) ) return 0.0287165598159976d;
		if ( z<(-1.89500000000007d) ) return 0.0290462008353023d;
		if ( z<(-1.89000000000007d) ) return 0.029378980040405d;
		if ( z<(-1.88500000000007d) ) return 0.0297149189083061d;
		if ( z<(-1.88000000000007d) ) return 0.0300540389611954d;
		if ( z<(-1.87500000000007d) ) return 0.0303963617652567d;
		if ( z<(-1.87000000000007d) ) return 0.0307419089294614d;
		if ( z<(-1.86500000000007d) ) return 0.0310907021043407d;
		if ( z<(-1.86000000000007d) ) return 0.0314427629807479d;
		if ( z<(-1.85500000000007d) ) return 0.0317981132886005d;
		if ( z<(-1.85000000000007d) ) return 0.0321567747956089d;
		if ( z<(-1.84500000000007d) ) return 0.032518769305989d;
		if ( z<(-1.84000000000007d) ) return 0.032884118659159d;
		if ( z<(-1.83500000000007d) ) return 0.0332528447284202d;
		if ( z<(-1.83000000000007d) ) return 0.0336249694196233d;
		if ( z<(-1.82500000000007d) ) return 0.0340005146698173d;
		if ( z<(-1.82000000000007d) ) return 0.0343795024458848d;
		if ( z<(-1.81500000000007d) ) return 0.0347619547431602d;
		if ( z<(-1.81000000000007d) ) return 0.0351478935840335d;
		if ( z<(-1.80500000000007d) ) return 0.0355373410165375d;
		if ( z<(-1.80000000000007d) ) return 0.0359303191129204d;
		if ( z<(-1.79500000000007d) ) return 0.0363268499682032d;
		if ( z<(-1.79000000000007d) ) return 0.0367269556987208d;
		if ( z<(-1.78500000000007d) ) return 0.0371306584406481d;
		if ( z<(-1.78000000000007d) ) return 0.0375379803485113d;
		if ( z<(-1.77500000000007d) ) return 0.0379489435936836d;
		if ( z<(-1.77000000000007d) ) return 0.0383635703628655d;
		if ( z<(-1.76500000000007d) ) return 0.0387818828565508d;
		if ( z<(-1.76000000000007d) ) return 0.0392039032874767d;
		if ( z<(-1.75500000000007d) ) return 0.0396296538790586d;
		if ( z<(-1.75000000000007d) ) return 0.0400591568638111d;
		if ( z<(-1.74500000000007d) ) return 0.0404924344817539d;
		if ( z<(-1.74000000000007d) ) return 0.0409295089788013d;
		if ( z<(-1.73500000000007d) ) return 0.04137040260514d;
		if ( z<(-1.73000000000007d) ) return 0.0418151376135889d;
		if ( z<(-1.72500000000007d) ) return 0.0422637362579463d;
		if ( z<(-1.72000000000007d) ) return 0.0427162207913226d;
		if ( z<(-1.71500000000007d) ) return 0.0431726134644579d;
		if ( z<(-1.71000000000007d) ) return 0.0436329365240256d;
		if ( z<(-1.70500000000007d) ) return 0.0440972122109207d;
		if ( z<(-1.70000000000007d) ) return 0.0445654627585363d;
		if ( z<(-1.69500000000007d) ) return 0.0450377103910249d;
		if ( z<(-1.69000000000007d) ) return 0.0455139773215432d;
		if ( z<(-1.68500000000007d) ) return 0.0459942857504876d;
		if ( z<(-1.68000000000007d) ) return 0.0464786578637133d;
		if ( z<(-1.67500000000007d) ) return 0.0469671158307389d;
		if ( z<(-1.67000000000007d) ) return 0.0474596818029404d;
		if ( z<(-1.66500000000007d) ) return 0.0479563779117285d;
		if ( z<(-1.66000000000007d) ) return 0.0484572262667157d;
		if ( z<(-1.65500000000007d) ) return 0.048962248953867d;
		if ( z<(-1.65000000000007d) ) return 0.0494714680336408d;
		if ( z<(-1.64500000000007d) ) return 0.0499849055391139d;
		if ( z<(-1.64000000000007d) ) return 0.0505025834740964d;
		if ( z<(-1.63500000000007d) ) return 0.0510245238112308d;
		if ( z<(-1.63000000000007d) ) return 0.0515507484900819d;
		if ( z<(-1.62500000000007d) ) return 0.0520812794152118d;
		if ( z<(-1.62000000000007d) ) return 0.0526161384542443d;
		if ( z<(-1.61500000000007d) ) return 0.053155347435915d;
		if ( z<(-1.61000000000007d) ) return 0.0536989281481118d;
		if ( z<(-1.60500000000007d) ) return 0.0542469023359022d;
		if ( z<(-1.60000000000007d) ) return 0.0547992916995499d;
		if ( z<(-1.59500000000007d) ) return 0.0553561178925175d;
		if ( z<(-1.59000000000007d) ) return 0.0559174025194613d;
		if ( z<(-1.58500000000007d) ) return 0.056483167134212d;
		if ( z<(-1.58000000000007d) ) return 0.0570534332377459d;
		if ( z<(-1.57500000000007d) ) return 0.0576282222761446d;
		if ( z<(-1.57000000000007d) ) return 0.0582075556385444d;
		if ( z<(-1.56500000000007d) ) return 0.0587914546550743d;
		if ( z<(-1.56000000000007d) ) return 0.0593799405947845d;
		if ( z<(-1.55500000000007d) ) return 0.0599730346635641d;
		if ( z<(-1.55000000000007d) ) return 0.0605707580020501d;
		if ( z<(-1.54500000000007d) ) return 0.0611731316835246d;
		if ( z<(-1.54000000000007d) ) return 0.0617801767118029d;
		if ( z<(-1.53500000000007d) ) return 0.0623919140191139d;
		if ( z<(-1.53000000000007d) ) return 0.0630083644639694d;
		if ( z<(-1.52500000000007d) ) return 0.0636295488290234d;
		if ( z<(-1.52000000000007d) ) return 0.0642554878189265d;
		if ( z<(-1.51500000000007d) ) return 0.0648862020581671d;
		if ( z<(-1.51000000000007d) ) return 0.0655217120889069d;
		if ( z<(-1.50500000000007d) ) return 0.0661620383688076d;
		if ( z<(-1.50000000000007d) ) return 0.0668072012688485d;
		if ( z<(-1.49500000000007d) ) return 0.0674572210711377d;
		if ( z<(-1.49000000000007d) ) return 0.0681121179667157d;
		if ( z<(-1.48500000000007d) ) return 0.0687719120533494d;
		if ( z<(-1.48000000000008d) ) return 0.0694366233333217d;
		if ( z<(-1.47500000000008d) ) return 0.0701062717112131d;
		if ( z<(-1.47000000000008d) ) return 0.0707808769916753d;
		if ( z<(-1.46500000000008d) ) return 0.0714604588772005d;
		if ( z<(-1.46000000000008d) ) return 0.0721450369658834d;
		if ( z<(-1.45500000000008d) ) return 0.0728346307491756d;
		if ( z<(-1.45000000000008d) ) return 0.073529259609638d;
		if ( z<(-1.44500000000008d) ) return 0.0742289428186831d;
		if ( z<(-1.44000000000008d) ) return 0.0749336995343164d;
		if ( z<(-1.43500000000008d) ) return 0.0756435487988691d;
		if ( z<(-1.43000000000008d) ) return 0.0763585095367282d;
		if ( z<(-1.42500000000008d) ) return 0.0770786005520608d;
		if ( z<(-1.42000000000008d) ) return 0.0778038405265353d;
		if ( z<(-1.41500000000008d) ) return 0.0785342480170369d;
		if ( z<(-1.41000000000008d) ) return 0.079269841453381d;
		if ( z<(-1.40500000000008d) ) return 0.0800106391360224d;
		if ( z<(-1.40000000000008d) ) return 0.0807566592337597d;
		if ( z<(-1.39500000000008d) ) return 0.0815079197814397d;
		if ( z<(-1.39000000000008d) ) return 0.0822644386776573d;
		if ( z<(-1.38500000000008d) ) return 0.0830262336824514d;
		if ( z<(-1.38000000000008d) ) return 0.0837933224150023d;
		if ( z<(-1.37500000000008d) ) return 0.0845657223513236d;
		if ( z<(-1.37000000000008d) ) return 0.085343450821955d;
		if ( z<(-1.36500000000008d) ) return 0.0861265250096511d;
		if ( z<(-1.36000000000008d) ) return 0.0869149619470728d;
		if ( z<(-1.35500000000008d) ) return 0.0877087785144738d;
		if ( z<(-1.35000000000008d) ) return 0.0885079914373894d;
		if ( z<(-1.34500000000008d) ) return 0.0893126172843245d;
		if ( z<(-1.34000000000008d) ) return 0.0901226724644398d;
		if ( z<(-1.33500000000008d) ) return 0.0909381732252411d;
		if ( z<(-1.33000000000008d) ) return 0.0917591356502678d;
		if ( z<(-1.32500000000008d) ) return 0.0925855756567819d;
		if ( z<(-1.32000000000008d) ) return 0.0934175089934587d;
		if ( z<(-1.31500000000008d) ) return 0.0942549512380797d;
		if ( z<(-1.31000000000008d) ) return 0.0950979177952257d;
		if ( z<(-1.30500000000008d) ) return 0.0959464238939743d;
		if ( z<(-1.30000000000008d) ) return 0.0968004845855968d;
		if ( z<(-1.29500000000008d) ) return 0.0976601147412608d;
		if ( z<(-1.29000000000008d) ) return 0.0985253290497342d;
		if ( z<(-1.28500000000008d) ) return 0.0993961420150917d;
		if ( z<(-1.28000000000008d) ) return 0.100272567954428d;
		if ( z<(-1.27500000000008d) ) return 0.101154620995572d;
		if ( z<(-1.27000000000008d) ) return 0.102042315074805d;
		if ( z<(-1.26500000000008d) ) return 0.102935663934588d;
		if ( z<(-1.26000000000008d) ) return 0.103834681121286d;
		if ( z<(-1.25500000000008d) ) return 0.104739379982908d;
		if ( z<(-1.25000000000008d) ) return 0.105649773666841d;
		if ( z<(-1.24500000000008d) ) return 0.106565875117598d;
		if ( z<(-1.24000000000008d) ) return 0.107487697074572d;
		if ( z<(-1.23500000000008d) ) return 0.108415252069789d;
		if ( z<(-1.23000000000008d) ) return 0.109348552425677d;
		if ( z<(-1.22500000000008d) ) return 0.110287610252836d;
		if ( z<(-1.22000000000008d) ) return 0.11123243744782d;
		if ( z<(-1.21500000000008d) ) return 0.112183045690919d;
		if ( z<(-1.21000000000008d) ) return 0.113139446443962d;
		if ( z<(-1.20500000000008d) ) return 0.114101650948114d;
		if ( z<(-1.20000000000008d) ) return 0.115069670221692d;
		if ( z<(-1.19500000000008d) ) return 0.116043515057987d;
		if ( z<(-1.19000000000008d) ) return 0.117023196023093d;
		if ( z<(-1.18500000000008d) ) return 0.118008723453747d;
		if ( z<(-1.18000000000008d) ) return 0.119000107455185d;
		if ( z<(-1.17500000000008d) ) return 0.119997357898996d;
		if ( z<(-1.17000000000008d) ) return 0.121000484421002d;
		if ( z<(-1.16500000000008d) ) return 0.122009496419133d;
		if ( z<(-1.16000000000008d) ) return 0.123024403051327d;
		if ( z<(-1.15500000000008d) ) return 0.124045213233434d;
		if ( z<(-1.15000000000008d) ) return 0.125071935637133d;
		if ( z<(-1.14500000000008d) ) return 0.126104578687867d;
		if ( z<(-1.14000000000008d) ) return 0.127143150562781d;
		if ( z<(-1.13500000000008d) ) return 0.12818765918868d;
		if ( z<(-1.13000000000008d) ) return 0.12923811224d;
		if ( z<(-1.12500000000008d) ) return 0.130294517136791d;
		if ( z<(-1.12000000000008d) ) return 0.131356881042713d;
		if ( z<(-1.11500000000008d) ) return 0.132425210863049d;
		if ( z<(-1.11000000000008d) ) return 0.133499513242729d;
		if ( z<(-1.10500000000008d) ) return 0.134579794564378d;
		if ( z<(-1.10000000000008d) ) return 0.135666060946365d;
		if ( z<(-1.09500000000008d) ) return 0.136758318240878d;
		if ( z<(-1.09000000000008d) ) return 0.137856572032017d;
		if ( z<(-1.08500000000008d) ) return 0.138960827633893d;
		if ( z<(-1.08000000000008d) ) return 0.140071090088751d;
		if ( z<(-1.07500000000008d) ) return 0.14118736416511d;
		if ( z<(-1.07000000000008d) ) return 0.14230965435592d;
		if ( z<(-1.06500000000008d) ) return 0.143437964876732d;
		if ( z<(-1.06000000000008d) ) return 0.144572299663891d;
		if ( z<(-1.05500000000008d) ) return 0.145712662372745d;
		if ( z<(-1.05000000000008d) ) return 0.146859056375876d;
		if ( z<(-1.04500000000008d) ) return 0.148011484761347d;
		if ( z<(-1.04000000000008d) ) return 0.149169950330962d;
		if ( z<(-1.03500000000008d) ) return 0.150334455598562d;
		if ( z<(-1.03000000000008d) ) return 0.151505002788324d;
		if ( z<(-1.02500000000008d) ) return 0.15268159383309d;
		if ( z<(-1.02000000000008d) ) return 0.153864230372715d;
		if ( z<(-1.01500000000008d) ) return 0.155052913752429d;
		if ( z<(-1.01000000000009d) ) return 0.156247645021234d;
		if ( z<(-1.00500000000009d) ) return 0.157448424930307d;
		if ( z<(-1.00000000000009d) ) return 0.158655253931436d;
		if ( z<(-0.995000000000085d) ) return 0.159868132175473d;
		if ( z<(-0.990000000000085d) ) return 0.16108705951081d;
		if ( z<(-0.985000000000085d) ) return 0.162312035481878d;
		if ( z<(-0.980000000000085d) ) return 0.163543059327671d;
		if ( z<(-0.975000000000085d) ) return 0.164780129980289d;
		if ( z<(-0.970000000000085d) ) return 0.166023246063508d;
		if ( z<(-0.965000000000085d) ) return 0.167272405891374d;
		if ( z<(-0.960000000000085d) ) return 0.168527607466816d;
		if ( z<(-0.955000000000085d) ) return 0.169788848480295d;
		if ( z<(-0.950000000000085d) ) return 0.17105612630846d;
		if ( z<(-0.945000000000085d) ) return 0.17232943801285d;
		if ( z<(-0.940000000000085d) ) return 0.173608780338603d;
		if ( z<(-0.935000000000085d) ) return 0.1748941497132d;
		if ( z<(-0.930000000000085d) ) return 0.176185542245236d;
		if ( z<(-0.925000000000085d) ) return 0.17748295372321d;
		if ( z<(-0.920000000000085d) ) return 0.178786379614349d;
		if ( z<(-0.915000000000085d) ) return 0.180095815063455d;
		if ( z<(-0.910000000000085d) ) return 0.181411254891775d;
		if ( z<(-0.905000000000085d) ) return 0.182732693595909d;
		if ( z<(-0.900000000000085d) ) return 0.184060125346737d;
		if ( z<(-0.895000000000085d) ) return 0.185393543988372d;
		if ( z<(-0.890000000000085d) ) return 0.18673294303715d;
		if ( z<(-0.885000000000085d) ) return 0.18807831568064d;
		if ( z<(-0.880000000000085d) ) return 0.189429654776689d;
		if ( z<(-0.875000000000085d) ) return 0.190786952852487d;
		if ( z<(-0.870000000000085d) ) return 0.192150202103673d;
		if ( z<(-0.865000000000085d) ) return 0.193519394393457d;
		if ( z<(-0.860000000000085d) ) return 0.194894521251785d;
		if ( z<(-0.855000000000085d) ) return 0.196275573874521d;
		if ( z<(-0.850000000000085d) ) return 0.197662543122669d;
		if ( z<(-0.845000000000085d) ) return 0.199055419521619d;
		if ( z<(-0.840000000000085d) ) return 0.200454193260426d;
		if ( z<(-0.835000000000085d) ) return 0.20185885419112d;
		if ( z<(-0.830000000000085d) ) return 0.203269391828044d;
		if ( z<(-0.825000000000085d) ) return 0.204685795347229d;
		if ( z<(-0.820000000000085d) ) return 0.206108053585789d;
		if ( z<(-0.815000000000085d) ) return 0.207536155041363d;
		if ( z<(-0.810000000000085d) ) return 0.208970087871577d;
		if ( z<(-0.805000000000085d) ) return 0.210409839893539d;
		if ( z<(-0.800000000000085d) ) return 0.211855398583372d;
		if ( z<(-0.795000000000085d) ) return 0.213306751075774d;
		if ( z<(-0.790000000000085d) ) return 0.214763884163612d;
		if ( z<(-0.785000000000085d) ) return 0.216226784297551d;
		if ( z<(-0.780000000000085d) ) return 0.217695437585708d;
		if ( z<(-0.775000000000085d) ) return 0.219169829793352d;
		if ( z<(-0.770000000000085d) ) return 0.220649946342624d;
		if ( z<(-0.765000000000085d) ) return 0.222135772312299d;
		if ( z<(-0.760000000000085d) ) return 0.223627292437574d;
		if ( z<(-0.755000000000085d) ) return 0.225124491109901d;
		if ( z<(-0.750000000000085d) ) return 0.226627352376843d;
		if ( z<(-0.745000000000085d) ) return 0.228135859941964d;
		if ( z<(-0.740000000000085d) ) return 0.229649997164765d;
		if ( z<(-0.735000000000085d) ) return 0.231169747060639d;
		if ( z<(-0.730000000000085d) ) return 0.232695092300871d;
		if ( z<(-0.725000000000085d) ) return 0.234226015212669d;
		if ( z<(-0.720000000000085d) ) return 0.235762497779225d;
		if ( z<(-0.715000000000085d) ) return 0.237304521639821d;
		if ( z<(-0.710000000000085d) ) return 0.23885206808996d;
		if ( z<(-0.705000000000085d) ) return 0.240405118081538d;
		if ( z<(-0.700000000000085d) ) return 0.241963652223046d;
		if ( z<(-0.695000000000085d) ) return 0.243527650779814d;
		if ( z<(-0.690000000000085d) ) return 0.245097093674283d;
		if ( z<(-0.685000000000085d) ) return 0.246671960486315d;
		if ( z<(-0.680000000000085d) ) return 0.248252230453544d;
		if ( z<(-0.675000000000085d) ) return 0.24983788247175d;
		if ( z<(-0.670000000000085d) ) return 0.251428895095283d;
		if ( z<(-0.665000000000085d) ) return 0.253025246537511d;
		if ( z<(-0.660000000000085d) ) return 0.254626914671309d;
		if ( z<(-0.655000000000085d) ) return 0.256233877029585d;
		if ( z<(-0.650000000000085d) ) return 0.257846110805837d;
		if ( z<(-0.645000000000085d) ) return 0.259463592854752d;
		if ( z<(-0.640000000000085d) ) return 0.261086299692834d;
		if ( z<(-0.635000000000085d) ) return 0.262714207499073d;
		if ( z<(-0.630000000000085d) ) return 0.26434729211565d;
		if ( z<(-0.625000000000085d) ) return 0.265985529048673d;
		if ( z<(-0.620000000000085d) ) return 0.267628893468955d;
		if ( z<(-0.615000000000085d) ) return 0.269277360212826d;
		if ( z<(-0.610000000000085d) ) return 0.270930903782978d;
		if ( z<(-0.605000000000085d) ) return 0.272589498349349d;
		if ( z<(-0.600000000000085d) ) return 0.274253117750045d;
		if ( z<(-0.595000000000085d) ) return 0.275921735492294d;
		if ( z<(-0.590000000000085d) ) return 0.277595324753437d;
		if ( z<(-0.585000000000085d) ) return 0.279273858381955d;
		if ( z<(-0.580000000000085d) ) return 0.280957308898536d;
		if ( z<(-0.575000000000085d) ) return 0.282645648497172d;
		if ( z<(-0.570000000000085d) ) return 0.284338849046295d;
		if ( z<(-0.565000000000085d) ) return 0.28603688208995d;
		if ( z<(-0.560000000000085d) ) return 0.287739718848998d;
		if ( z<(-0.555000000000085d) ) return 0.289447330222365d;
		if ( z<(-0.550000000000085d) ) return 0.291159686788317d;
		if ( z<(-0.545000000000085d) ) return 0.292876758805776d;
		if ( z<(-0.540000000000085d) ) return 0.294598516215669d;
		if ( z<(-0.535000000000085d) ) return 0.296324928642315d;
		if ( z<(-0.530000000000085d) ) return 0.298055965394847d;
		if ( z<(-0.525000000000085d) ) return 0.299791595468666d;
		if ( z<(-0.520000000000085d) ) return 0.301531787546937d;
		if ( z<(-0.515000000000085d) ) return 0.30327651000211d;
		if ( z<(-0.510000000000085d) ) return 0.30502573089749d;
		if ( z<(-0.505000000000085d) ) return 0.306779417988828d;
		if ( z<(-0.500000000000085d) ) return 0.308537538725957d;
		if ( z<(-0.495000000000085d) ) return 0.310300060254458d;
		if ( z<(-0.490000000000085d) ) return 0.312066949417361d;
		if ( z<(-0.485000000000085d) ) return 0.313838172756881d;
		if ( z<(-0.480000000000085d) ) return 0.315613696516192d;
		if ( z<(-0.475000000000085d) ) return 0.317393486641229d;
		if ( z<(-0.470000000000085d) ) return 0.319177508782525d;
		if ( z<(-0.465000000000085d) ) return 0.320965728297092d;
		if ( z<(-0.460000000000085d) ) return 0.322758110250317d;
		if ( z<(-0.455000000000085d) ) return 0.324554619417914d;
		if ( z<(-0.450000000000085d) ) return 0.326355220287889d;
		if ( z<(-0.445000000000085d) ) return 0.328159877062554d;
		if ( z<(-0.440000000000085d) ) return 0.329968553660563d;
		if ( z<(-0.435000000000085d) ) return 0.331781213718988d;
		if ( z<(-0.430000000000085d) ) return 0.333597820595427d;
		if ( z<(-0.425000000000085d) ) return 0.335418337370139d;
		if ( z<(-0.420000000000085d) ) return 0.337242726848219d;
		if ( z<(-0.415000000000085d) ) return 0.3390709515618d;
		if ( z<(-0.410000000000085d) ) return 0.340902973772292d;
		if ( z<(-0.405000000000085d) ) return 0.342738755472643d;
		if ( z<(-0.400000000000085d) ) return 0.344578258389645d;
		if ( z<(-0.395000000000085d) ) return 0.346421443986261d;
		if ( z<(-0.390000000000085d) ) return 0.348268273463986d;
		if ( z<(-0.385000000000085d) ) return 0.350118707765244d;
		if ( z<(-0.380000000000085d) ) return 0.351972707575806d;
		if ( z<(-0.375000000000085d) ) return 0.353830233327245d;
		if ( z<(-0.370000000000085d) ) return 0.355691245199422d;
		if ( z<(-0.365000000000085d) ) return 0.357555703122998d;
		if ( z<(-0.360000000000085d) ) return 0.359423566781977d;
		if ( z<(-0.355000000000085d) ) return 0.361294795616281d;
		if ( z<(-0.350000000000085d) ) return 0.363169348824349d;
		if ( z<(-0.345000000000085d) ) return 0.36504718536577d;
		if ( z<(-0.340000000000085d) ) return 0.36692826396394d;
		if ( z<(-0.335000000000085d) ) return 0.368812543108753d;
		if ( z<(-0.330000000000085d) ) return 0.370699981059315d;
		if ( z<(-0.325000000000085d) ) return 0.372590535846684d;
		if ( z<(-0.320000000000085d) ) return 0.374484165276648d;
		if ( z<(-0.315000000000085d) ) return 0.376380826932517d;
		if ( z<(-0.310000000000085d) ) return 0.378280478177949d;
		if ( z<(-0.305000000000085d) ) return 0.380183076159803d;
		if ( z<(-0.300000000000085d) ) return 0.382088577811015d;
		if ( z<(-0.295000000000085d) ) return 0.383996939853502d;
		if ( z<(-0.290000000000085d) ) return 0.38590811880109d;
		if ( z<(-0.285000000000085d) ) return 0.387822070962469d;
		if ( z<(-0.280000000000085d) ) return 0.38973875244417d;
		if ( z<(-0.275000000000085d) ) return 0.391658119153573d;
		if ( z<(-0.270000000000085d) ) return 0.393580126801928d;
		if ( z<(-0.265000000000085d) ) return 0.395504730907413d;
		if ( z<(-0.260000000000085d) ) return 0.397431886798207d;
		if ( z<(-0.255000000000085d) ) return 0.399361549615585d;
		if ( z<(-0.250000000000085d) ) return 0.401293674317044d;
		if ( z<(-0.245000000000085d) ) return 0.403228215679443d;
		if ( z<(-0.240000000000085d) ) return 0.405165128302171d;
		if ( z<(-0.235000000000085d) ) return 0.407104366610334d;
		if ( z<(-0.230000000000085d) ) return 0.409045884857961d;
		if ( z<(-0.225000000000085d) ) return 0.410989637131237d;
		if ( z<(-0.220000000000085d) ) return 0.412935577351752d;
		if ( z<(-0.215000000000085d) ) return 0.414883659279771d;
		if ( z<(-0.210000000000085d) ) return 0.416833836517525d;
		if ( z<(-0.205000000000085d) ) return 0.418786062512519d;
		if ( z<(-0.200000000000085d) ) return 0.420740290560864d;
		if ( z<(-0.195000000000085d) ) return 0.422696473810622d;
		if ( z<(-0.190000000000085d) ) return 0.424654565265171d;
		if ( z<(-0.185000000000085d) ) return 0.426614517786592d;
		if ( z<(-0.180000000000085d) ) return 0.428576284099066d;
		if ( z<(-0.175000000000085d) ) return 0.430539816792293d;
		if ( z<(-0.170000000000085d) ) return 0.432505068324928d;
		if ( z<(-0.165000000000085d) ) return 0.434471991028032d;
		if ( z<(-0.160000000000085d) ) return 0.436440537108534d;
		if ( z<(-0.155000000000085d) ) return 0.43841065865272d;
		if ( z<(-0.150000000000085d) ) return 0.440382307629724d;
		if ( z<(-0.145000000000085d) ) return 0.442355435895043d;
		if ( z<(-0.140000000000085d) ) return 0.44432999519406d;
		if ( z<(-0.135000000000084d) ) return 0.446305937165585d;
		if ( z<(-0.130000000000084d) ) return 0.448283213345405d;
		if ( z<(-0.125000000000084d) ) return 0.450261775169854d;
		if ( z<(-0.120000000000084d) ) return 0.452241573979383d;
		if ( z<(-0.115000000000084d) ) return 0.454222561022156d;
		if ( z<(-0.110000000000084d) ) return 0.45620468745765d;
		if ( z<(-0.105000000000084d) ) return 0.458187904360262d;
		if ( z<(-0.100000000000084d) ) return 0.460172162722937d;
		if ( z<(-0.0950000000000845d) ) return 0.4621574134608d;
		if ( z<(-0.0900000000000845d) ) return 0.464143607414794d;
		if ( z<(-0.0850000000000845d) ) return 0.466130695355337d;
		if ( z<(-0.0800000000000844d) ) return 0.468118627985979d;
		if ( z<(-0.0750000000000844d) ) return 0.470107355947072d;
		if ( z<(-0.0700000000000844d) ) return 0.472096829819445d;
		if ( z<(-0.0650000000000844d) ) return 0.474087000128093d;
		if ( z<(-0.0600000000000844d) ) return 0.47607781734586d;
		if ( z<(-0.0550000000000844d) ) return 0.478069231897143d;
		if ( z<(-0.0500000000000844d) ) return 0.480061194161594d;
		if ( z<(-0.0450000000000844d) ) return 0.482053654477827d;
		if ( z<(-0.0400000000000844d) ) return 0.484046563147136d;
		if ( z<(-0.0350000000000844d) ) return 0.486039870437208d;
		if ( z<(-0.0300000000000844d) ) return 0.488033526585854d;
		if ( z<(-0.0250000000000844d) ) return 0.490027481804728d;
		if ( z<(-0.0200000000000844d) ) return 0.492021686283064d;
		if ( z<(-0.0150000000000844d) ) return 0.494016090191404d;
		if ( z<(-0.0100000000000844d) ) return 0.496010643685335d;
		if ( z<(-0.00500000000008444d) ) return 0.498005296909225d;
		if ( z<(-8.4444604087075E-14d) ) return 0.499999999999966d;
		if ( z<(0.0025d) ) return 0.5;
		if ( z<(0.00499999999991556d) ) return 0.501994703090707d;
		if ( z<(0.00999999999991556d) ) return 0.503989356314598d;
		if ( z<(0.0149999999999156d) ) return 0.505983909808529d;
		if ( z<(0.0199999999999156d) ) return 0.507978313716868d;
		if ( z<(0.0249999999999156d) ) return 0.509972518195204d;
		if ( z<(0.0299999999999156d) ) return 0.511966473414079d;
		if ( z<(0.0349999999999156d) ) return 0.513960129562725d;
		if ( z<(0.0399999999999156d) ) return 0.515953436852797d;
		if ( z<(0.0449999999999156d) ) return 0.517946345522105d;
		if ( z<(0.0499999999999155d) ) return 0.519938805838339d;
		if ( z<(0.0549999999999155d) ) return 0.52193076810279d;
		if ( z<(0.0599999999999155d) ) return 0.523922182654073d;
		if ( z<(0.0649999999999155d) ) return 0.52591299987184d;
		if ( z<(0.0699999999999155d) ) return 0.527903170180487d;
		if ( z<(0.0749999999999156d) ) return 0.529892644052861d;
		if ( z<(0.0799999999999156d) ) return 0.531881372013954d;
		if ( z<(0.0849999999999156d) ) return 0.533869304644596d;
		if ( z<(0.0899999999999156d) ) return 0.535856392585139d;
		if ( z<(0.0949999999999156d) ) return 0.537842586539133d;
		if ( z<(0.0999999999999156d) ) return 0.539827837276995d;
		if ( z<(0.104999999999916d) ) return 0.541812095639671d;
		if ( z<(0.109999999999916d) ) return 0.543795312542283d;
		if ( z<(0.114999999999916d) ) return 0.545777438977777d;
		if ( z<(0.119999999999916d) ) return 0.54775842602055d;
		if ( z<(0.124999999999916d) ) return 0.54973822483008d;
		if ( z<(0.129999999999916d) ) return 0.551716786654528d;
		if ( z<(0.134999999999916d) ) return 0.553694062834348d;
		if ( z<(0.139999999999916d) ) return 0.555670004805873d;
		if ( z<(0.144999999999916d) ) return 0.55764456410489d;
		if ( z<(0.149999999999916d) ) return 0.559617692370209d;
		if ( z<(0.154999999999916d) ) return 0.561589341347214d;
		if ( z<(0.159999999999916d) ) return 0.5635594628914d;
		if ( z<(0.164999999999916d) ) return 0.565528008971902d;
		if ( z<(0.169999999999916d) ) return 0.567494931675005d;
		if ( z<(0.174999999999916d) ) return 0.569460183207641d;
		if ( z<(0.179999999999916d) ) return 0.571423715900868d;
		if ( z<(0.184999999999916d) ) return 0.573385482213341d;
		if ( z<(0.189999999999916d) ) return 0.575345434734762d;
		if ( z<(0.194999999999916d) ) return 0.577303526189312d;
		if ( z<(0.199999999999916d) ) return 0.57925970943907d;
		if ( z<(0.204999999999916d) ) return 0.581213937487415d;
		if ( z<(0.209999999999916d) ) return 0.583166163482409d;
		if ( z<(0.214999999999916d) ) return 0.585116340720163d;
		if ( z<(0.219999999999916d) ) return 0.587064422648182d;
		if ( z<(0.224999999999916d) ) return 0.589010362868697d;
		if ( z<(0.229999999999916d) ) return 0.590954115141973d;
		if ( z<(0.234999999999916d) ) return 0.5928956333896d;
		if ( z<(0.239999999999916d) ) return 0.594834871697763d;
		if ( z<(0.244999999999916d) ) return 0.596771784320492d;
		if ( z<(0.249999999999916d) ) return 0.598706325682891d;
		if ( z<(0.254999999999916d) ) return 0.60063845038435d;
		if ( z<(0.259999999999916d) ) return 0.602568113201728d;
		if ( z<(0.264999999999916d) ) return 0.604495269092521d;
		if ( z<(0.269999999999916d) ) return 0.606419873198007d;
		if ( z<(0.274999999999916d) ) return 0.608341880846362d;
		if ( z<(0.279999999999916d) ) return 0.610261247555765d;
		if ( z<(0.284999999999916d) ) return 0.612177929037466d;
		if ( z<(0.289999999999916d) ) return 0.614091881198845d;
		if ( z<(0.294999999999916d) ) return 0.616003060146433d;
		if ( z<(0.299999999999916d) ) return 0.61791142218892d;
		if ( z<(0.304999999999916d) ) return 0.619816923840133d;
		if ( z<(0.309999999999916d) ) return 0.621719521821987d;
		if ( z<(0.314999999999916d) ) return 0.623619173067419d;
		if ( z<(0.319999999999916d) ) return 0.625515834723288d;
		if ( z<(0.324999999999916d) ) return 0.627409464153252d;
		if ( z<(0.329999999999916d) ) return 0.629300018940622d;
		if ( z<(0.334999999999916d) ) return 0.631187456891183d;
		if ( z<(0.339999999999916d) ) return 0.633071736035996d;
		if ( z<(0.344999999999916d) ) return 0.634952814634167d;
		if ( z<(0.349999999999916d) ) return 0.636830651175587d;
		if ( z<(0.354999999999916d) ) return 0.638705204383656d;
		if ( z<(0.359999999999916d) ) return 0.64057643321796d;
		if ( z<(0.364999999999916d) ) return 0.642444296876939d;
		if ( z<(0.369999999999916d) ) return 0.644308754800515d;
		if ( z<(0.374999999999916d) ) return 0.646169766672692d;
		if ( z<(0.379999999999916d) ) return 0.648027292424131d;
		if ( z<(0.384999999999916d) ) return 0.649881292234693d;
		if ( z<(0.389999999999916d) ) return 0.651731726535951d;
		if ( z<(0.394999999999916d) ) return 0.653578556013677d;
		if ( z<(0.399999999999916d) ) return 0.655421741610293d;
		if ( z<(0.404999999999916d) ) return 0.657261244527295d;
		if ( z<(0.409999999999916d) ) return 0.659097026227647d;
		if ( z<(0.414999999999916d) ) return 0.660929048438138d;
		if ( z<(0.419999999999916d) ) return 0.66275727315172d;
		if ( z<(0.424999999999916d) ) return 0.6645816626298d;
		if ( z<(0.429999999999916d) ) return 0.666402179404512d;
		if ( z<(0.434999999999916d) ) return 0.66821878628095d;
		if ( z<(0.439999999999916d) ) return 0.670031446339376d;
		if ( z<(0.444999999999916d) ) return 0.671840122937385d;
		if ( z<(0.449999999999916d) ) return 0.67364477971205d;
		if ( z<(0.454999999999916d) ) return 0.675445380582025d;
		if ( z<(0.459999999999916d) ) return 0.677241889749622d;
		if ( z<(0.464999999999916d) ) return 0.679034271702848d;
		if ( z<(0.469999999999916d) ) return 0.680822491217414d;
		if ( z<(0.474999999999916d) ) return 0.682606513358711d;
		if ( z<(0.479999999999916d) ) return 0.684386303483747d;
		if ( z<(0.484999999999916d) ) return 0.686161827243059d;
		if ( z<(0.489999999999916d) ) return 0.68793305058258d;
		if ( z<(0.494999999999916d) ) return 0.689699939745482d;
		if ( z<(0.499999999999916d) ) return 0.691462461273983d;
		if ( z<(0.504999999999916d) ) return 0.693220582011113d;
		if ( z<(0.509999999999916d) ) return 0.694974269102451d;
		if ( z<(0.514999999999916d) ) return 0.696723489997831d;
		if ( z<(0.519999999999916d) ) return 0.698468212453004d;
		if ( z<(0.524999999999916d) ) return 0.700208404531275d;
		if ( z<(0.529999999999916d) ) return 0.701944034605094d;
		if ( z<(0.534999999999916d) ) return 0.703675071357627d;
		if ( z<(0.539999999999916d) ) return 0.705401483784273d;
		if ( z<(0.544999999999916d) ) return 0.707123241194166d;
		if ( z<(0.549999999999916d) ) return 0.708840313211625d;
		if ( z<(0.554999999999916d) ) return 0.710552669777577d;
		if ( z<(0.559999999999916d) ) return 0.712260281150944d;
		if ( z<(0.564999999999916d) ) return 0.713963117909993d;
		if ( z<(0.569999999999916d) ) return 0.715661150953647d;
		if ( z<(0.574999999999916d) ) return 0.717354351502771d;
		if ( z<(0.579999999999916d) ) return 0.719042691101407d;
		if ( z<(0.584999999999916d) ) return 0.720726141617989d;
		if ( z<(0.589999999999916d) ) return 0.722404675246507d;
		if ( z<(0.594999999999916d) ) return 0.724078264507649d;
		if ( z<(0.599999999999916d) ) return 0.725746882249898d;
		if ( z<(0.604999999999916d) ) return 0.727410501650595d;
		if ( z<(0.609999999999916d) ) return 0.729069096216966d;
		if ( z<(0.614999999999916d) ) return 0.730722639787118d;
		if ( z<(0.619999999999916d) ) return 0.732371106530989d;
		if ( z<(0.624999999999916d) ) return 0.734014470951272d;
		if ( z<(0.629999999999916d) ) return 0.735652707884295d;
		if ( z<(0.634999999999916d) ) return 0.737285792500872d;
		if ( z<(0.639999999999916d) ) return 0.738913700307111d;
		if ( z<(0.644999999999916d) ) return 0.740536407145193d;
		if ( z<(0.649999999999916d) ) return 0.742153889194108d;
		if ( z<(0.654999999999916d) ) return 0.743766122970361d;
		if ( z<(0.659999999999916d) ) return 0.745373085328637d;
		if ( z<(0.664999999999916d) ) return 0.746974753462435d;
		if ( z<(0.669999999999916d) ) return 0.748571104904663d;
		if ( z<(0.674999999999916d) ) return 0.750162117528196d;
		if ( z<(0.679999999999916d) ) return 0.751747769546403d;
		if ( z<(0.684999999999916d) ) return 0.753328039513632d;
		if ( z<(0.689999999999916d) ) return 0.754902906325664d;
		if ( z<(0.694999999999916d) ) return 0.756472349220133d;
		if ( z<(0.699999999999916d) ) return 0.758036347776901d;
		if ( z<(0.704999999999916d) ) return 0.759594881918409d;
		if ( z<(0.709999999999916d) ) return 0.761147931909987d;
		if ( z<(0.714999999999916d) ) return 0.762695478360127d;
		if ( z<(0.719999999999916d) ) return 0.764237502220723d;
		if ( z<(0.724999999999916d) ) return 0.765773984787279d;
		if ( z<(0.729999999999916d) ) return 0.767304907699077d;
		if ( z<(0.734999999999916d) ) return 0.768830252939309d;
		if ( z<(0.739999999999916d) ) return 0.770350002835184d;
		if ( z<(0.744999999999916d) ) return 0.771864140057985d;
		if ( z<(0.749999999999916d) ) return 0.773372647623106d;
		if ( z<(0.754999999999916d) ) return 0.774875508890048d;
		if ( z<(0.759999999999916d) ) return 0.776372707562375d;
		if ( z<(0.764999999999916d) ) return 0.777864227687651d;
		if ( z<(0.769999999999916d) ) return 0.779350053657325d;
		if ( z<(0.774999999999916d) ) return 0.780830170206598d;
		if ( z<(0.779999999999916d) ) return 0.782304562414242d;
		if ( z<(0.784999999999916d) ) return 0.7837732157024d;
		if ( z<(0.789999999999916d) ) return 0.785236115836338d;
		if ( z<(0.794999999999916d) ) return 0.786693248924177d;
		if ( z<(0.799999999999916d) ) return 0.788144601416579d;
		if ( z<(0.804999999999916d) ) return 0.789590160106412d;
		if ( z<(0.809999999999916d) ) return 0.791029912128374d;
		if ( z<(0.814999999999916d) ) return 0.792463844958588d;
		if ( z<(0.819999999999916d) ) return 0.793891946414163d;
		if ( z<(0.824999999999916d) ) return 0.795314204652724d;
		if ( z<(0.829999999999916d) ) return 0.796730608171908d;
		if ( z<(0.834999999999916d) ) return 0.798141145808833d;
		if ( z<(0.839999999999916d) ) return 0.799545806739527d;
		if ( z<(0.844999999999916d) ) return 0.800944580478334d;
		if ( z<(0.849999999999916d) ) return 0.802337456877284d;
		if ( z<(0.854999999999916d) ) return 0.803724426125432d;
		if ( z<(0.859999999999916d) ) return 0.805105478748169d;
		if ( z<(0.864999999999916d) ) return 0.806480605606496d;
		if ( z<(0.869999999999916d) ) return 0.807849797896281d;
		if ( z<(0.874999999999916d) ) return 0.809213047147467d;
		if ( z<(0.879999999999916d) ) return 0.810570345223265d;
		if ( z<(0.884999999999916d) ) return 0.811921684319314d;
		if ( z<(0.889999999999916d) ) return 0.813267056962805d;
		if ( z<(0.894999999999916d) ) return 0.814606456011583d;
		if ( z<(0.899999999999916d) ) return 0.815939874653218d;
		if ( z<(0.904999999999916d) ) return 0.817267306404046d;
		if ( z<(0.909999999999916d) ) return 0.818588745108181d;
		if ( z<(0.914999999999916d) ) return 0.819904184936501d;
		if ( z<(0.919999999999916d) ) return 0.821213620385606d;
		if ( z<(0.924999999999916d) ) return 0.822517046276746d;
		if ( z<(0.929999999999916d) ) return 0.82381445775472d;
		if ( z<(0.934999999999916d) ) return 0.825105850286756d;
		if ( z<(0.939999999999916d) ) return 0.826391219661354d;
		if ( z<(0.944999999999916d) ) return 0.827670561987107d;
		if ( z<(0.949999999999916d) ) return 0.828943873691497d;
		if ( z<(0.954999999999916d) ) return 0.830211151519663d;
		if ( z<(0.959999999999916d) ) return 0.831472392533141d;
		if ( z<(0.964999999999916d) ) return 0.832727594108584d;
		if ( z<(0.969999999999916d) ) return 0.83397675393645d;
		if ( z<(0.974999999999916d) ) return 0.835219870019669d;
		if ( z<(0.979999999999916d) ) return 0.836456940672287d;
		if ( z<(0.984999999999916d) ) return 0.83768796451808d;
		if ( z<(0.989999999999916d) ) return 0.838912940489148d;
		if ( z<(0.994999999999916d) ) return 0.840131867824486d;
		if ( z<(0.999999999999916d) ) return 0.841344746068523d;
		if ( z<(1.00499999999992d) ) return 0.842551575069652d;
		if ( z<(1.00999999999992d) ) return 0.843752354978725d;
		if ( z<(1.01499999999992d) ) return 0.84494708624753d;
		if ( z<(1.01999999999992d) ) return 0.846135769627245d;
		if ( z<(1.02499999999992d) ) return 0.84731840616687d;
		if ( z<(1.02999999999992d) ) return 0.848494997211636d;
		if ( z<(1.03499999999992d) ) return 0.849665544401399d;
		if ( z<(1.03999999999992d) ) return 0.850830049668999d;
		if ( z<(1.04499999999992d) ) return 0.851988515238614d;
		if ( z<(1.04999999999992d) ) return 0.853140943624085d;
		if ( z<(1.05499999999992d) ) return 0.854287337627216d;
		if ( z<(1.05999999999992d) ) return 0.855427700336071d;
		if ( z<(1.06499999999991d) ) return 0.85656203512323d;
		if ( z<(1.06999999999991d) ) return 0.857690345644042d;
		if ( z<(1.07499999999991d) ) return 0.858812635834852d;
		if ( z<(1.07999999999991d) ) return 0.859928909911212d;
		if ( z<(1.08499999999991d) ) return 0.86103917236607d;
		if ( z<(1.08999999999991d) ) return 0.862143427967946d;
		if ( z<(1.09499999999991d) ) return 0.863241681759085d;
		if ( z<(1.09999999999991d) ) return 0.864333939053599d;
		if ( z<(1.10499999999991d) ) return 0.865420205435585d;
		if ( z<(1.10999999999991d) ) return 0.866500486757234d;
		if ( z<(1.11499999999991d) ) return 0.867574789136915d;
		if ( z<(1.11999999999991d) ) return 0.868643118957251d;
		if ( z<(1.12499999999991d) ) return 0.869705482863173d;
		if ( z<(1.12999999999991d) ) return 0.870761887759964d;
		if ( z<(1.13499999999991d) ) return 0.871812340811285d;
		if ( z<(1.13999999999991d) ) return 0.872856849437184d;
		if ( z<(1.14499999999991d) ) return 0.873895421312098d;
		if ( z<(1.14999999999991d) ) return 0.874928064362832d;
		if ( z<(1.15499999999991d) ) return 0.875954786766532d;
		if ( z<(1.15999999999991d) ) return 0.876975596948639d;
		if ( z<(1.16499999999991d) ) return 0.877990503580833d;
		if ( z<(1.16999999999991d) ) return 0.878999515578964d;
		if ( z<(1.17499999999991d) ) return 0.88000264210097d;
		if ( z<(1.17999999999991d) ) return 0.880999892544782d;
		if ( z<(1.18499999999991d) ) return 0.88199127654622d;
		if ( z<(1.18999999999991d) ) return 0.882976803976874d;
		if ( z<(1.19499999999991d) ) return 0.883956484941979d;
		if ( z<(1.19999999999991d) ) return 0.884930329778275d;
		if ( z<(1.20499999999991d) ) return 0.885898349051853d;
		if ( z<(1.20999999999991d) ) return 0.886860553556006d;
		if ( z<(1.21499999999991d) ) return 0.887816954309049d;
		if ( z<(1.21999999999991d) ) return 0.888767562552149d;
		if ( z<(1.22499999999991d) ) return 0.889712389747132d;
		if ( z<(1.22999999999991d) ) return 0.890651447574291d;
		if ( z<(1.23499999999991d) ) return 0.891584747930179d;
		if ( z<(1.23999999999991d) ) return 0.892512302925397d;
		if ( z<(1.24499999999991d) ) return 0.893434124882371d;
		if ( z<(1.24999999999991d) ) return 0.894350226333128d;
		if ( z<(1.25499999999991d) ) return 0.895260620017061d;
		if ( z<(1.25999999999991d) ) return 0.896165318878683d;
		if ( z<(1.26499999999991d) ) return 0.897064336065382d;
		if ( z<(1.26999999999991d) ) return 0.897957684925165d;
		if ( z<(1.27499999999991d) ) return 0.898845379004398d;
		if ( z<(1.27999999999991d) ) return 0.899727432045542d;
		if ( z<(1.28499999999991d) ) return 0.900603857984879d;
		if ( z<(1.28999999999991d) ) return 0.901474670950237d;
		if ( z<(1.29499999999991d) ) return 0.90233988525871d;
		if ( z<(1.29999999999991d) ) return 0.903199515414374d;
		if ( z<(1.30499999999991d) ) return 0.904053576105997d;
		if ( z<(1.30999999999991d) ) return 0.904902082204746d;
		if ( z<(1.31499999999991d) ) return 0.905745048761892d;
		if ( z<(1.31999999999991d) ) return 0.906582491006513d;
		if ( z<(1.32499999999991d) ) return 0.90741442434319d;
		if ( z<(1.32999999999991d) ) return 0.908240864349704d;
		if ( z<(1.33499999999991d) ) return 0.909061826774731d;
		if ( z<(1.33999999999991d) ) return 0.909877327535533d;
		if ( z<(1.34499999999991d) ) return 0.910687382715648d;
		if ( z<(1.34999999999991d) ) return 0.911492008562583d;
		if ( z<(1.35499999999991d) ) return 0.912291221485499d;
		if ( z<(1.35999999999991d) ) return 0.913085038052901d;
		if ( z<(1.36499999999991d) ) return 0.913873474990322d;
		if ( z<(1.36999999999991d) ) return 0.914656549178019d;
		if ( z<(1.37499999999991d) ) return 0.91543427764865d;
		if ( z<(1.37999999999991d) ) return 0.916206677584972d;
		if ( z<(1.38499999999991d) ) return 0.916973766317523d;
		if ( z<(1.38999999999991d) ) return 0.917735561322317d;
		if ( z<(1.39499999999991d) ) return 0.918492080218535d;
		if ( z<(1.39999999999991d) ) return 0.919243340766215d;
		if ( z<(1.40499999999991d) ) return 0.919989360863953d;
		if ( z<(1.40999999999991d) ) return 0.920730158546594d;
		if ( z<(1.41499999999991d) ) return 0.921465751982938d;
		if ( z<(1.41999999999991d) ) return 0.92219615947344d;
		if ( z<(1.42499999999991d) ) return 0.922921399447915d;
		if ( z<(1.42999999999991d) ) return 0.923641490463248d;
		if ( z<(1.43499999999991d) ) return 0.924356451201107d;
		if ( z<(1.43999999999991d) ) return 0.92506630046566d;
		if ( z<(1.44499999999991d) ) return 0.925771057181293d;
		if ( z<(1.44999999999991d) ) return 0.926470740390338d;
		if ( z<(1.45499999999991d) ) return 0.927165369250801d;
		if ( z<(1.45999999999991d) ) return 0.927854963034093d;
		if ( z<(1.46499999999991d) ) return 0.928539541122776d;
		if ( z<(1.46999999999991d) ) return 0.929219123008302d;
		if ( z<(1.47499999999991d) ) return 0.929893728288764d;
		if ( z<(1.47999999999991d) ) return 0.930563376666656d;
		if ( z<(1.48499999999991d) ) return 0.931228087946628d;
		if ( z<(1.48999999999991d) ) return 0.931887882033262d;
		if ( z<(1.49499999999991d) ) return 0.93254277892884d;
		if ( z<(1.49999999999991d) ) return 0.93319279873113d;
		if ( z<(1.50499999999991d) ) return 0.933837961631171d;
		if ( z<(1.50999999999991d) ) return 0.934478287911071d;
		if ( z<(1.51499999999991d) ) return 0.935113797941812d;
		if ( z<(1.51999999999991d) ) return 0.935744512181052d;
		if ( z<(1.52499999999991d) ) return 0.936370451170955d;
		if ( z<(1.5299999999999d) ) return 0.93699163553601d;
		if ( z<(1.5349999999999d) ) return 0.937608085980865d;
		if ( z<(1.5399999999999d) ) return 0.938219823288176d;
		if ( z<(1.5449999999999d) ) return 0.938826868316455d;
		if ( z<(1.5499999999999d) ) return 0.93942924199793d;
		if ( z<(1.5549999999999d) ) return 0.940026965336416d;
		if ( z<(1.5599999999999d) ) return 0.940620059405196d;
		if ( z<(1.5649999999999d) ) return 0.941208545344906d;
		if ( z<(1.5699999999999d) ) return 0.941792444361436d;
		if ( z<(1.5749999999999d) ) return 0.942371777723836d;
		if ( z<(1.5799999999999d) ) return 0.942946566762235d;
		if ( z<(1.5849999999999d) ) return 0.943516832865769d;
		if ( z<(1.5899999999999d) ) return 0.94408259748052d;
		if ( z<(1.5949999999999d) ) return 0.944643882107464d;
		if ( z<(1.5999999999999d) ) return 0.945200708300431d;
		if ( z<(1.6049999999999d) ) return 0.945753097664079d;
		if ( z<(1.6099999999999d) ) return 0.94630107185187d;
		if ( z<(1.6149999999999d) ) return 0.946844652564067d;
		if ( z<(1.6199999999999d) ) return 0.947383861545738d;
		if ( z<(1.6249999999999d) ) return 0.94791872058477d;
		if ( z<(1.6299999999999d) ) return 0.9484492515099d;
		if ( z<(1.6349999999999d) ) return 0.948975476188752d;
		if ( z<(1.6399999999999d) ) return 0.949497416525886d;
		if ( z<(1.6449999999999d) ) return 0.950015094460869d;
		if ( z<(1.6499999999999d) ) return 0.950528531966342d;
		if ( z<(1.6549999999999d) ) return 0.951037751046116d;
		if ( z<(1.6599999999999d) ) return 0.951542773733267d;
		if ( z<(1.6649999999999d) ) return 0.952043622088255d;
		if ( z<(1.6699999999999d) ) return 0.952540318197043d;
		if ( z<(1.6749999999999d) ) return 0.953032884169244d;
		if ( z<(1.6799999999999d) ) return 0.95352134213627d;
		if ( z<(1.6849999999999d) ) return 0.954005714249496d;
		if ( z<(1.6899999999999d) ) return 0.954486022678441d;
		if ( z<(1.6949999999999d) ) return 0.954962289608959d;
		if ( z<(1.6999999999999d) ) return 0.955434537241447d;
		if ( z<(1.7049999999999d) ) return 0.955902787789064d;
		if ( z<(1.7099999999999d) ) return 0.956367063475959d;
		if ( z<(1.7149999999999d) ) return 0.956827386535526d;
		if ( z<(1.7199999999999d) ) return 0.957283779208662d;
		if ( z<(1.7249999999999d) ) return 0.957736263742039d;
		if ( z<(1.7299999999999d) ) return 0.958184862386396d;
		if ( z<(1.7349999999999d) ) return 0.958629597394845d;
		if ( z<(1.7399999999999d) ) return 0.959070491021184d;
		if ( z<(1.7449999999999d) ) return 0.959507565518231d;
		if ( z<(1.7499999999999d) ) return 0.959940843136174d;
		if ( z<(1.7549999999999d) ) return 0.960370346120927d;
		if ( z<(1.7599999999999d) ) return 0.960796096712509d;
		if ( z<(1.7649999999999d) ) return 0.961218117143435d;
		if ( z<(1.7699999999999d) ) return 0.96163642963712d;
		if ( z<(1.7749999999999d) ) return 0.962051056406303d;
		if ( z<(1.7799999999999d) ) return 0.962462019651475d;
		if ( z<(1.7849999999999d) ) return 0.962869341559338d;
		if ( z<(1.7899999999999d) ) return 0.963273044301266d;
		if ( z<(1.7949999999999d) ) return 0.963673150031783d;
		if ( z<(1.7999999999999d) ) return 0.964069680887066d;
		if ( z<(1.8049999999999d) ) return 0.964462658983449d;
		if ( z<(1.8099999999999d) ) return 0.964852106415953d;
		if ( z<(1.8149999999999d) ) return 0.965238045256827d;
		if ( z<(1.8199999999999d) ) return 0.965620497554102d;
		if ( z<(1.8249999999999d) ) return 0.96599948533017d;
		if ( z<(1.8299999999999d) ) return 0.966375030580364d;
		if ( z<(1.8349999999999d) ) return 0.966747155271567d;
		if ( z<(1.8399999999999d) ) return 0.967115881340829d;
		if ( z<(1.8449999999999d) ) return 0.967481230693999d;
		if ( z<(1.8499999999999d) ) return 0.967843225204379d;
		if ( z<(1.8549999999999d) ) return 0.968201886711387d;
		if ( z<(1.8599999999999d) ) return 0.96855723701924d;
		if ( z<(1.8649999999999d) ) return 0.968909297895647d;
		if ( z<(1.8699999999999d) ) return 0.969258091070527d;
		if ( z<(1.8749999999999d) ) return 0.969603638234732d;
		if ( z<(1.8799999999999d) ) return 0.969945961038793d;
		if ( z<(1.8849999999999d) ) return 0.970285081091682d;
		if ( z<(1.8899999999999d) ) return 0.970621019959584d;
		if ( z<(1.8949999999999d) ) return 0.970953799164686d;
		if ( z<(1.8999999999999d) ) return 0.971283440183991d;
		if ( z<(1.9049999999999d) ) return 0.971609964448134d;
		if ( z<(1.9099999999999d) ) return 0.971933393340221d;
		if ( z<(1.9149999999999d) ) return 0.972253748194685d;
		if ( z<(1.9199999999999d) ) return 0.972571050296157d;
		if ( z<(1.9249999999999d) ) return 0.972885320878344d;
		if ( z<(1.9299999999999d) ) return 0.973196581122939d;
		if ( z<(1.9349999999999d) ) return 0.973504852158531d;
		if ( z<(1.9399999999999d) ) return 0.973810155059541d;
		if ( z<(1.9449999999999d) ) return 0.974112510845169d;
		if ( z<(1.9499999999999d) ) return 0.974411940478355d;
		if ( z<(1.9549999999999d) ) return 0.974708464864764d;
		if ( z<(1.9599999999999d) ) return 0.975002104851773d;
		if ( z<(1.9649999999999d) ) return 0.97529288122749d;
		if ( z<(1.9699999999999d) ) return 0.975580814719772d;
		if ( z<(1.9749999999999d) ) return 0.975865925995269d;
		if ( z<(1.9799999999999d) ) return 0.976148235658486d;
		if ( z<(1.9849999999999d) ) return 0.976427764250845d;
		if ( z<(1.9899999999999d) ) return 0.976704532249782d;
		if ( z<(1.9949999999999d) ) return 0.976978560067846d;
		if ( z<(1.99999999999989d) ) return 0.977249868051815d;
		if ( z<(2.0049999999999d) ) return 0.977518476481835d;
		if ( z<(2.00999999999989d) ) return 0.977784405570563d;
		if ( z<(2.01499999999989d) ) return 0.978047675462336d;
		if ( z<(2.01999999999989d) ) return 0.978308306232348d;
		if ( z<(2.02499999999989d) ) return 0.978566317885841d;
		if ( z<(2.02999999999989d) ) return 0.978821730357322d;
		if ( z<(2.03499999999989d) ) return 0.979074563509779d;
		if ( z<(2.03999999999989d) ) return 0.979324837133925d;
		if ( z<(2.04499999999989d) ) return 0.979572570947449d;
		if ( z<(2.04999999999989d) ) return 0.97981778459429d;
		if ( z<(2.05499999999989d) ) return 0.980060497643915d;
		if ( z<(2.05999999999989d) ) return 0.980300729590618d;
		if ( z<(2.06499999999989d) ) return 0.980538499852837d;
		if ( z<(2.06999999999989d) ) return 0.980773827772478d;
		if ( z<(2.07499999999989d) ) return 0.981006732614256d;
		if ( z<(2.07999999999989d) ) return 0.981237233565057d;
		if ( z<(2.08499999999989d) ) return 0.981465349733302d;
		if ( z<(2.08999999999989d) ) return 0.981691100148336d;
		if ( z<(2.09499999999989d) ) return 0.981914503759827d;
		if ( z<(2.09999999999989d) ) return 0.982135579437179d;
		if ( z<(2.10499999999989d) ) return 0.982354345968958d;
		if ( z<(2.10999999999989d) ) return 0.982570822062338d;
		if ( z<(2.11499999999989d) ) return 0.982785026342552d;
		if ( z<(2.11999999999989d) ) return 0.982996977352363d;
		if ( z<(2.12499999999989d) ) return 0.983206693551547d;
		if ( z<(2.12999999999989d) ) return 0.98341419331639d;
		if ( z<(2.13499999999989d) ) return 0.983619494939201d;
		if ( z<(2.13999999999989d) ) return 0.98382261662783d;
		if ( z<(2.14499999999989d) ) return 0.984023576505209d;
		if ( z<(2.14999999999989d) ) return 0.984222392608905d;
		if ( z<(2.15499999999989d) ) return 0.98441908289068d;
		if ( z<(2.15999999999989d) ) return 0.98461366521607d;
		if ( z<(2.16499999999989d) ) return 0.984806157363976d;
		if ( z<(2.16999999999989d) ) return 0.984996577026264d;
		if ( z<(2.17499999999989d) ) return 0.985184941807386d;
		if ( z<(2.17999999999989d) ) return 0.985371269224007d;
		if ( z<(2.18499999999989d) ) return 0.985555576704645d;
		if ( z<(2.18999999999989d) ) return 0.985737881589327d;
		if ( z<(2.19499999999989d) ) return 0.985918201129258d;
		if ( z<(2.19999999999989d) ) return 0.986096552486498d;
		if ( z<(2.20499999999989d) ) return 0.986272952733651d;
		if ( z<(2.20999999999989d) ) return 0.986447418853576d;
		if ( z<(2.21499999999989d) ) return 0.986619967739099d;
		if ( z<(2.21999999999989d) ) return 0.98679061619274d;
		if ( z<(2.22499999999989d) ) return 0.986959380926457d;
		if ( z<(2.22999999999989d) ) return 0.987126278561394d;
		if ( z<(2.23499999999989d) ) return 0.98729132562765d;
		if ( z<(2.23999999999989d) ) return 0.98745453856405d;
		if ( z<(2.24499999999989d) ) return 0.987615933717933d;
		if ( z<(2.24999999999989d) ) return 0.987775527344952d;
		if ( z<(2.25499999999989d) ) return 0.987933335608884d;
		if ( z<(2.25999999999989d) ) return 0.98808937458145d;
		if ( z<(2.26499999999989d) ) return 0.988243660242147d;
		if ( z<(2.26999999999989d) ) return 0.988396208478093d;
		if ( z<(2.27499999999989d) ) return 0.988547035083881d;
		if ( z<(2.27999999999989d) ) return 0.988696155761444d;
		if ( z<(2.28499999999989d) ) return 0.988843586119929d;
		if ( z<(2.28999999999989d) ) return 0.988989341675585d;
		if ( z<(2.29499999999989d) ) return 0.989133437851664d;
		if ( z<(2.29999999999989d) ) return 0.989275889978321d;
		if ( z<(2.30499999999989d) ) return 0.989416713292537d;
		if ( z<(2.30999999999989d) ) return 0.989555922938046d;
		if ( z<(2.31499999999989d) ) return 0.989693533965271d;
		if ( z<(2.31999999999989d) ) return 0.989829561331277d;
		if ( z<(2.32499999999989d) ) return 0.989964019899723d;
		if ( z<(2.32999999999989d) ) return 0.990096924440833d;
		if ( z<(2.33499999999989d) ) return 0.990228289631373d;
		if ( z<(2.33999999999989d) ) return 0.990358130054639d;
		if ( z<(2.34499999999989d) ) return 0.99048646020045d;
		if ( z<(2.34999999999989d) ) return 0.990613294465159d;
		if ( z<(2.35499999999989d) ) return 0.990738647151661d;
		if ( z<(2.35999999999989d) ) return 0.990862532469424d;
		if ( z<(2.36499999999989d) ) return 0.990984964534519d;
		if ( z<(2.36999999999989d) ) return 0.99110595736966d;
		if ( z<(2.37499999999989d) ) return 0.991225524904259d;
		if ( z<(2.37999999999989d) ) return 0.991343680974481d;
		if ( z<(2.38499999999989d) ) return 0.991460439323315d;
		if ( z<(2.38999999999989d) ) return 0.991575813600652d;
		if ( z<(2.39499999999989d) ) return 0.991689817363363d;
		if ( z<(2.39999999999989d) ) return 0.991802464075401d;
		if ( z<(2.40499999999989d) ) return 0.991913767107896d;
		if ( z<(2.40999999999989d) ) return 0.992023739739264d;
		if ( z<(2.41499999999989d) ) return 0.992132395155329d;
		if ( z<(2.41999999999989d) ) return 0.992239746449444d;
		if ( z<(2.42499999999989d) ) return 0.992345806622624d;
		if ( z<(2.42999999999989d) ) return 0.992450588583688d;
		if ( z<(2.43499999999989d) ) return 0.992554105149405d;
		if ( z<(2.43999999999989d) ) return 0.992656369044649d;
		if ( z<(2.44499999999989d) ) return 0.992757392902563d;
		if ( z<(2.44999999999989d) ) return 0.992857189264726d;
		if ( z<(2.45499999999989d) ) return 0.992955770581333d;
		if ( z<(2.45999999999989d) ) return 0.993053149211374d;
		if ( z<(2.46499999999989d) ) return 0.993149337422827d;
		if ( z<(2.46999999999989d) ) return 0.993244347392857d;
		if ( z<(2.47499999999989d) ) return 0.993338191208015d;
		if ( z<(2.47999999999988d) ) return 0.993430880864451d;
		if ( z<(2.48499999999988d) ) return 0.99352242826813d;
		if ( z<(2.48999999999988d) ) return 0.993612845235055d;
		if ( z<(2.49499999999988d) ) return 0.993702143491495d;
		if ( z<(2.49999999999988d) ) return 0.993790334674222d;
		if ( z<(2.50499999999988d) ) return 0.99387743033075d;
		if ( z<(2.50999999999988d) ) return 0.993963441919585d;
		if ( z<(2.51499999999988d) ) return 0.994048380810474d;
		if ( z<(2.51999999999988d) ) return 0.994132258284666d;
		if ( z<(2.52499999999988d) ) return 0.994215085535174d;
		if ( z<(2.52999999999988d) ) return 0.994296873667047d;
		if ( z<(2.53499999999988d) ) return 0.994377633697645d;
		if ( z<(2.53999999999988d) ) return 0.994457376556916d;
		if ( z<(2.54499999999988d) ) return 0.994536113087681d;
		if ( z<(2.54999999999988d) ) return 0.994613854045932d;
		if ( z<(2.55499999999988d) ) return 0.994690610101115d;
		if ( z<(2.55999999999988d) ) return 0.994766391836442d;
		if ( z<(2.56499999999988d) ) return 0.994841209749189d;
		if ( z<(2.56999999999988d) ) return 0.994915074251007d;
		if ( z<(2.57499999999988d) ) return 0.994987995668237d;
		if ( z<(2.57999999999988d) ) return 0.995059984242228d;
		if ( z<(2.58499999999988d) ) return 0.99513105012966d;
		if ( z<(2.58999999999988d) ) return 0.995201203402872d;
		if ( z<(2.59499999999988d) ) return 0.995270454050194d;
		if ( z<(2.59999999999988d) ) return 0.99533881197628d;
		if ( z<(2.60499999999988d) ) return 0.995406287002449d;
		if ( z<(2.60999999999988d) ) return 0.995472888867031d;
		if ( z<(2.61499999999988d) ) return 0.99553862722571d;
		if ( z<(2.61999999999988d) ) return 0.995603511651877d;
		if ( z<(2.62499999999988d) ) return 0.995667551636986d;
		if ( z<(2.62999999999988d) ) return 0.995730756590909d;
		if ( z<(2.63499999999988d) ) return 0.995793135842301d;
		if ( z<(2.63999999999988d) ) return 0.995854698638963d;
		if ( z<(2.64499999999988d) ) return 0.995915454148208d;
		if ( z<(2.64999999999988d) ) return 0.99597541145724d;
		if ( z<(2.65499999999988d) ) return 0.996034579573519d;
		if ( z<(2.65999999999988d) ) return 0.996092967425146d;
		if ( z<(2.66499999999988d) ) return 0.996150583861237d;
		if ( z<(2.66999999999988d) ) return 0.996207437652313d;
		if ( z<(2.67499999999988d) ) return 0.996263537490681d;
		if ( z<(2.67999999999988d) ) return 0.996318891990824d;
		if ( z<(2.68499999999988d) ) return 0.996373509689792d;
		if ( z<(2.68999999999988d) ) return 0.996427399047599d;
		if ( z<(2.69499999999988d) ) return 0.996480568447613d;
		if ( z<(2.69999999999988d) ) return 0.996533026196958d;
		if ( z<(2.70499999999988d) ) return 0.996584780526917d;
		if ( z<(2.70999999999988d) ) return 0.99663583959333d;
		if ( z<(2.71499999999988d) ) return 0.996686211477001d;
		if ( z<(2.71999999999988d) ) return 0.996735904184108d;
		if ( z<(2.72499999999988d) ) return 0.996784925646605d;
		if ( z<(2.72999999999988d) ) return 0.996833283722641d;
		if ( z<(2.73499999999988d) ) return 0.996880986196966d;
		if ( z<(2.73999999999988d) ) return 0.996928040781348d;
		if ( z<(2.74499999999988d) ) return 0.99697445511499d;
		if ( z<(2.74999999999988d) ) return 0.997020236764944d;
		if ( z<(2.75499999999988d) ) return 0.997065393226534d;
		if ( z<(2.75999999999988d) ) return 0.997109931923773d;
		if ( z<(2.76499999999988d) ) return 0.997153860209786d;
		if ( z<(2.76999999999988d) ) return 0.997197185367234d;
		if ( z<(2.77499999999988d) ) return 0.997239914608736d;
		if ( z<(2.77999999999988d) ) return 0.997282055077298d;
		if ( z<(2.78499999999988d) ) return 0.997323613846732d;
		if ( z<(2.78999999999988d) ) return 0.997364597922094d;
		if ( z<(2.79499999999988d) ) return 0.997405014240102d;
		if ( z<(2.79999999999988d) ) return 0.997444869669571d;
		if ( z<(2.80499999999988d) ) return 0.997484171011843d;
		if ( z<(2.80999999999988d) ) return 0.997522925001213d;
		if ( z<(2.81499999999988d) ) return 0.997561138305368d;
		if ( z<(2.81999999999988d) ) return 0.99759881752581d;
		if ( z<(2.82499999999988d) ) return 0.997635969198296d;
		if ( z<(2.82999999999988d) ) return 0.997672599793268d;
		if ( z<(2.83499999999988d) ) return 0.997708715716284d;
		if ( z<(2.83999999999988d) ) return 0.997744323308457d;
		if ( z<(2.84499999999988d) ) return 0.997779428846885d;
		if ( z<(2.84999999999988d) ) return 0.997814038545086d;
		if ( z<(2.85499999999988d) ) return 0.997848158553435d;
		if ( z<(2.85999999999988d) ) return 0.997881794959595d;
		if ( z<(2.86499999999988d) ) return 0.997914953788954d;
		if ( z<(2.86999999999988d) ) return 0.99794764100506d;
		if ( z<(2.87499999999988d) ) return 0.997979862510053d;
		if ( z<(2.87999999999988d) ) return 0.998011624145105d;
		if ( z<(2.88499999999988d) ) return 0.998042931690847d;
		if ( z<(2.88999999999988d) ) return 0.998073790867811d;
		if ( z<(2.89499999999988d) ) return 0.998104207336858d;
		if ( z<(2.89999999999988d) ) return 0.998134186699615d;
		if ( z<(2.90499999999988d) ) return 0.998163734498907d;
		if ( z<(2.90999999999988d) ) return 0.998192856219193d;
		if ( z<(2.91499999999988d) ) return 0.998221557286992d;
		if ( z<(2.91999999999988d) ) return 0.998249843071323d;
		if ( z<(2.92499999999988d) ) return 0.998277718884132d;
		if ( z<(2.92999999999988d) ) return 0.998305189980722d;
		if ( z<(2.93499999999988d) ) return 0.998332261560188d;
		if ( z<(2.93999999999988d) ) return 0.998358938765843d;
		if ( z<(2.94499999999988d) ) return 0.998385226685646d;
		if ( z<(2.94999999999987d) ) return 0.998411130352635d;
		if ( z<(2.95499999999987d) ) return 0.99843665474535d;
		if ( z<(2.95999999999987d) ) return 0.998461804788261d;
		if ( z<(2.96499999999987d) ) return 0.998486585352196d;
		if ( z<(2.96999999999987d) ) return 0.998511001254762d;
		if ( z<(2.97499999999987d) ) return 0.99853505726077d;
		if ( z<(2.97999999999987d) ) return 0.998558758082659d;
		if ( z<(2.98499999999987d) ) return 0.998582108380919d;
		if ( z<(2.98999999999987d) ) return 0.998605112764507d;
		if ( z<(2.99499999999987d) ) return 0.998627775791272d;
		if ( z<(2.99999999999987d) ) return 0.998650101968369d;
		if ( z<(3.00499999999987d) ) return 0.998672095752681d;
		if ( z<(3.00999999999987d) ) return 0.99869376155123d;
		if ( z<(3.01499999999987d) ) return 0.998715103721596d;
		if ( z<(3.01999999999987d) ) return 0.998736126572328d;
		if ( z<(3.02499999999987d) ) return 0.998756834363356d;
		if ( z<(3.02999999999987d) ) return 0.998777231306407d;
		if ( z<(3.03499999999987d) ) return 0.998797321565408d;
		if ( z<(3.03999999999987d) ) return 0.998817109256895d;
		if ( z<(3.04499999999987d) ) return 0.998836598450426d;
		if ( z<(3.04999999999987d) ) return 0.998855793168977d;
		if ( z<(3.05499999999987d) ) return 0.998874697389354d;
		if ( z<(3.05999999999987d) ) return 0.99889331504259d;
		if ( z<(3.06499999999987d) ) return 0.998911650014349d;
		if ( z<(3.06999999999987d) ) return 0.998929706145321d;
		if ( z<(3.07499999999987d) ) return 0.998947487231624d;
		if ( z<(3.07999999999987d) ) return 0.998964997025197d;
		if ( z<(3.08499999999987d) ) return 0.998982239234196d;
		if ( z<(3.08999999999987d) ) return 0.998999217523385d;
		if ( z<(3.09499999999987d) ) return 0.99901593551453d;
		if ( z<(3.09999999999987d) ) return 0.999032396786781d;
		if ( z<(3.10499999999987d) ) return 0.999048604877069d;
		if ( z<(3.10999999999987d) ) return 0.999064563280486d;
		if ( z<(3.11499999999987d) ) return 0.999080275450666d;
		if ( z<(3.11999999999987d) ) return 0.999095744800177d;
		if ( z<(3.12499999999987d) ) return 0.999110974700891d;
		if ( z<(3.12999999999987d) ) return 0.999125968484368d;
		if ( z<(3.13499999999987d) ) return 0.999140729442231d;
		if ( z<(3.13999999999987d) ) return 0.999155260826541d;
		if ( z<(3.14499999999987d) ) return 0.99916956585017d;
		if ( z<(3.14999999999987d) ) return 0.999183647687171d;
		if ( z<(3.15499999999987d) ) return 0.999197509473149d;
		if ( z<(3.15999999999987d) ) return 0.999211154305624d;
		if ( z<(3.16499999999987d) ) return 0.999224585244402d;
		if ( z<(3.16999999999987d) ) return 0.999237805311932d;
		if ( z<(3.17499999999987d) ) return 0.999250817493672d;
		if ( z<(3.17999999999987d) ) return 0.999263624738446d;
		if ( z<(3.18499999999987d) ) return 0.999276229958798d;
		if ( z<(3.18999999999987d) ) return 0.999288636031354d;
		if ( z<(3.19499999999987d) ) return 0.99930084579717d;
		if ( z<(3.19999999999987d) ) return 0.999312862062084d;
		if ( z<(3.20499999999987d) ) return 0.999324687597065d;
		if ( z<(3.20999999999987d) ) return 0.999336325138559d;
		if ( z<(3.21499999999987d) ) return 0.99934777738884d;
		if ( z<(3.21999999999987d) ) return 0.99935904701634d;
		if ( z<(3.22499999999987d) ) return 0.999370136656002d;
		if ( z<(3.22999999999987d) ) return 0.999381048909613d;
		if ( z<(3.23499999999987d) ) return 0.99939178634614d;
		if ( z<(3.23999999999987d) ) return 0.999402351502066d;
		if ( z<(3.24499999999987d) ) return 0.999412746881719d;
		if ( z<(3.24999999999987d) ) return 0.999422974957609d;
		if ( z<(3.25499999999987d) ) return 0.999433038170746d;
		if ( z<(3.25999999999987d) ) return 0.999442938930975d;
		if ( z<(3.26499999999987d) ) return 0.999452679617292d;
		if ( z<(3.26999999999987d) ) return 0.99946226257817d;
		if ( z<(3.27499999999987d) ) return 0.999471690131877d;
		if ( z<(3.27999999999987d) ) return 0.999480964566794d;
		if ( z<(3.28499999999987d) ) return 0.999490088141724d;
		if ( z<(3.28999999999987d) ) return 0.999499063086214d;
		if ( z<(3.29499999999987d) ) return 0.999507891600861d;
		if ( z<(3.29999999999987d) ) return 0.999516575857616d;
		if ( z<(3.30499999999987d) ) return 0.999525118000098d;
		if ( z<(3.30999999999987d) ) return 0.999533520143892d;
		if ( z<(3.31499999999987d) ) return 0.999541784376853d;
		if ( z<(3.31999999999987d) ) return 0.999549912759407d;
		if ( z<(3.32499999999987d) ) return 0.999557907324845d;
		if ( z<(3.32999999999987d) ) return 0.999565770079618d;
		if ( z<(3.33499999999987d) ) return 0.999573503003636d;
		if ( z<(3.33999999999987d) ) return 0.999581108050549d;
		if ( z<(3.34499999999987d) ) return 0.999588587148047d;
		if ( z<(3.34999999999987d) ) return 0.999595942198136d;
		if ( z<(3.35499999999987d) ) return 0.999603175077426d;
		if ( z<(3.35999999999987d) ) return 0.999610287637418d;
		if ( z<(3.36499999999987d) ) return 0.999617281704773d;
		if ( z<(3.36999999999987d) ) return 0.999624159081601d;
		if ( z<(3.37499999999987d) ) return 0.999630921545725d;
		if ( z<(3.37999999999987d) ) return 0.999637570850967d;
		if ( z<(3.38499999999987d) ) return 0.999644108727407d;
		if ( z<(3.38999999999987d) ) return 0.999650536881662d;
		if ( z<(3.39499999999987d) ) return 0.999656856997141d;
		if ( z<(3.39999999999987d) ) return 0.999663070734324d;
		if ( z<(3.40499999999987d) ) return 0.999669179731008d;
		if ( z<(3.40999999999987d) ) return 0.999675185602581d;
		if ( z<(3.41499999999987d) ) return 0.999681089942275d;
		if ( z<(3.41999999999986d) ) return 0.999686894321418d;
		if ( z<(3.42499999999986d) ) return 0.999692600289695d;
		if ( z<(3.42999999999986d) ) return 0.999698209375392d;
		if ( z<(3.43499999999986d) ) return 0.999703723085647d;
		if ( z<(3.43999999999986d) ) return 0.999709142906708d;
		if ( z<(3.44499999999986d) ) return 0.999714470304161d;
		if ( z<(3.44999999999986d) ) return 0.999719706723184d;
		if ( z<(3.45499999999986d) ) return 0.999724853588783d;
		if ( z<(3.45999999999986d) ) return 0.999729912306037d;
		if ( z<(3.46499999999986d) ) return 0.999734884260326d;
		if ( z<(3.46999999999986d) ) return 0.999739770817571d;
		if ( z<(3.47499999999986d) ) return 0.999744573324471d;
		if ( z<(3.47999999999986d) ) return 0.999749293108719d;
		if ( z<(3.48499999999986d) ) return 0.999753931479245d;
		if ( z<(3.48999999999986d) ) return 0.999758489726433d;
		if ( z<(3.49499999999986d) ) return 0.999762969122348d;
		if ( z<(3.49999999999986d) ) return 0.999767370920965d;
		if ( z<(3.50499999999986d) ) return 0.999771696358371d;
		if ( z<(3.50999999999986d) ) return 0.999775946653009d;
		if ( z<(3.51499999999986d) ) return 0.999780123005864d;
		if ( z<(3.51999999999986d) ) return 0.999784226600705d;
		if ( z<(3.52499999999986d) ) return 0.999788258604276d;
		if ( z<(3.52999999999986d) ) return 0.999792220166518d;
		if ( z<(3.53499999999986d) ) return 0.999796112420775d;
		if ( z<(3.53999999999986d) ) return 0.999799936483992d;
		if ( z<(3.54499999999986d) ) return 0.999803693456931d;
		if ( z<(3.54999999999986d) ) return 0.999807384424365d;
		if ( z<(3.55499999999986d) ) return 0.999811010455277d;
		if ( z<(3.55999999999986d) ) return 0.999814572603067d;
		if ( z<(3.56499999999986d) ) return 0.999818071905737d;
		if ( z<(3.56999999999986d) ) return 0.999821509386095d;
		if ( z<(3.57499999999986d) ) return 0.99982488605194d;
		if ( z<(3.57999999999986d) ) return 0.999828202896253d;
		if ( z<(3.58499999999986d) ) return 0.999831460897396d;
		if ( z<(3.58999999999986d) ) return 0.999834661019281d;
		if ( z<(3.59499999999986d) ) return 0.999837804211567d;
		if ( z<(3.59999999999986d) ) return 0.999840891409843d;
		if ( z<(3.60499999999986d) ) return 0.999843923535802d;
		if ( z<(3.60999999999986d) ) return 0.999846901497426d;
		if ( z<(3.61499999999986d) ) return 0.999849826189161d;
		if ( z<(3.61999999999986d) ) return 0.999852698492091d;
		if ( z<(3.62499999999986d) ) return 0.999855519274119d;
		if ( z<(3.62999999999986d) ) return 0.999858289390126d;
		if ( z<(3.63499999999986d) ) return 0.999861009682148d;
		if ( z<(3.63999999999986d) ) return 0.999863680979555d;
		if ( z<(3.64499999999986d) ) return 0.999866304099197d;
		if ( z<(3.64999999999986d) ) return 0.999868879845579d;
		if ( z<(3.65499999999986d) ) return 0.999871409011032d;
		if ( z<(3.65999999999986d) ) return 0.999873892375861d;
		if ( z<(3.66499999999986d) ) return 0.999876330708507d;
		if ( z<(3.66999999999986d) ) return 0.999878724765714d;
		if ( z<(3.67499999999986d) ) return 0.999881075292672d;
		if ( z<(3.67999999999986d) ) return 0.999883383023183d;
		if ( z<(3.68499999999986d) ) return 0.999885648679806d;
		if ( z<(3.68999999999986d) ) return 0.999887872974018d;
		if ( z<(3.69499999999986d) ) return 0.999890056606341d;
		if ( z<(3.69999999999986d) ) return 0.999892200266522d;
		if ( z<(3.70499999999986d) ) return 0.999894304633653d;
		if ( z<(3.70999999999986d) ) return 0.999896370376327d;
		if ( z<(3.71499999999986d) ) return 0.999898398152775d;
		if ( z<(3.71999999999986d) ) return 0.999900388611023d;
		if ( z<(3.72499999999986d) ) return 0.99990234238901d;
		if ( z<(3.72999999999986d) ) return 0.999904260114731d;
		if ( z<(3.73499999999986d) ) return 0.999906142406394d;
		if ( z<(3.73999999999986d) ) return 0.999907989872527d;
		if ( z<(3.74499999999986d) ) return 0.999909803112129d;
		if ( z<(3.74999999999986d) ) return 0.9999115827148d;
		if ( z<(3.75499999999986d) ) return 0.999913329260863d;
		if ( z<(3.75999999999986d) ) return 0.999915043321503d;
		if ( z<(3.76499999999986d) ) return 0.999916725458886d;
		if ( z<(3.76999999999986d) ) return 0.999918376226297d;
		if ( z<(3.77499999999986d) ) return 0.999919996168248d;
		if ( z<(3.77999999999986d) ) return 0.999921585820614d;
		if ( z<(3.78499999999986d) ) return 0.999923145710757d;
		if ( z<(3.78999999999986d) ) return 0.999924676357621d;
		if ( z<(3.79499999999986d) ) return 0.999926178271889d;
		if ( z<(3.79999999999986d) ) return 0.999927651956075d;
		if ( z<(3.80499999999986d) ) return 0.999929097904638d;
		if ( z<(3.80999999999986d) ) return 0.999930516604121d;
		if ( z<(3.81499999999986d) ) return 0.999931908533227d;
		if ( z<(3.81999999999986d) ) return 0.999933274162972d;
		if ( z<(3.82499999999986d) ) return 0.999934613956756d;
		if ( z<(3.82999999999986d) ) return 0.99993592837051d;
		if ( z<(3.83499999999986d) ) return 0.999937217852775d;
		if ( z<(3.83999999999986d) ) return 0.999938482844817d;
		if ( z<(3.84499999999986d) ) return 0.999939723780739d;
		if ( z<(3.84999999999986d) ) return 0.99994094108758d;
		if ( z<(3.85499999999986d) ) return 0.999942135185414d;
		if ( z<(3.85999999999986d) ) return 0.999943306487464d;
		if ( z<(3.86499999999986d) ) return 0.99994445540018d;
		if ( z<(3.86999999999986d) ) return 0.999945582323368d;
		if ( z<(3.87499999999986d) ) return 0.999946687650251d;
		if ( z<(3.87999999999986d) ) return 0.999947771767598d;
		if ( z<(3.88499999999986d) ) return 0.99994883505581d;
		if ( z<(3.88999999999985d) ) return 0.999949877889006d;
		if ( z<(3.89499999999985d) ) return 0.999950900635115d;
		if ( z<(3.89999999999985d) ) return 0.999951903655986d;
		if ( z<(3.90499999999985d) ) return 0.999952887307452d;
		if ( z<(3.90999999999985d) ) return 0.999953851939441d;
		if ( z<(3.91499999999985d) ) return 0.999954797896063d;
		if ( z<(3.91999999999985d) ) return 0.999955725515682d;
		if ( z<(3.92499999999985d) ) return 0.999956635131021d;
		if ( z<(3.92999999999985d) ) return 0.999957527069212d;
		if ( z<(3.93499999999985d) ) return 0.999958401651926d;
		if ( z<(3.93999999999985d) ) return 0.999959259195445d;
		if ( z<(3.94499999999985d) ) return 0.999960100010696d;
		if ( z<(3.94999999999985d) ) return 0.999960924403403d;
		if ( z<(3.95499999999985d) ) return 0.999961732674123d;
		if ( z<(3.95999999999985d) ) return 0.999962525118306d;
		if ( z<(3.96499999999985d) ) return 0.999963302026454d;
		if ( z<(3.96999999999985d) ) return 0.999964063684095d;
		if ( z<(3.97499999999985d) ) return 0.999964810371933d;
		if ( z<(3.97999999999985d) ) return 0.999965542365889d;
		if ( z<(3.98499999999985d) ) return 0.999966259937167d;
		if ( z<(3.98999999999985d) ) return 0.999966963352366d;
		if ( z<(3.99499999999985d) ) return 0.999967652873517d;
		if ( z<(3.99999999999985d) ) return 0.999968328758168d;
		if ( z<(4.00499999999985d) ) return 0.999968991259428d;
		if ( z<(4.00999999999985d) ) return 0.999969640626072d;
		if ( z<(4.01499999999985d) ) return 0.999970277102602d;
		if ( z<(4.01999999999985d) ) return 0.999970900929283d;
		if ( z<(4.02499999999985d) ) return 0.999971512342257d;
		if ( z<(4.02999999999985d) ) return 0.999972111573557d;
		if ( z<(4.03499999999985d) ) return 0.999972698851213d;
		if ( z<(4.03999999999985d) ) return 0.999973274399287d;
		if ( z<(4.04499999999985d) ) return 0.99997383843794d;
		if ( z<(4.04999999999985d) ) return 0.999974391183528d;
		if ( z<(4.05499999999985d) ) return 0.999974932848607d;
		if ( z<(4.05999999999985d) ) return 0.999975463642037d;
		if ( z<(4.06499999999985d) ) return 0.99997598376901d;
		if ( z<(4.06999999999985d) ) return 0.999976493431124d;
		if ( z<(4.07499999999985d) ) return 0.99997699282647d;
		if ( z<(4.07999999999985d) ) return 0.999977482149616d;
		if ( z<(4.08499999999985d) ) return 0.999977961591715d;
		if ( z<(4.08999999999985d) ) return 0.999978431340547d;
		if ( z<(4.09499999999985d) ) return 0.9999788915806d;
		if ( z<(4.09999999999985d) ) return 0.999979342493093d;
		if ( z<(4.10499999999985d) ) return 0.999979784255977d;
		if ( z<(4.10999999999985d) ) return 0.999980217044144d;
		if ( z<(4.11499999999985d) ) return 0.999980641029261d;
		if ( z<(4.11999999999985d) ) return 0.999981056380059d;
		if ( z<(4.12499999999985d) ) return 0.99998146326216d;
		if ( z<(4.12999999999985d) ) return 0.999981861838275d;
		if ( z<(4.13499999999985d) ) return 0.999982252268225d;
		if ( z<(4.13999999999985d) ) return 0.999982634708927d;
		if ( z<(4.14499999999985d) ) return 0.999983009314482d;
		if ( z<(4.14999999999985d) ) return 0.99998337623627d;
		if ( z<(4.15499999999985d) ) return 0.999983735622882d;
		if ( z<(4.15999999999985d) ) return 0.999984087620286d;
		if ( z<(4.16499999999985d) ) return 0.999984432371754d;
		if ( z<(4.16999999999985d) ) return 0.999984770018054d;
		if ( z<(4.17499999999985d) ) return 0.9999851006973d;
		if ( z<(4.17999999999985d) ) return 0.999985424545205d;
		if ( z<(4.18499999999985d) ) return 0.999985741694931d;
		if ( z<(4.18999999999985d) ) return 0.999986052277255d;
		if ( z<(4.19499999999985d) ) return 0.999986356420589d;
		if ( z<(4.19999999999985d) ) return 0.999986654250987d;
		if ( z<(4.20499999999985d) ) return 0.999986945892153d;
		if ( z<(4.20999999999985d) ) return 0.999987231465585d;
		if ( z<(4.21499999999985d) ) return 0.999987511090534d;
		if ( z<(4.21999999999985d) ) return 0.999987784884079d;
		if ( z<(4.22499999999985d) ) return 0.999988052961086d;
		if ( z<(4.22999999999985d) ) return 0.999988315434414d;
		if ( z<(4.23499999999985d) ) return 0.999988572414709d;
		if ( z<(4.23999999999985d) ) return 0.999988824010663d;
		if ( z<(4.24499999999985d) ) return 0.999989070328937d;
		if ( z<(4.24999999999985d) ) return 0.999989311474221d;
		if ( z<(4.25499999999985d) ) return 0.999989547549243d;
		if ( z<(4.25999999999985d) ) return 0.999989778654817d;
		if ( z<(4.26499999999985d) ) return 0.999990004889911d;
		if ( z<(4.26999999999985d) ) return 0.999990226351625d;
		if ( z<(4.27499999999985d) ) return 0.99999044313527d;
		if ( z<(4.27999999999985d) ) return 0.999990655334338d;
		if ( z<(4.28499999999985d) ) return 0.999990863040584d;
		if ( z<(4.28999999999985d) ) return 0.999991066344045d;
		if ( z<(4.29499999999985d) ) return 0.999991265333175d;
		if ( z<(4.29999999999985d) ) return 0.999991460094525d;
		if ( z<(4.30499999999985d) ) return 0.999991650713216d;
		if ( z<(4.30999999999985d) ) return 0.999991837272697d;
		if ( z<(4.31499999999985d) ) return 0.999992019854826d;
		if ( z<(4.31999999999985d) ) return 0.999992198539941d;
		if ( z<(4.32499999999985d) ) return 0.999992373406894d;
		if ( z<(4.32999999999985d) ) return 0.999992544532889d;
		if ( z<(4.33499999999985d) ) return 0.999992711993875d;
		if ( z<(4.33999999999985d) ) return 0.999992875864172d;
		if ( z<(4.34499999999985d) ) return 0.999993036216827d;
		if ( z<(4.34999999999985d) ) return 0.999993193123391d;
		if ( z<(4.35499999999984d) ) return 0.999993346654069d;
		if ( z<(4.35999999999984d) ) return 0.999993496877796d;
		if ( z<(4.36499999999984d) ) return 0.999993643862072d;
		if ( z<(4.36999999999984d) ) return 0.999993787673145d;
		if ( z<(4.37499999999984d) ) return 0.999993928376084d;
		if ( z<(4.37999999999984d) ) return 0.999994066034574d;
		if ( z<(4.38499999999984d) ) return 0.99999420071105d;
		if ( z<(4.38999999999984d) ) return 0.999994332466967d;
		if ( z<(4.39499999999984d) ) return 0.999994461362312d;
		if ( z<(4.39999999999984d) ) return 0.999994587456078d;
		if ( z<(4.40499999999984d) ) return 0.999994710806108d;
		if ( z<(4.40999999999984d) ) return 0.999994831469022d;
		if ( z<(4.41499999999984d) ) return 0.999994949500468d;
		if ( z<(4.41999999999984d) ) return 0.999995064954909d;
		if ( z<(4.42499999999984d) ) return 0.999995177885817d;
		if ( z<(4.42999999999984d) ) return 0.999995288345587d;
		if ( z<(4.43499999999984d) ) return 0.999995396385563d;
		if ( z<(4.43999999999984d) ) return 0.999995502056111d;
		if ( z<(4.44499999999984d) ) return 0.999995605406604d;
		if ( z<(4.44999999999984d) ) return 0.999995706485534d;
		if ( z<(4.45499999999984d) ) return 0.999995805340243d;
		if ( z<(4.45999999999984d) ) return 0.999995902017319d;
		if ( z<(4.46499999999984d) ) return 0.999995996562391d;
		if ( z<(4.46999999999984d) ) return 0.999996089020101d;
		if ( z<(4.47499999999984d) ) return 0.99999617943434d;
		if ( z<(4.47999999999984d) ) return 0.999996267848036d;
		if ( z<(4.48499999999984d) ) return 0.999996354303233d;
		if ( z<(4.48999999999984d) ) return 0.999996438841253d;
		if ( z<(4.49499999999984d) ) return 0.999996521502606d;
		if ( z<(4.49999999999984d) ) return 0.999996602326849d;
		if ( z<(4.50499999999984d) ) return 0.999996681352812d;
		if ( z<(4.50999999999984d) ) return 0.999996758618718d;
		if ( z<(4.51499999999984d) ) return 0.999996834161693d;
		if ( z<(4.51999999999984d) ) return 0.999996908018434d;
		if ( z<(4.52499999999984d) ) return 0.999996980224716d;
		if ( z<(4.52999999999984d) ) return 0.99999705081559d;
		if ( z<(4.53499999999984d) ) return 0.999997119825717d;
		if ( z<(4.53999999999984d) ) return 0.999997187288564d;
		if ( z<(4.54499999999984d) ) return 0.999997253237253d;
		if ( z<(4.54999999999984d) ) return 0.999997317704222d;
		if ( z<(4.55499999999984d) ) return 0.999997380721043d;
		if ( z<(4.55999999999984d) ) return 0.999997442318936d;
		if ( z<(4.56499999999984d) ) return 0.999997502528218d;
		if ( z<(4.56999999999984d) ) return 0.999997561378881d;
		if ( z<(4.57499999999984d) ) return 0.999997618899994d;
		if ( z<(4.57999999999984d) ) return 0.999997675120351d;
		if ( z<(4.58499999999984d) ) return 0.999997730067772d;
		if ( z<(4.58999999999984d) ) return 0.999997783769886d;
		if ( z<(4.59499999999984d) ) return 0.999997836253659d;
		if ( z<(4.59999999999984d) ) return 0.99999788754522d;
		if ( z<(4.60499999999984d) ) return 0.99999793767071d;
		if ( z<(4.60999999999984d) ) return 0.999997986655123d;
		if ( z<(4.61499999999984d) ) return 0.99999803452338d;
		if ( z<(4.61999999999984d) ) return 0.999998081299797d;
		if ( z<(4.62499999999984d) ) return 0.999998127008025d;
		if ( z<(4.62999999999984d) ) return 0.999998171671322d;
		if ( z<(4.63499999999984d) ) return 0.999998215312545d;
		if ( z<(4.63999999999984d) ) return 0.999998257954158d;
		if ( z<(4.64499999999984d) ) return 0.999998299617699d;
		if ( z<(4.64999999999984d) ) return 0.999998340324818d;
		if ( z<(4.65499999999984d) ) return 0.999998380096457d;
		if ( z<(4.65999999999984d) ) return 0.999998418953008d;
		if ( z<(4.66499999999984d) ) return 0.999998456914843d;
		if ( z<(4.66999999999984d) ) return 0.999998494001355d;
		if ( z<(4.67499999999984d) ) return 0.999998530231895d;
		if ( z<(4.67999999999984d) ) return 0.999998565625359d;
		if ( z<(4.68499999999984d) ) return 0.999998600200329d;
		if ( z<(4.68999999999984d) ) return 0.999998633974792d;
		if ( z<(4.69499999999984d) ) return 0.99999866696645d;
		if ( z<(4.69999999999984d) ) return 0.999998699192567d;
		if ( z<(4.70499999999984d) ) return 0.999998730670229d;
		if ( z<(4.70999999999984d) ) return 0.999998761415969d;
		if ( z<(4.71499999999984d) ) return 0.999998791446107d;
		if ( z<(4.71999999999984d) ) return 0.999998820776683d;
		if ( z<(4.72499999999984d) ) return 0.999998849423263d;
		if ( z<(4.72999999999984d) ) return 0.999998877400681d;
		if ( z<(4.73499999999984d) ) return 0.999998904724463d;
		if ( z<(4.73999999999984d) ) return 0.999998931408853d;
		if ( z<(4.74499999999984d) ) return 0.999998957468261d;
		if ( z<(4.74999999999984d) ) return 0.999998982916698d;
		if ( z<(4.75499999999984d) ) return 0.99999900776789d;
		if ( z<(4.75999999999984d) ) return 0.999999032035168d;
		if ( z<(4.76499999999984d) ) return 0.999999055731877d;
		if ( z<(4.76999999999984d) ) return 0.999999078870244d;
		if ( z<(4.77499999999984d) ) return 0.999999101463711d;
		if ( z<(4.77999999999984d) ) return 0.99999912352411d;
		if ( z<(4.78499999999984d) ) return 0.999999145063168d;
		if ( z<(4.78999999999984d) ) return 0.999999166093341d;
		if ( z<(4.79499999999984d) ) return 0.999999186625817d;
		if ( z<(4.79999999999984d) ) return 0.999999206671886d;
		if ( z<(4.80499999999984d) ) return 0.999999226242327d;
		if ( z<(4.80999999999984d) ) return 0.999999245348278d;
		if ( z<(4.81499999999984d) ) return 0.999999264000301d;
		if ( z<(4.81999999999984d) ) return 0.99999928220892d;
		if ( z<(4.82499999999983d) ) return 0.999999299983534d;
		if ( z<(4.82999999999983d) ) return 0.999999317334713d;
		if ( z<(4.83499999999983d) ) return 0.999999334271958d;
		if ( z<(4.83999999999983d) ) return 0.999999350804357d;
		if ( z<(4.84499999999983d) ) return 0.999999366941622d;
		if ( z<(4.84999999999983d) ) return 0.999999382692577d;
		if ( z<(4.85499999999983d) ) return 0.999999398066213d;
		if ( z<(4.85999999999983d) ) return 0.999999413071131d;
		if ( z<(4.86499999999983d) ) return 0.999999427716065d;
		if ( z<(4.86999999999983d) ) return 0.999999442008642d;
		if ( z<(4.87499999999983d) ) return 0.999999455957606d;
		if ( z<(4.87999999999983d) ) return 0.999999469570588d;
		if ( z<(4.88499999999983d) ) return 0.999999482855635d;
		if ( z<(4.88999999999983d) ) return 0.999999495819937d;
		if ( z<(4.89499999999983d) ) return 0.99999950847133d;
		if ( z<(4.89999999999983d) ) return 0.999999520816682d;
		if ( z<(4.90499999999983d) ) return 0.999999532863053d;
		if ( z<(4.90999999999983d) ) return 0.999999544618132d;
		if ( z<(4.91499999999983d) ) return 0.99999955608754d;
		if ( z<(4.91999999999983d) ) return 0.999999567278984d;
		if ( z<(4.92499999999983d) ) return 0.999999578198139d;
		if ( z<(4.92999999999983d) ) return 0.999999588851902d;
		if ( z<(4.93499999999983d) ) return 0.999999599245781d;
		if ( z<(4.93999999999983d) ) return 0.999999609387085d;
		if ( z<(4.94499999999983d) ) return 0.999999619280529d;
		if ( z<(4.94999999999983d) ) return 0.999999628932535d;
		if ( z<(4.95499999999983d) ) return 0.999999638348689d;
		if ( z<(4.95999999999983d) ) return 0.999999647534193d;
		if ( z<(4.96499999999983d) ) return 0.99999965649474d;
		if ( z<(4.96999999999983d) ) return 0.999999665235276d;
		if ( z<(4.97499999999983d) ) return 0.99999967376178d;
		if ( z<(4.97999999999983d) ) return 0.999999682078345d;
		if ( z<(4.98499999999983d) ) return 0.999999690190468d;
		if ( z<(4.98999999999983d) ) return 0.999999698103353d;
		if ( z<(4.99499999999983d) ) return 0.999999705821135d;
		if ( z<(4.99999999999983d) ) return 0.999999713348223d;
		if ( z<(5.00499999999983d) ) return 0.999999720689845d;
		if ( z<(5.50499999999983d) ) return 0.999999981541587d;
		if ( z<(6.00499999999983d) ) return 0.99999999904334d;
		if ( z<(6.50499999999983d) ) return 0.999999999961153d;
		if ( z<(7.00499999999983d) ) return 0.999999999998765d;
		if ( z<(7.50499999999983d) ) return 0.999999999999969d;
		if ( z<(8.00499999999983d) ) return 0.999999999999999d;
		return 1d;
	}
	
	public static double inverseChi(double chiSquare, int degreesOfFreedom)
	{
		double chi=Math.min(chiSquare,201);
		double df=Math.min(degreesOfFreedom,18);
		if ( chi <= 0 && df == 1) return 1d;
		if ( chi <= 0.25 && df == 1) return 0.617075078123632d;
		if ( chi <= 0.5 && df == 1) return 0.479500123965362d;
		if ( chi <= 0.75 && df == 1) return 0.386476232247234d;
		if ( chi <= 1 && df == 1) return 0.317310813097629d;
		if ( chi <= 1.25 && df == 1) return 0.263552688510693d;
		if ( chi <= 1.5 && df == 1) return 0.220671492296857d;
		if ( chi <= 1.75 && df == 1) return 0.185876809202863d;
		if ( chi <= 2 && df == 1) return 0.157299264825445d;
		if ( chi <= 2.25 && df == 1) return 0.13361445730446d;
		if ( chi <= 2.5 && df == 1) return 0.113846334912406d;
		if ( chi <= 2.75 && df == 1) return 0.0972544564143466d;
		if ( chi <= 3 && df == 1) return 0.083264540390181d;
		if ( chi <= 3.25 && df == 1) return 0.0714234689098746d;
		if ( chi <= 3.5 && df == 1) return 0.0613688402997909d;
		if ( chi <= 3.75 && df == 1) return 0.052807523783222d;
		if ( chi <= 4 && df == 1) return 0.0455002704926911d;
		if ( chi <= 4.25 && df == 1) return 0.0392503340516448d;
		if ( chi <= 4.5 && df == 1) return 0.0338948583357558d;
		if ( chi <= 4.75 && df == 1) return 0.0292982971701542d;
		if ( chi <= 5 && df == 1) return 0.0253473202889209d;
		if ( chi <= 5.25 && df == 1) return 0.0219467735939817d;
		if ( chi <= 5.5 && df == 1) return 0.019016475255283d;
		if ( chi <= 5.75 && df == 1) return 0.0164886577048774d;
		if ( chi <= 6 && df == 1) return 0.0143058803114559d;
		if ( chi <= 6.25 && df == 1) return 0.0124193318586556d;
		if ( chi <= 6.5 && df == 1) return 0.0107874500375786d;
		if ( chi <= 6.75 && df == 1) return 0.00937476897103096d;
		if ( chi <= 7 && df == 1) return 0.00815097193016913d;
		if ( chi <= 7.25 && df == 1) return 0.00709010144683856d;
		if ( chi <= 7.5 && df == 1) return 0.00616989988035116d;
		if ( chi <= 7.75 && df == 1) return 0.00537125450518313d;
		if ( chi <= 8 && df == 1) return 0.00467773524531369d;
		if ( chi <= 8.25 && df == 1) return 0.00407520027449942d;
		if ( chi <= 8.5 && df == 1) return 0.00355146493501258d;
		if ( chi <= 8.75 && df == 1) return 0.003096020638938d;
		if ( chi <= 9 && df == 1) return 0.00269979612572207d;
		if ( chi <= 9.25 && df == 1) return 0.00235495429572377d;
		if ( chi <= 9.5 && df == 1) return 0.00205471900729053d;
		if ( chi <= 9.75 && df == 1) return 0.00179322726161176d;
		if ( chi <= 10 && df == 1) return 0.00156540233785132d;
		if ( chi <= 12 && df == 1) return 0.000532005512119362d;
		if ( chi <= 14 && df == 1) return 0.000182810638468642d;
		if ( chi <= 16 && df == 1) return 6.33424843932203E-05d;
		if ( chi <= 18 && df == 1) return 2.20904971037057E-05d;
		if ( chi <= 20 && df == 1) return 7.74421644729203E-06d;
		if ( chi <= 22 && df == 1) return 2.7265046972487E-06d;
		if ( chi <= 24 && df == 1) return 9.63357016675959E-07d;
		if ( chi <= 26 && df == 1) return 3.41417359362301E-07d;
		if ( chi <= 41 && df == 1) return 1.52229219643394E-10d;
		if ( chi <= 56 && df == 1) return 7.24710197263705E-14d;
		if ( chi <= 71 && df == 1) return 3.57224888840821E-17d;
		if ( chi <= 86 && df == 1) return 1.79935639377175E-20d;
		if ( chi <= 101 && df == 1) return 9.19834440736175E-24d;
		if ( chi <= 151 && df == 1) return 1.04806498892342E-34d;
		if ( chi <= 201 && df == 1) return 1.26360742526986E-45d;
		if ( chi <= 0 && df == 2) return 1d;
		if ( chi <= 0.25 && df == 2) return 0.88249690266451d;
		if ( chi <= 0.5 && df == 2) return 0.778800783365305d;
		if ( chi <= 0.75 && df == 2) return 0.687289279066462d;
		if ( chi <= 1 && df == 2) return 0.60653066313171d;
		if ( chi <= 1.25 && df == 2) return 0.535261429921535d;
		if ( chi <= 1.5 && df == 2) return 0.472366560582364d;
		if ( chi <= 1.75 && df == 2) return 0.416862022246d;
		if ( chi <= 2 && df == 2) return 0.367879441186789d;
		if ( chi <= 2.25 && df == 2) return 0.324652467371893d;
		if ( chi <= 2.5 && df == 2) return 0.286504796872142d;
		if ( chi <= 2.75 && df == 2) return 0.252839595815294d;
		if ( chi <= 3 && df == 2) return 0.223130160157738d;
		if ( chi <= 3.25 && df == 2) return 0.196911675212408d;
		if ( chi <= 3.5 && df == 2) return 0.173773943457694d;
		if ( chi <= 3.75 && df == 2) return 0.153354966851326d;
		if ( chi <= 4 && df == 2) return 0.135335283242258d;
		if ( chi <= 4.25 && df == 2) return 0.119432968271702d;
		if ( chi <= 4.5 && df == 2) return 0.105399224566261d;
		if ( chi <= 4.75 && df == 2) return 0.0930144892145437d;
		if ( chi <= 5 && df == 2) return 0.082084998627323d;
		if ( chi <= 5.25 && df == 2) return 0.0724397570372734d;
		if ( chi <= 5.5 && df == 2) return 0.0639278612093744d;
		if ( chi <= 5.75 && df == 2) return 0.0564161395061308d;
		if ( chi <= 6 && df == 2) return 0.0497870683699409d;
		if ( chi <= 6.25 && df == 2) return 0.0439369336252403d;
		if ( chi <= 6.5 && df == 2) return 0.0387742078333395d;
		if ( chi <= 6.75 && df == 2) return 0.0342181183130935d;
		if ( chi <= 7 && df == 2) return 0.0301973834235782d;
		if ( chi <= 7.25 && df == 2) return 0.0266490973374672d;
		if ( chi <= 7.5 && df == 2) return 0.0235177458569902d;
		if ( chi <= 7.75 && df == 2) return 0.0207543378745655d;
		if ( chi <= 8 && df == 2) return 0.0183156388894982d;
		if ( chi <= 8.25 && df == 2) return 0.0161634945888402d;
		if ( chi <= 8.5 && df == 2) return 0.0142642339095943d;
		if ( chi <= 8.75 && df == 2) return 0.0125881422429591d;
		if ( chi <= 9 && df == 2) return 0.0111089965387057d;
		if ( chi <= 9.25 && df == 2) return 0.0098036550362308d;
		if ( chi <= 9.5 && df == 2) return 0.00865169520348155d;
		if ( chi <= 9.75 && df == 2) return 0.00763509421917847d;
		if ( chi <= 10 && df == 2) return 0.00673794699936655d;
		if ( chi <= 12 && df == 2) return 0.00247875217676976d;
		if ( chi <= 14 && df == 2) return 0.000911881965592556d;
		if ( chi <= 16 && df == 2) return 0.000335462627916506d;
		if ( chi <= 18 && df == 2) return 0.000123409804091828d;
		if ( chi <= 20 && df == 2) return 4.53999297643788E-05d;
		if ( chi <= 22 && df == 2) return 1.67017007909424E-05d;
		if ( chi <= 24 && df == 2) return 6.14421235358452E-06d;
		if ( chi <= 26 && df == 2) return 2.26032940707534E-06d;
		if ( chi <= 41 && df == 2) return 1.25015286643889E-09d;
		if ( chi <= 56 && df == 2) return 6.91440010722863E-13d;
		if ( chi <= 71 && df == 2) return 3.82424662825667E-16d;
		if ( chi <= 86 && df == 2) return 2.11513103767932E-19d;
		if ( chi <= 101 && df == 2) return 1.16984591775499E-22d;
		if ( chi <= 151 && df == 2) return 1.62467544364385E-33d;
		if ( chi <= 201 && df == 2) return 2.25634013601114E-44d;
		if ( chi <= 0 && df == 3) return 1d;
		if ( chi <= 0.25 && df == 3) return 0.96914040422503d;
		if ( chi <= 0.5 && df == 3) return 0.918891411700565d;
		if ( chi <= 0.75 && df == 3) return 0.861385081831747d;
		if ( chi <= 1 && df == 3) return 0.801251957664246d;
		if ( chi <= 1.25 && df == 3) return 0.741038889141658d;
		if ( chi <= 1.5 && df == 3) return 0.682270332385837d;
		if ( chi <= 1.75 && df == 3) return 0.625875462762186d;
		if ( chi <= 2 && df == 3) return 0.572406707363635d;
		if ( chi <= 2.25 && df == 3) return 0.522167199599282d;
		if ( chi <= 2.5 && df == 3) return 0.475291086309989d;
		if ( chi <= 2.75 && df == 3) return 0.431797089549616d;
		if ( chi <= 3 && df == 3) return 0.391625110853021d;
		if ( chi <= 3.25 && df == 3) return 0.354662492490195d;
		if ( chi <= 3.5 && df == 3) return 0.320762085953198d;
		if ( chi <= 3.75 && df == 3) return 0.28975573888088d;
		if ( chi <= 4 && df == 3) return 0.261464106467621d;
		if ( chi <= 4.25 && df == 3) return 0.235703336461992d;
		if ( chi <= 4.5 && df == 3) return 0.212290267651579d;
		if ( chi <= 4.75 && df == 3) return 0.191045743503928d;
		if ( chi <= 5 && df == 3) return 0.171797123818569d;
		if ( chi <= 5.25 && df == 3) return 0.15437990482009d;
		if ( chi <= 5.5 && df == 3) return 0.138638609237302d;
		if ( chi <= 5.75 && df == 3) return 0.124427392571079d;
		if ( chi <= 6 && df == 3) return 0.111610213629151d;
		if ( chi <= 6.25 && df == 3) return 0.100060825470349d;
		if ( chi <= 6.5 && df == 3) return 0.0896624988484893d;
		if ( chi <= 6.75 && df == 3) return 0.0803077230781584d;
		if ( chi <= 7 && df == 3) return 0.0718977701295311d;
		if ( chi <= 7.25 && df == 3) return 0.0643422189418665d;
		if ( chi <= 7.5 && df == 3) return 0.0575584508563646d;
		if ( chi <= 7.75 && df == 3) return 0.0514711307607026d;
		if ( chi <= 8 && df == 3) return 0.0460117032603949d;
		if ( chi <= 8.25 && df == 3) return 0.0411178696536829d;
		if ( chi <= 8.5 && df == 3) return 0.0367331134197134d;
		if ( chi <= 8.75 && df == 3) return 0.0328062302058164d;
		if ( chi <= 9 && df == 3) return 0.0292908858822503d;
		if ( chi <= 9.25 && df == 3) return 0.0261452006660439d;
		if ( chi <= 9.5 && df == 3) return 0.0233313600847474d;
		if ( chi <= 9.75 && df == 3) return 0.0208152528594581d;
		if ( chi <= 10 && df == 3) return 0.0185661352770776d;
		if ( chi <= 12 && df == 3) return 0.00738316037965329d;
		if ( chi <= 14 && df == 3) return 0.00290515275834766d;
		if ( chi <= 16 && df == 3) return 0.00113398428756811d;
		if ( chi <= 18 && df == 3) return 0.000439849648214425d;
		if ( chi <= 20 && df == 3) return 0.000169742434688508d;
		if ( chi <= 22 && df == 3) return 6.52311218610088E-05d;
		if ( chi <= 24 && df == 3) return 2.49799776903485E-05d;
		if ( chi <= 26 && df == 3) return 9.53740693550556E-06d;
		if ( chi <= 41 && df == 3) return 6.53920266029883E-09d;
		if ( chi <= 56 && df == 3) return 4.20093577740091E-12d;
		if ( chi <= 71 && df == 3) return 2.60679975507474E-15d;
		if ( chi <= 86 && df == 3) return 1.58303761216364E-18d;
		if ( chi <= 101 && df == 3) return 9.47255741152838E-22d;
		if ( chi <= 151 && df == 3) return 1.60340500124605E-32d;
		if ( chi <= 201 && df == 3) return 2.56500035906591E-43d;
		if ( chi <= 0 && df == 4) return 1d;
		if ( chi <= 0.25 && df == 4) return 0.992809015408376d;
		if ( chi <= 0.5 && df == 4) return 0.97350097884538d;
		if ( chi <= 0.75 && df == 4) return 0.945022758621406d;
		if ( chi <= 1 && df == 4) return 0.909795989732181d;
		if ( chi <= 1.25 && df == 4) return 0.869799822754124d;
		if ( chi <= 1.5 && df == 4) return 0.82664146781485d;
		if ( chi <= 1.75 && df == 4) return 0.781616289470291d;
		if ( chi <= 2 && df == 4) return 0.735758883151832d;
		if ( chi <= 2.25 && df == 4) return 0.689886496157443d;
		if ( chi <= 2.5 && df == 4) return 0.644635802527265d;
		if ( chi <= 2.75 && df == 4) return 0.600494042827295d;
		if ( chi <= 3 && df == 4) return 0.557825408136449d;
		if ( chi <= 3.25 && df == 4) return 0.516893167056834d;
		if ( chi <= 3.5 && df == 4) return 0.477878350139366d;
		if ( chi <= 3.75 && df == 4) return 0.4408955429592d;
		if ( chi <= 4 && df == 4) return 0.40600584974466d;
		if ( chi <= 4.25 && df == 4) return 0.37322802586551d;
		if ( chi <= 4.5 && df == 4) return 0.342547479855439d;
		if ( chi <= 4.75 && df == 4) return 0.313923901112914d;
		if ( chi <= 5 && df == 4) return 0.287297495208287d;
		if ( chi <= 5.25 && df == 4) return 0.262594119271684d;
		if ( chi <= 5.5 && df == 4) return 0.239729479545714d;
		if ( chi <= 5.75 && df == 4) return 0.218612540595887d;
		if ( chi <= 6 && df == 4) return 0.199148273488536d;
		if ( chi <= 6.25 && df == 4) return 0.1812398512121d;
		if ( chi <= 6.5 && df == 4) return 0.164790383298952d;
		if ( chi <= 6.75 && df == 4) return 0.149704267626379d;
		if ( chi <= 7 && df == 4) return 0.135888225412088d;
		if ( chi <= 7.25 && df == 4) return 0.123252075191215d;
		if ( chi <= 7.5 && df == 4) return 0.111709292825624d;
		if ( chi <= 7.75 && df == 4) return 0.101177397142964d;
		if ( chi <= 8 && df == 4) return 0.0915781944515254d;
		if ( chi <= 8.25 && df == 4) return 0.0828379097714549d;
		if ( chi <= 8.5 && df == 4) return 0.074887228028669d;
		if ( chi <= 8.75 && df == 4) return 0.0676612645588859d;
		if ( chi <= 9 && df == 4) return 0.0610994809655731d;
		if ( chi <= 9.25 && df == 4) return 0.0551455595812275d;
		if ( chi <= 9.5 && df == 4) return 0.0497472474222104d;
		if ( chi <= 9.75 && df == 4) return 0.0448561785396495d;
		if ( chi <= 10 && df == 4) return 0.0404276819979802d;
		if ( chi <= 12 && df == 4) return 0.0173512652381527d;
		if ( chi <= 14 && df == 4) return 0.00729505572506181d;
		if ( chi <= 16 && df == 4) return 0.00301916365138155d;
		if ( chi <= 18 && df == 4) return 0.00123409804097264d;
		if ( chi <= 20 && df == 4) return 0.000499399227430166d;
		if ( chi <= 22 && df == 4) return 0.000200420409500138d;
		if ( chi <= 24 && df == 4) return 7.98747606001174E-05d;
		if ( chi <= 26 && df == 4) return 3.16446117004488E-05d;
		if ( chi <= 41 && df == 4) return 2.68782866296203E-08d;
		if ( chi <= 56 && df == 4) return 2.00517603118464E-11d;
		if ( chi <= 71 && df == 4) return 1.39585001937518E-14d;
		if ( chi <= 86 && df == 4) return 9.30657656619897E-18d;
		if ( chi <= 101 && df == 4) return 6.02470647670366E-21d;
		if ( chi <= 151 && df == 4) return 1.24287671444231E-31d;
		if ( chi <= 201 && df == 4) return 2.29018523815219E-42d;
		if ( chi <= 0 && df == 5) return 1d;
		if ( chi <= 0.25 && df == 5) return 0.998479181446631d;
		if ( chi <= 0.5 && df == 5) return 0.992123293282961d;
		if ( chi <= 0.75 && df == 5) return 0.980112292867271d;
		if ( chi <= 1 && df == 5) return 0.96256577328019d;
		if ( chi <= 1.25 && df == 5) return 0.939991560624525d;
		if ( chi <= 1.5 && df == 5) return 0.913069814669621d;
		if ( chi <= 1.75 && df == 5) return 0.882541374791932d;
		if ( chi <= 2 && df == 5) return 0.849145038989397d;
		if ( chi <= 2.25 && df == 5) return 0.813581780666302d;
		if ( chi <= 2.5 && df == 5) return 0.776495074101059d;
		if ( chi <= 2.75 && df == 5) return 0.73846118753903d;
		if ( chi <= 3 && df == 5) return 0.699985838414146d;
		if ( chi <= 3.25 && df == 5) return 0.66150492704198d;
		if ( chi <= 3.5 && df == 5) return 0.623387644036327d;
		if ( chi <= 3.75 && df == 5) return 0.585941123102208d;
		if ( chi <= 4 && df == 5) return 0.54941596204454d;
		if ( chi <= 4.25 && df == 5) return 0.514011865477799d;
		if ( chi <= 4.5 && df == 5) return 0.479883444813302d;
		if ( chi <= 4.75 && df == 5) return 0.447145915481131d;
		if ( chi <= 5 && df == 5) return 0.415880232135435d;
		if ( chi <= 5.25 && df == 5) return 0.386137952908145d;
		if ( chi <= 5.5 && df == 5) return 0.357945899123566d;
		if ( chi <= 5.75 && df == 5) return 0.331309996604632d;
		if ( chi <= 6 && df == 5) return 0.306218946058413d;
		if ( chi <= 6.25 && df == 5) return 0.282647315206487d;
		if ( chi <= 6.5 && df == 5) return 0.260558468534423d;
		if ( chi <= 6.75 && df == 5) return 0.239906890891865d;
		if ( chi <= 7 && df == 5) return 0.220640313864366d;
		if ( chi <= 7.25 && df == 5) return 0.202701513066614d;
		if ( chi <= 7.5 && df == 5) return 0.18602983645779d;
		if ( chi <= 7.75 && df == 5) return 0.170562500376974d;
		if ( chi <= 8 && df == 5) return 0.156235634348157d;
		if ( chi <= 8.25 && df == 5) return 0.142985222358578d;
		if ( chi <= 8.5 && df == 5) return 0.130747792824319d;
		if ( chi <= 8.75 && df == 5) return 0.119461014485062d;
		if ( chi <= 9 && df == 5) return 0.109064159842972d;
		if ( chi <= 9.25 && df == 5) return 0.0994984637717881d;
		if ( chi <= 9.5 && df == 5) return 0.0907073927298829d;
		if ( chi <= 9.75 && df == 5) return 0.0826368382451242d;
		if ( chi <= 10 && df == 5) return 0.0752352467108136d;
		if ( chi <= 12 && df == 5) return 0.0347877809554287d;
		if ( chi <= 14 && df == 5) return 0.0156094161625398d;
		if ( chi <= 16 && df == 5) return 0.0068440739322924d;
		if ( chi <= 18 && df == 5) return 0.00294640461131163d;
		if ( chi <= 20 && df == 5) return 0.0012497305677686d;
		if ( chi <= 22 && df == 5) return 0.00052359831712502d;
		if ( chi <= 24 && df == 5) return 0.00021711294368543d;
		if ( chi <= 26 && df == 5) return 8.92359834017143E-05d;
		if ( chi <= 41 && df == 5) return 9.38278399300149E-08d;
		if ( chi <= 56 && df == 5) return 8.12656112877068E-11d;
		if ( chi <= 71 && df == 5) return 6.3455628395731E-14d;
		if ( chi <= 86 && df == 5) return 4.64476336641146E-17d;
		if ( chi <= 101 && df == 5) return 3.25285214330727E-20d;
		if ( chi <= 151 && df == 5) return 8.17805973560562E-31d;
		if ( chi <= 201 && df == 5) return 1.73573407459727E-41d;
		if ( chi <= 0 && df == 6) return 1d;
		if ( chi <= 0.25 && df == 6) return 0.999703522460399d;
		if ( chi <= 0.5 && df == 6) return 0.997838503318374d;
		if ( chi <= 0.75 && df == 6) return 0.99334778576256d;
		if ( chi <= 1 && df == 6) return 0.985612322202268d;
		if ( chi <= 1.25 && df == 6) return 0.974343069178286d;
		if ( chi <= 1.5 && df == 6) return 0.959494560783263d;
		if ( chi <= 1.75 && df == 6) return 0.941196278986188d;
		if ( chi <= 2 && df == 6) return 0.919698603750571d;
		if ( chi <= 2.25 && df == 6) return 0.895330635671674d;
		if ( chi <= 2.5 && df == 6) return 0.868467666385044d;
		if ( chi <= 2.75 && df == 6) return 0.839506473251456d;
		if ( chi <= 3 && df == 6) return 0.808846831344678d;
		if ( chi <= 3.25 && df == 6) return 0.776878095818031d;
		if ( chi <= 3.5 && df == 6) return 0.743969701061887d;
		if ( chi <= 3.75 && df == 6) return 0.71046480895312d;
		if ( chi <= 4 && df == 6) return 0.676676420015457d;
		if ( chi <= 4.25 && df == 6) return 0.642885283012225d;
		if ( chi <= 4.5 && df == 6) return 0.609339284908385d;
		if ( chi <= 4.75 && df == 6) return 0.576253832924999d;
		if ( chi <= 5 && df == 6) return 0.543813126520931d;
		if ( chi <= 5.25 && df == 6) return 0.512171740370435d;
		if ( chi <= 5.5 && df == 6) return 0.481456710881831d;
		if ( chi <= 5.75 && df == 6) return 0.451769878856424d;
		if ( chi <= 6 && df == 6) return 0.423190081177677d;
		if ( chi <= 6.25 && df == 6) return 0.39577565995214d;
		if ( chi <= 6.5 && df == 6) return 0.369566668440492d;
		if ( chi <= 6.75 && df == 6) return 0.344587144601841d;
		if ( chi <= 7 && df == 6) return 0.320847198900674d;
		if ( chi <= 7.25 && df == 6) return 0.298344972559254d;
		if ( chi <= 7.5 && df == 6) return 0.277068443399388d;
		if ( chi <= 7.75 && df == 6) return 0.256997074482543d;
		if ( chi <= 8 && df == 6) return 0.238103305582145d;
		if ( chi <= 8.25 && df == 6) return 0.220353891091699d;
		if ( chi <= 8.5 && df == 6) return 0.203711090537365d;
		if ( chi <= 8.75 && df == 6) return 0.188133719630225d;
		if ( chi <= 9 && df == 6) return 0.173578070930886d;
		if ( chi <= 9.25 && df == 6) return 0.15999871384603d;
		if ( chi <= 9.5 && df == 6) return 0.147349183945848d;
		if ( chi <= 9.75 && df == 6) return 0.135582571574635d;
		if ( chi <= 10 && df == 6) return 0.124652019498054d;
		if ( chi <= 12 && df == 6) return 0.0619688044241026d;
		if ( chi <= 14 && df == 6) return 0.0296361638840816d;
		if ( chi <= 16 && df == 6) return 0.0137539677456551d;
		if ( chi <= 18 && df == 6) return 0.00623219510712592d;
		if ( chi <= 20 && df == 6) return 0.00276939571584424d;
		if ( chi <= 22 && df == 6) return 0.00121087330743826d;
		if ( chi <= 24 && df == 6) return 0.000522258050095631d;
		if ( chi <= 26 && df == 6) return 0.000222642446614378d;
		if ( chi <= 41 && df == 6) return 2.89566657711612E-07d;
		if ( chi <= 56 && df == 6) return 2.91096244537148E-10d;
		if ( chi <= 71 && df == 6) return 2.54933840876147E-13d;
		if ( chi <= 86 && df == 6) return 2.04850441015302E-16d;
		if ( chi <= 101 && df == 6) return 1.5519468407634E-19d;
		if ( chi <= 151 && df == 6) return 4.75481577062706E-30d;
		if ( chi <= 201 && df == 6) return 1.16238182540898E-40d;
		if ( chi <= 0 && df == 7) return 1d;
		if ( chi <= 0.25 && df == 7) return 0.9999461203083d;
		if ( chi <= 0.5 && df == 7) return 0.999446481391693d;
		if ( chi <= 0.75 && df == 7) return 0.99792137467585d;
		if ( chi <= 1 && df == 7) return 0.994828536552614d;
		if ( chi <= 1.25 && df == 7) return 0.989729728174046d;
		if ( chi <= 1.5 && df == 7) return 0.982309659938758d;
		if ( chi <= 1.75 && df == 7) return 0.972374446368027d;
		if ( chi <= 2 && df == 7) return 0.959840368956892d;
		if ( chi <= 2.25 && df == 7) return 0.944718346290023d;
		if ( chi <= 2.5 && df == 7) return 0.927097065279674d;
		if ( chi <= 2.75 && df == 7) return 0.907126433526898d;
		if ( chi <= 3 && df == 7) return 0.885002234194502d;
		if ( chi <= 3.25 && df == 7) return 0.860952455432076d;
		if ( chi <= 3.5 && df == 7) return 0.835225484541779d;
		if ( chi <= 3.75 && df == 7) return 0.808080126035802d;
		if ( chi <= 4 && df == 7) return 0.779777409819833d;
		if ( chi <= 4.25 && df == 7) return 0.75057404727025d;
		if ( chi <= 4.5 && df == 7) return 0.720717280507893d;
		if ( chi <= 4.75 && df == 7) return 0.690441054548543d;
		if ( chi <= 5 && df == 7) return 0.659963233759661d;
		if ( chi <= 5.25 && df == 7) return 0.629483839469699d;
		if ( chi <= 5.5 && df == 7) return 0.599183886297892d;
		if ( chi <= 5.75 && df == 7) return 0.569224964547073d;
		if ( chi <= 6 && df == 7) return 0.539749359186845d;
		if ( chi <= 6.25 && df == 7) return 0.510880391959459d;
		if ( chi <= 6.5 && df == 7) return 0.482723221768851d;
		if ( chi <= 6.75 && df == 7) return 0.455365751245432d;
		if ( chi <= 7 && df == 7) return 0.428879838297363d;
		if ( chi <= 7.25 && df == 7) return 0.403322463788973d;
		if ( chi <= 7.5 && df == 7) return 0.37873689672751d;
		if ( chi <= 7.75 && df == 7) return 0.35515408745572d;
		if ( chi <= 8 && df == 7) return 0.332593897994786d;
		if ( chi <= 8.25 && df == 7) return 0.311066335233352d;
		if ( chi <= 8.5 && df == 7) return 0.290572722765382d;
		if ( chi <= 8.75 && df == 7) return 0.271106868518979d;
		if ( chi <= 9 && df == 7) return 0.252656039323672d;
		if ( chi <= 9.25 && df == 7) return 0.235201990387309d;
		if ( chi <= 9.5 && df == 7) return 0.218721847211414d;
		if ( chi <= 9.75 && df == 7) return 0.203188924110494d;
		if ( chi <= 10 && df == 7) return 0.188573465353771d;
		if ( chi <= 12 && df == 7) return 0.100558866363636d;
		if ( chi <= 14 && df == 7) return 0.0511813531099223d;
		if ( chi <= 16 && df == 7) return 0.025116360700889d;
		if ( chi <= 18 && df == 7) return 0.0119700023471197d;
		if ( chi <= 20 && df == 7) return 0.00556968303856188d;
		if ( chi <= 22 && df == 7) return 0.00254041396265855d;
		if ( chi <= 24 && df == 7) return 0.00113935117733333d;
		if ( chi <= 26 && df == 7) return 0.000503668580286828d;
		if ( chi <= 41 && df == 7) return 8.09594664511781E-07d;
		if ( chi <= 56 && df == 7) return 9.44389976590999E-10d;
		if ( chi <= 71 && df == 7) return 9.27508995031294E-13d;
		if ( chi <= 86 && df == 7) return 8.18118685759724E-16d;
		if ( chi <= 101 && df == 7) return 6.70470088423251E-19d;
		if ( chi <= 151 && df == 7) return 2.50313180654272E-29d;
		if ( chi <= 201 && df == 7) return 7.04811137310522E-40d;
		if ( chi <= 0 && df == 8) return 1d;
		if ( chi <= 0.25 && df == 8) return 0.999990793586272d;
		if ( chi <= 0.5 && df == 8) return 0.999866630349676d;
		if ( chi <= 0.75 && df == 8) return 0.999388414179728d;
		if ( chi <= 1 && df == 8) return 0.998248377451194d;
		if ( chi <= 1.25 && df == 8) return 0.996122912387415d;
		if ( chi <= 1.5 && df == 8) return 0.992707833526866d;
		if ( chi <= 1.75 && df == 8) return 0.987740443298014d;
		if ( chi <= 2 && df == 8) return 0.981011843184673d;
		if ( chi <= 2.25 && df == 8) return 0.972372185207234d;
		if ( chi <= 2.5 && df == 8) return 0.961730946623185d;
		if ( chi <= 2.75 && df == 8) return 0.949053834651074d;
		if ( chi <= 3 && df == 8) return 0.93435754644155d;
		if ( chi <= 3.25 && df == 8) return 0.917703275007174d;
		if ( chi <= 3.5 && df == 8) return 0.89918965073828d;
		if ( chi <= 3.75 && df == 8) return 0.878945607505918d;
		if ( chi <= 4 && df == 8) return 0.857123464348924d;
		if ( chi <= 4.25 && df == 8) return 0.833892493404703d;
		if ( chi <= 4.5 && df == 8) return 0.809433109851427d;
		if ( chi <= 4.75 && df == 8) return 0.78393169150424d;
		if ( chi <= 5 && df == 8) return 0.757576143790081d;
		if ( chi <= 5.25 && df == 8) return 0.73055212314939d;
		if ( chi <= 5.5 && df == 8) return 0.703040000656317d;
		if ( chi <= 5.75 && df == 8) return 0.675212316811871d;
		if ( chi <= 6 && df == 8) return 0.647231910378588d;
		if ( chi <= 6.25 && df == 8) return 0.619250467209055d;
		if ( chi <= 6.5 && df == 8) return 0.591407655805024d;
		if ( chi <= 6.75 && df == 8) return 0.563830401993909d;
		if ( chi <= 7 && df == 8) return 0.536632674361769d;
		if ( chi <= 7.25 && df == 8) return 0.50991556804732d;
		if ( chi <= 7.5 && df == 8) return 0.483767400621761d;
		if ( chi <= 7.75 && df == 8) return 0.458264189311396d;
		if ( chi <= 8 && df == 8) return 0.433470120429975d;
		if ( chi <= 8.25 && df == 8) return 0.409438365413699d;
		if ( chi <= 8.5 && df == 8) return 0.386211562431018d;
		if ( chi <= 8.75 && df == 8) return 0.363822716615271d;
		if ( chi <= 9 && df == 8) return 0.34229595588455d;
		if ( chi <= 9.25 && df == 8) return 0.321647326676322d;
		if ( chi <= 9.5 && df == 8) return 0.3018855834467d;
		if ( chi <= 9.75 && df == 8) return 0.283012960261294d;
		if ( chi <= 10 && df == 8) return 0.265025915336043d;
		if ( chi <= 12 && df == 8) return 0.151203882798716d;
		if ( chi <= 14 && df == 8) return 0.0817654162566555d;
		if ( chi <= 16 && df == 8) return 0.0423801119978695d;
		if ( chi <= 18 && df == 8) return 0.021226486306007d;
		if ( chi <= 20 && df == 8) return 0.0103360506774343d;
		if ( chi <= 22 && df == 8) return 0.00491586726664646d;
		if ( chi <= 24 && df == 8) return 0.00229179120812592d;
		if ( chi <= 26 && df == 8) return 0.00105029973126382d;
		if ( chi <= 41 && df == 8) return 2.08460386015277E-06d;
		if ( chi <= 56 && df == 8) return 2.82084476403974E-09d;
		if ( chi <= 71 && df == 8) return 3.10647537235908E-12d;
		if ( chi <= 86 && df == 8) return 3.00764583152557E-15d;
		if ( chi <= 101 && df == 8) return 2.66622264040229E-18d;
		if ( chi <= 151 && df == 8) return 1.2128977293642E-28d;
		if ( chi <= 201 && df == 8) return 3.93349609228182E-39d;
		if ( chi <= 0 && df == 9) return 1d;
		if ( chi <= 0.25 && df == 9) return 0.999998510981777d;
		if ( chi <= 0.5 && df == 9) return 0.999969566258866d;
		if ( chi <= 0.75 && df == 9) return 0.999829490587862d;
		if ( chi <= 1 && df == 9) return 0.999437502699339d;
		if ( chi <= 1.25 && df == 9) return 0.998611543865934d;
		if ( chi <= 1.5 && df == 9) return 0.997146769513521d;
		if ( chi <= 1.75 && df == 9) return 0.994832714426796d;
		if ( chi <= 2 && df == 9) return 0.991467606644585d;
		if ( chi <= 2.25 && df == 9) return 0.986869384414646d;
		if ( chi <= 2.5 && df == 9) return 0.980883491675793d;
		if ( chi <= 2.75 && df == 9) return 0.973387783277242d;
		if ( chi <= 3 && df == 9) return 0.964294972943115d;
		if ( chi <= 3.25 && df == 9) return 0.953553096397261d;
		if ( chi <= 3.5 && df == 9) return 0.941144411985036d;
		if ( chi <= 3.75 && df == 9) return 0.927083159163895d;
		if ( chi <= 4 && df == 9) return 0.911412528191455d;
		if ( chi <= 4.25 && df == 9) return 0.894201098308156d;
		if ( chi <= 4.5 && df == 9) return 0.875539026191886d;
		if ( chi <= 4.75 && df == 9) return 0.855534172720908d;
		if ( chi <= 5 && df == 9) return 0.834308264278447d;
		if ( chi <= 5.25 && df == 9) return 0.811993269740311d;
		if ( chi <= 5.5 && df == 9) return 0.788728007929245d;
		if ( chi <= 5.75 && df == 9) return 0.764655122665137d;
		if ( chi <= 6 && df == 9) return 0.739918300906957d;
		if ( chi <= 6.25 && df == 9) return 0.714659927108377d;
		if ( chi <= 6.5 && df == 9) return 0.689019025981332d;
		if ( chi <= 6.75 && df == 9) return 0.663129652187705d;
		if ( chi <= 7 && df == 9) return 0.637119422505274d;
		if ( chi <= 7.25 && df == 9) return 0.611108506048983d;
		if ( chi <= 7.5 && df == 9) return 0.585208777613885d;
		if ( chi <= 7.75 && df == 9) return 0.559523382682654d;
		if ( chi <= 8 && df == 9) return 0.534146239916768d;
		if ( chi <= 8.25 && df == 9) return 0.509161982726078d;
		if ( chi <= 8.5 && df == 9) return 0.484645897938618d;
		if ( chi <= 8.75 && df == 9) return 0.460664230810625d;
		if ( chi <= 9 && df == 9) return 0.437274194517844d;
		if ( chi <= 9.25 && df == 9) return 0.414524525892337d;
		if ( chi <= 9.5 && df == 9) return 0.392455763316298d;
		if ( chi <= 9.75 && df == 9) return 0.371100768188685d;
		if ( chi <= 10 && df == 9) return 0.350485213942569d;
		if ( chi <= 12 && df == 9) return 0.213309306435917d;
		if ( chi <= 14 && df == 9) return 0.122325228226978d;
		if ( chi <= 16 && df == 9) return 0.0668815881756414d;
		if ( chi <= 18 && df == 9) return 0.035173539542983d;
		if ( chi <= 20 && df == 9) return 0.0179124045462136d;
		if ( chi <= 22 && df == 9) return 0.00887897745799017d;
		if ( chi <= 24 && df == 9) return 0.00430131084475951d;
		if ( chi <= 26 && df == 9) return 0.00204298965674287d;
		if ( chi <= 41 && df == 9) return 5.00194320965847E-06d;
		if ( chi <= 56 && df == 9) return 7.84938490184288E-09d;
		if ( chi <= 71 && df == 9) return 9.69147885746997E-12d;
		if ( chi <= 86 && df == 9) return 1.0298648756121E-14d;
		if ( chi <= 101 && df == 9) return 9.87505555569002E-18d;
		if ( chi <= 151 && df == 9) return 5.47351364631903E-28d;
		if ( chi <= 201 && df == 9) return 2.04445558676853E-38d;
		if ( chi <= 0 && df == 10) return 1d;
		if ( chi <= 0.25 && df == 10) return 0.999999770808979d;
		if ( chi <= 0.5 && df == 10) return 0.999993388289443d;
		if ( chi <= 0.75 && df == 10) return 0.999954723094829d;
		if ( chi <= 1 && df == 10) return 0.999827884370337d;
		if ( chi <= 1.25 && df == 10) return 0.999526012900846d;
		if ( chi <= 1.5 && df == 10) return 0.998935322228942d;
		if ( chi <= 1.75 && df == 10) return 0.997921979066231d;
		if ( chi <= 2 && df == 10) return 0.996340153235649d;
		if ( chi <= 2.25 && df == 10) return 0.994040121557137d;
		if ( chi <= 2.5 && df == 10) return 0.990875720861574d;
		if ( chi <= 2.75 && df == 10) return 0.986710741009843d;
		if ( chi <= 3 && df == 10) return 0.981424063857188d;
		if ( chi <= 3.25 && df == 10) return 0.974913502032487d;
		if ( chi <= 3.5 && df == 10) return 0.967098380927329d;
		if ( chi <= 3.75 && df == 10) return 0.957920981830238d;
		if ( chi <= 4 && df == 10) return 0.947346983127558d;
		if ( chi <= 4.25 && df == 10) return 0.935365077876731d;
		if ( chi <= 4.5 && df == 10) return 0.921985895079632d;
		if ( chi <= 4.75 && df == 10) return 0.907240415484743d;
		if ( chi <= 5 && df == 10) return 0.89117802045408d;
		if ( chi <= 5.25 && df == 10) return 0.873864260901625d;
		if ( chi <= 5.5 && df == 10) return 0.8553785123827d;
		if ( chi <= 5.75 && df == 10) return 0.835811559164128d;
		if ( chi <= 6 && df == 10) return 0.815263248064803d;
		if ( chi <= 6.25 && df == 10) return 0.793840155306774d;
		if ( chi <= 6.5 && df == 10) return 0.771653448450926d;
		if ( chi <= 6.75 && df == 10) return 0.748816865615876d;
		if ( chi <= 7 && df == 10) return 0.725444959792859d;
		if ( chi <= 7.25 && df == 10) return 0.701651410081631d;
		if ( chi <= 7.5 && df == 10) return 0.677547655194689d;
		if ( chi <= 7.75 && df == 10) return 0.653241650529472d;
		if ( chi <= 8 && df == 10) return 0.628836945319075d;
		if ( chi <= 8.25 && df == 10) return 0.60443174617678d;
		if ( chi <= 8.5 && df == 10) return 0.58011834075382d;
		if ( chi <= 8.75 && df == 10) return 0.555982565765904d;
		if ( chi <= 9 && df == 10) return 0.532103590520282d;
		if ( chi <= 9.25 && df == 10) return 0.508553557571736d;
		if ( chi <= 9.5 && df == 10) return 0.485397592655536d;
		if ( chi <= 9.75 && df == 10) return 0.462693758053209d;
		if ( chi <= 10 && df == 10) return 0.440493285137988d;
		if ( chi <= 12 && df == 10) return 0.285056500363726d;
		if ( chi <= 14 && df == 10) return 0.172991607910652d;
		if ( chi <= 16 && df == 10) return 0.0996324005035066d;
		if ( chi <= 18 && df == 10) return 0.0549636415041857d;
		if ( chi <= 20 && df == 10) return 0.029252688081794d;
		if ( chi <= 22 && df == 10) return 0.0151046006546739d;
		if ( chi <= 24 && df == 10) return 0.00760039068232268d;
		if ( chi <= 26 && df == 10) return 0.00374018590642787d;
		if ( chi <= 41 && df == 10) return 1.12841695228427E-05d;
		if ( chi <= 56 && df == 10) return 2.05290844009007E-08d;
		if ( chi <= 71 && df == 10) return 2.84139064647589E-11d;
		if ( chi <= 86 && df == 10) return 3.31376962800923E-14d;
		if ( chi <= 101 && df == 10) return 3.43679505954088E-17d;
		if ( chi <= 151 && df == 10) return 2.32088708950671E-27d;
		if ( chi <= 201 && df == 10) return 9.98421010765093E-38d;
		if ( chi <= 0 && df == 11) return 1d;
		if ( chi <= 0.25 && df == 11) return 0.999999966278265d;
		if ( chi <= 0.5 && df == 11) return 0.999998626529307d;
		if ( chi <= 0.75 && df == 11) return 0.999988500247362d;
		if ( chi <= 1 && df == 11) return 0.999949610051367d;
		if ( chi <= 1.25 && df == 11) return 0.999845129361147d;
		if ( chi <= 1.5 && df == 11) return 0.999619621122842d;
		if ( chi <= 1.75 && df == 11) return 0.999199599836859d;
		if ( chi <= 2 && df == 11) return 0.998495881734261d;
		if ( chi <= 2.25 && df == 11) return 0.997407144083959d;
		if ( chi <= 2.5 && df == 11) return 0.995824165422779d;
		if ( chi <= 2.75 && df == 11) return 0.993634306006358d;
		if ( chi <= 3 && df == 11) return 0.990725886627738d;
		if ( chi <= 3.25 && df == 11) return 0.98699221607557d;
		if ( chi <= 3.5 && df == 11) return 0.982335104257278d;
		if ( chi <= 3.75 && df == 11) return 0.976667758036478d;
		if ( chi <= 4 && df == 11) return 0.969917024038799d;
		if ( chi <= 4.25 && df == 11) return 0.962024980793391d;
		if ( chi <= 4.5 && df == 11) return 0.952949901956797d;
		if ( chi <= 4.75 && df == 11) return 0.942666658048578d;
		if ( chi <= 5 && df == 11) return 0.931166611040967d;
		if ( chi <= 5.25 && df == 11) return 0.918457097102687d;
		if ( chi <= 5.5 && df == 11) return 0.904560534801567d;
		if ( chi <= 5.75 && df == 11) return 0.889513279244869d;
		if ( chi <= 6 && df == 11) return 0.873364254627403d;
		if ( chi <= 6.25 && df == 11) return 0.856173479791943d;
		if ( chi <= 6.5 && df == 11) return 0.83801045710268d;
		if ( chi <= 6.75 && df == 11) return 0.818952577900513d;
		if ( chi <= 7 && df == 11) return 0.79908350401523d;
		if ( chi <= 7.25 && df == 11) return 0.778491653582216d;
		if ( chi <= 7.5 && df == 11) return 0.757268663748655d;
		if ( chi <= 7.75 && df == 11) return 0.735508035989947d;
		if ( chi <= 8 && df == 11) return 0.713303834035339d;
		if ( chi <= 8.25 && df == 11) return 0.690749592476572d;
		if ( chi <= 8.5 && df == 11) return 0.667937206032564d;
		if ( chi <= 8.75 && df == 11) return 0.64495608234227d;
		if ( chi <= 9 && df == 11) return 0.62189236235319d;
		if ( chi <= 9.25 && df == 11) return 0.598828239469737d;
		if ( chi <= 9.5 && df == 11) return 0.575841569560555d;
		if ( chi <= 9.75 && df == 11) return 0.553005283381372d;
		if ( chi <= 10 && df == 11) return 0.530387189557135d;
		if ( chi <= 12 && df == 11) return 0.363643219607287d;
		if ( chi <= 14 && df == 11) return 0.232993476005553d;
		if ( chi <= 16 && df == 11) return 0.141130880069669d;
		if ( chi <= 18 && df == 11) return 0.0815806136707701d;
		if ( chi <= 20 && df == 11) return 0.0453406744355184d;
		if ( chi <= 22 && df == 11) return 0.024373243708848d;
		if ( chi <= 24 && df == 11) return 0.0127332032750352d;
		if ( chi <= 26 && df == 11) return 0.0064899172071409d;
		if ( chi <= 41 && df == 11) return 2.41004198927885E-05d;
		if ( chi <= 56 && df == 11) return 5.08137977659206E-08d;
		if ( chi <= 71 && df == 11) return 7.88294633279288E-11d;
		if ( chi <= 86 && df == 11) return 1.00890380526462E-13d;
		if ( chi <= 101 && df == 11) return 1.13170959178822E-16d;
		if ( chi <= 151 && df == 11) return 9.31072103516391E-27d;
		if ( chi <= 201 && df == 11) return 4.61298854854804E-37d;
		if ( chi <= 0 && df == 12) return 1d;
		if ( chi <= 0.25 && df == 12) return 0.999999995239547d;
		if ( chi <= 0.5 && df == 12) return 0.999999726186437d;
		if ( chi <= 0.75 && df == 12) return 0.999997196263108d;
		if ( chi <= 1 && df == 12) return 0.999985835062687d;
		if ( chi <= 1.25 && df == 12) return 0.999951400461063d;
		if ( chi <= 1.5 && df == 12) return 0.999869445538958d;
		if ( chi <= 1.75 && df == 12) return 0.999703747844583d;
		if ( chi <= 2 && df == 12) return 0.999405815186831d;
		if ( chi <= 2.25 && df == 12) return 0.998915407290207d;
		if ( chi <= 2.5 && df == 12) return 0.998161914555833d;
		if ( chi <= 2.75 && df == 12) return 0.997066390008309d;
		if ( chi <= 3 && df == 12) return 0.995544019306349d;
		if ( chi <= 3.25 && df == 12) return 0.993506826254265d;
		if ( chi <= 3.5 && df == 12) return 0.99086643590648d;
		if ( chi <= 3.75 && df == 12) return 0.987536745743009d;
		if ( chi <= 4 && df == 12) return 0.983436391996379d;
		if ( chi <= 4.25 && df == 12) return 0.978490925291552d;
		if ( chi <= 4.5 && df == 12) return 0.97263464626019d;
		if ( chi <= 4.75 && df == 12) return 0.965812061540894d;
		if ( chi <= 5 && df == 12) return 0.957978963355055d;
		if ( chi <= 5.25 && df == 12) return 0.949103130506434d;
		if ( chi <= 5.5 && df == 12) return 0.939164688546653d;
		if ( chi <= 5.75 && df == 12) return 0.928156129232002d;
		if ( chi <= 6 && df == 12) return 0.916082061525178d;
		if ( chi <= 6.25 && df == 12) return 0.902958704827472d;
		if ( chi <= 6.5 && df == 12) return 0.888813203763624d;
		if ( chi <= 6.75 && df == 12) return 0.873682740209756d;
		if ( chi <= 7 && df == 12) return 0.857613559598822d;
		if ( chi <= 7.25 && df == 12) return 0.840659886283365d;
		if ( chi <= 7.5 && df == 12) return 0.822882830537536d;
		if ( chi <= 7.75 && df == 12) return 0.804349202861594d;
		if ( chi <= 8 && df == 12) return 0.78513039719234d;
		if ( chi <= 8.25 && df == 12) return 0.765301271590926d;
		if ( chi <= 8.5 && df == 12) return 0.744939057755358d;
		if ( chi <= 8.75 && df == 12) return 0.724122426156371d;
		if ( chi <= 9 && df == 12) return 0.702930449030348d;
		if ( chi <= 9.25 && df == 12) return 0.681441800507214d;
		if ( chi <= 9.5 && df == 12) return 0.659733940837214d;
		if ( chi <= 9.75 && df == 12) return 0.637882524603786d;
		if ( chi <= 10 && df == 12) return 0.615960672970629d;
		if ( chi <= 12 && df == 12) return 0.44567964144465d;
		if ( chi <= 14 && df == 12) return 0.300708276228364d;
		if ( chi <= 16 && df == 12) return 0.191236062113968d;
		if ( chi <= 18 && df == 12) return 0.115690520861834d;
		if ( chi <= 20 && df == 12) return 0.0670859628910796d;
		if ( chi <= 22 && df == 12) return 0.0375198141086653d;
		if ( chi <= 24 && df == 12) return 0.0203410294205814d;
		if ( chi <= 26 && df == 12) return 0.0107338899619561d;
		if ( chi <= 41 && df == 12) return 4.90023887404111E-05d;
		if ( chi <= 56 && df == 12) return 1.19695226337755E-07d;
		if ( chi <= 71 && df == 12) return 2.08096667216916E-10d;
		if ( chi <= 86 && df == 12) return 2.92256130139843E-13d;
		if ( chi <= 101 && df == 12) return 3.54555402880925E-16d;
		if ( chi <= 151 && df == 12) return 3.55348065717641E-26d;
		if ( chi <= 201 && df == 12) return 2.027605061299E-36d;
		if ( chi <= 0 && df == 13) return 1d;
		if ( chi <= 0.25 && df == 13) return 0.999999999353185d;
		if ( chi <= 0.5 && df == 13) return 0.999999947450691d;
		if ( chi <= 0.75 && df == 13) return 0.999999341814992d;
		if ( chi <= 1 && df == 13) return 0.999996165265266d;
		if ( chi <= 1.25 && df == 13) return 0.999985309532179d;
		if ( chi <= 1.5 && df == 13) return 0.999956828161516d;
		if ( chi <= 1.75 && df == 13) return 0.999894331610982d;
		if ( chi <= 2 && df == 13) return 0.999773749916476d;
		if ( chi <= 2.25 && df == 13) return 0.999562594939551d;
		if ( chi <= 2.5 && df == 13) return 0.999219773128205d;
		if ( chi <= 2.75 && df == 13) return 0.998695936813837d;
		if ( chi <= 3 && df == 13) return 0.997934317394514d;
		if ( chi <= 3.25 && df == 13) return 0.996871956179004d;
		if ( chi <= 3.5 && df == 13) return 0.995441233972959d;
		if ( chi <= 3.75 && df == 13) return 0.993571598057996d;
		if ( chi <= 4 && df == 13) return 0.991191386604948d;
		if ( chi <= 4.25 && df == 13) return 0.988229663717647d;
		if ( chi <= 4.5 && df == 13) return 0.984617986701121d;
		if ( chi <= 4.75 && df == 13) return 0.980292047725529d;
		if ( chi <= 5 && df == 13) return 0.975193133901586d;
		if ( chi <= 5.25 && df == 13) return 0.969269381669429d;
		if ( chi <= 5.5 && df == 13) return 0.962476796157774d;
		if ( chi <= 5.75 && df == 13) return 0.954780038914721d;
		if ( chi <= 6 && df == 13) return 0.946152960711719d;
		if ( chi <= 6.25 && df == 13) return 0.936578915067046d;
		if ( chi <= 6.5 && df == 13) return 0.926050844096024d;
		if ( chi <= 6.75 && df == 13) return 0.914571184089335d;
		if ( chi <= 7 && df == 13) return 0.902151563942956d;
		if ( chi <= 7.25 && df == 13) return 0.888812378551027d;
		if ( chi <= 7.5 && df == 13) return 0.874582222480051d;
		if ( chi <= 7.75 && df == 13) return 0.859497212187286d;
		if ( chi <= 8 && df == 13) return 0.843600279670719d;
		if ( chi <= 8.25 && df == 13) return 0.826940322256427d;
		if ( chi <= 8.5 && df == 13) return 0.809571398654869d;
		if ( chi <= 8.75 && df == 13) return 0.791551857657305d;
		if ( chi <= 9 && df == 13) return 0.772943545155135d;
		if ( chi <= 9.25 && df == 13) return 0.75381090255216d;
		if ( chi <= 9.5 && df == 13) return 0.734220209042731d;
		if ( chi <= 9.75 && df == 13) return 0.714238790788732d;
		if ( chi <= 10 && df == 13) return 0.693934376410799d;
		if ( chi <= 12 && df == 13) return 0.527643867594413d;
		if ( chi <= 14 && df == 13) return 0.373843977908542d;
		if ( chi <= 16 && df == 13) return 0.249129851361301d;
		if ( chi <= 18 && df == 13) return 0.157519463052303d;
		if ( chi <= 20 && df == 13) return 0.0952102562039395d;
		if ( chi <= 22 && df == 13) return 0.0553617763662112d;
		if ( chi <= 24 && df == 13) return 0.0311300595224621d;
		if ( chi <= 26 && df == 13) return 0.0170008368803686d;
		if ( chi <= 41 && df == 13) return 9.52856512721512E-05d;
		if ( chi <= 56 && df == 13) return 2.69541717606056E-07d;
		if ( chi <= 71 && df == 13) return 5.25083726688795E-10d;
		if ( chi <= 86 && df == 13) return 8.09153010738112E-13d;
		if ( chi <= 101 && df == 13) return 1.06161516467958E-15d;
		if ( chi <= 151 && df == 13) return 1.29607886523759E-25d;
		if ( chi <= 201 && df == 13) return 8.51690922744018E-36d;
		if ( chi <= 0 && df == 14) return 1d;
		if ( chi <= 0.25 && df == 14) return 0.999999999915184d;
		if ( chi <= 0.5 && df == 14) return 0.999999990265478d;
		if ( chi <= 0.75 && df == 14) return 0.999999850836136d;
		if ( chi <= 1 && df == 14) return 0.999998997620397d;
		if ( chi <= 1.25 && df == 14) return 0.999995711665476d;
		if ( chi <= 1.5 && df == 14) return 0.99998621095091d;
		if ( chi <= 1.75 && df == 14) return 0.999963589125746d;
		if ( chi <= 2 && df == 14) return 0.999916758850996d;
		if ( chi <= 2.25 && df == 14) return 0.999829523345801d;
		if ( chi <= 2.5 && df == 14) return 0.999679871591062d;
		if ( chi <= 2.75 && df == 14) return 0.999439559604928d;
		if ( chi <= 3 && df == 14) return 0.999074008093978d;
		if ( chi <= 3.25 && df == 14) return 0.998542518290408d;
		if ( chi <= 3.5 && df == 14) return 0.997798785446886d;
		if ( chi <= 3.75 && df == 14) return 0.996791672250972d;
		if ( chi <= 4 && df == 14) return 0.995466194528949d;
		if ( chi <= 4.25 && df == 14) return 0.993764663267402d;
		if ( chi <= 4.5 && df == 14) return 0.991627928768252d;
		if ( chi <= 4.75 && df == 14) return 0.98899667080208d;
		if ( chi <= 5 && df == 14) return 0.985812688220986d;
		if ( chi <= 5.25 && df == 14) return 0.982020137147872d;
		if ( chi <= 5.5 && df == 14) return 0.977566688379431d;
		if ( chi <= 5.75 && df == 14) return 0.972404567470147d;
		if ( chi <= 6 && df == 14) return 0.966491465243616d;
		if ( chi <= 6.25 && df == 14) return 0.959791285591219d;
		if ( chi <= 6.5 && df == 14) return 0.952274743260871d;
		if ( chi <= 6.75 && df == 14) return 0.943919791605715d;
		if ( chi <= 7 && df == 14) return 0.934711904090045d;
		if ( chi <= 7.25 && df == 14) return 0.924644179595633d;
		if ( chi <= 7.5 && df == 14) return 0.913717324873633d;
		if ( chi <= 7.75 && df == 14) return 0.901939497078253d;
		if ( chi <= 8 && df == 14) return 0.889326023499417d;
		if ( chi <= 8.25 && df == 14) return 0.875899056798432d;
		if ( chi <= 8.5 && df == 14) return 0.861687080985355d;
		if ( chi <= 8.75 && df == 14) return 0.846724407694089d;
		if ( chi <= 9 && df == 14) return 0.831050581571403d;
		if ( chi <= 9.25 && df == 14) return 0.814709803307968d;
		if ( chi <= 9.5 && df == 14) return 0.797750238255074d;
		if ( chi <= 9.75 && df == 14) return 0.780223397430037d;
		if ( chi <= 10 && df == 14) return 0.762183481134203d;
		if ( chi <= 12 && df == 14) return 0.606302807155467d;
		if ( chi <= 14 && df == 14) return 0.449711055934303d;
		if ( chi <= 16 && df == 14) return 0.313374277596049d;
		if ( chi <= 18 && df == 14) return 0.206780839899349d;
		if ( chi <= 20 && df == 14) return 0.130141420907256d;
		if ( chi <= 22 && df == 14) return 0.0786143721080979d;
		if ( chi <= 24 && df == 14) return 0.0458223068973736d;
		if ( chi <= 26 && df == 14) return 0.0258869154157628d;
		if ( chi <= 41 && df == 14) return 0.00017787297112043d;
		if ( chi <= 56 && df == 14) return 5.82470554378427E-07d;
		if ( chi <= 71 && df == 14) return 1.27121966809758E-09d;
		if ( chi <= 86 && df == 14) return 2.14927157274876E-12d;
		if ( chi <= 101 && df == 14) return 3.04946645967106E-15d;
		if ( chi <= 151 && df == 14) return 4.53476626782527E-25d;
		if ( chi <= 201 && df == 14) return 3.43176346459076E-35d;
		if ( chi <= 0 && df == 15) return 1d;
		if ( chi <= 0.25 && df == 15) return 0.999999999989241d;
		if ( chi <= 0.5 && df == 15) return 0.99999999825536d;
		if ( chi <= 0.75 && df == 15) return 0.999999967290049d;
		if ( chi <= 1 && df == 15) return 0.999999746435571d;
		if ( chi <= 1.25 && df == 15) return 0.999998788394822d;
		if ( chi <= 1.5 && df == 15) return 0.999995736665558d;
		if ( chi <= 1.75 && df == 15) return 0.999987853196363d;
		if ( chi <= 2 && df == 15) return 0.999970345022787d;
		if ( chi <= 2.25 && df == 15) return 0.999935653736136d;
		if ( chi <= 2.5 && df == 15) return 0.999872774614209d;
		if ( chi <= 2.75 && df == 15) return 0.999766666417132d;
		if ( chi <= 3 && df == 15) return 0.999597801449564d;
		if ( chi <= 3.25 && df == 15) return 0.999341891134536d;
		if ( chi <= 3.5 && df == 15) return 0.998969807410727d;
		if ( chi <= 3.75 && df == 15) return 0.998447705844615d;
		if ( chi <= 4 && df == 15) return 0.997737344171231d;
		if ( chi <= 4.25 && df == 15) return 0.996796578937687d;
		if ( chi <= 4.5 && df == 15) return 0.995580016311575d;
		if ( chi <= 4.75 && df == 15) return 0.9940397868883d;
		if ( chi <= 5 && df == 15) return 0.992126411421047d;
		if ( chi <= 5.25 && df == 15) return 0.989789726315316d;
		if ( chi <= 5.5 && df == 15) return 0.986979830689384d;
		if ( chi <= 5.75 && df == 15) return 0.983648030537632d;
		if ( chi <= 6 && df == 15) return 0.979747746930754d;
		if ( chi <= 6.25 && df == 15) return 0.975235372071501d;
		if ( chi <= 6.5 && df == 15) return 0.9700710396564d;
		if ( chi <= 6.75 && df == 15) return 0.964219310334689d;
		if ( chi <= 7 && df == 15) return 0.957649750058835d;
		if ( chi <= 7.25 && df == 15) return 0.950337394271647d;
		if ( chi <= 7.5 && df == 15) return 0.942263114955613d;
		if ( chi <= 7.75 && df == 15) return 0.933413843234502d;
		if ( chi <= 8 && df == 15) return 0.923782707755512d;
		if ( chi <= 8.25 && df == 15) return 0.91336904859169d;
		if ( chi <= 8.5 && df == 15) return 0.902178360948043d;
		if ( chi <= 8.75 && df == 15) return 0.890222101598614d;
		if ( chi <= 9 && df == 15) return 0.877517458011148d;
		if ( chi <= 9.25 && df == 15) return 0.864087028209241d;
		if ( chi <= 9.5 && df == 15) return 0.849958432739178d;
		if ( chi <= 9.75 && df == 15) return 0.835163936214526d;
		if ( chi <= 10 && df == 15) return 0.819739927955287d;
		if ( chi <= 12 && df == 15) return 0.6790290691748d;
		if ( chi <= 14 && df == 15) return 0.525529144179612d;
		if ( chi <= 16 && df == 15) return 0.382051661460708d;
		if ( chi <= 18 && df == 15) return 0.262665560312624d;
		if ( chi <= 20 && df == 15) return 0.171932689342558d;
		if ( chi <= 22 && df == 15) return 0.107803908415223d;
		if ( chi <= 24 && df == 15) return 0.0650934864092646d;
		if ( chi <= 26 && df == 15) return 0.0380226761678679d;
		if ( chi <= 41 && df == 15) return 0.000319792919722452d;
		if ( chi <= 56 && df == 15) return 1.21175429655933E-06d;
		if ( chi <= 71 && df == 15) return 2.96231854851259E-09d;
		if ( chi <= 86 && df == 15) return 5.49458271796732E-12d;
		if ( chi <= 101 && df == 15) return 8.43029706928002E-15d;
		if ( chi <= 151 && df == 15) return 1.52690573210421E-24d;
		if ( chi <= 201 && df == 15) return 1.33069038838596E-34d;
		if ( chi <= 0 && df == 16) return 1d;
		if ( chi <= 0.25 && df == 16) return 0.999999999998677d;
		if ( chi <= 0.5 && df == 16) return 0.999999999696872d;
		if ( chi <= 0.75 && df == 16) return 0.999999993045406d;
		if ( chi <= 1 && df == 16) return 0.999999937803092d;
		if ( chi <= 1.25 && df == 16) return 0.999999668023021d;
		if ( chi <= 1.5 && df == 16) return 0.999998721530859d;
		if ( chi <= 1.75 && df == 16) return 0.999996069285984d;
		if ( chi <= 2 && df == 16) return 0.999989750803342d;
		if ( chi <= 2.25 && df == 16) return 0.999976434856398d;
		if ( chi <= 2.5 && df == 16) return 0.999950935341129d;
		if ( chi <= 2.75 && df == 16) return 0.999905717923064d;
		if ( chi <= 3 && df == 16) return 0.999830434271771d;
		if ( chi <= 3.25 && df == 16) return 0.999711518205135d;
		if ( chi <= 3.5 && df == 16) return 0.999531872767744d;
		if ( chi <= 3.75 && df == 16) return 0.999270670468592d;
		if ( chi <= 4 && df == 16) return 0.998903281038113d;
		if ( chi <= 4.25 && df == 16) return 0.998401333601059d;
		if ( chi <= 4.5 && df == 16) return 0.997732912143979d;
		if ( chi <= 4.75 && df == 16) return 0.996862877731735d;
		if ( chi <= 5 && df == 16) return 0.995753304537842d;
		if ( chi <= 5.25 && df == 16) return 0.994364014242326d;
		if ( chi <= 5.5 && df == 16) return 0.992653187506072d;
		if ( chi <= 5.75 && df == 16) return 0.990578033827095d;
		if ( chi <= 6 && df == 16) return 0.988095496700116d;
		if ( chi <= 6.25 && df == 16) return 0.985162972520754d;
		if ( chi <= 6.5 && df == 16) return 0.981739027761186d;
		if ( chi <= 6.75 && df == 16) return 0.977784085721068d;
		if ( chi <= 7 && df == 16) return 0.973261079034801d;
		if ( chi <= 7.25 && df == 16) return 0.968136045775831d;
		if ( chi <= 7.5 && df == 16) return 0.962378658202377d;
		if ( chi <= 7.75 && df == 16) return 0.955962690692575d;
		if ( chi <= 8 && df == 16) return 0.948866386120064d;
		if ( chi <= 8.25 && df == 16) return 0.941072759619415d;
		if ( chi <= 8.5 && df == 16) return 0.932569804990085d;
		if ( chi <= 8.75 && df == 16) return 0.923350639041695d;
		if ( chi <= 9 && df == 16) return 0.913413531213614d;
		if ( chi <= 9.25 && df == 16) return 0.902761888348436d;
		if ( chi <= 9.5 && df == 16) return 0.891404154361659d;
		if ( chi <= 9.75 && df == 16) return 0.879353638871311d;
		if ( chi <= 10 && df == 16) return 0.866628329817795d;
		if ( chi <= 12 && df == 16) return 0.743979785220731d;
		if ( chi <= 14 && df == 16) return 0.598713863980145d;
		if ( chi <= 16 && df == 16) return 0.452960809576878d;
		if ( chi <= 18 && df == 16) return 0.32389696437717d;
		if ( chi <= 20 && df == 16) return 0.220220646645399d;
		if ( chi <= 22 && df == 16) return 0.143191534679157d;
		if ( chi <= 24 && df == 16) return 0.0895044968579368d;
		if ( chi <= 26 && df == 16) return 0.0540282484016258d;
		if ( chi <= 41 && df == 16) return 0.000555279678202785d;
		if ( chi <= 56 && df == 16) return 0.000002433571872555d;
		if ( chi <= 71 && df == 16) return 6.66277202483175E-09d;
		if ( chi <= 86 && df == 16) return 1.35566521472023E-11d;
		if ( chi <= 101 && df == 16) return 2.24913247974796E-14d;
		if ( chi <= 151 && df == 16) return 4.96127768896487E-24d;
		if ( chi <= 201 && df == 16) return 4.97910202273837E-34d;
		if ( chi <= 0 && df == 17) return 1d;
		if ( chi <= 0.25 && df == 17) return 0.999999999999842d;
		if ( chi <= 0.5 && df == 17) return 0.999999999948849d;
		if ( chi <= 0.75 && df == 17) return 0.999999998563802d;
		if ( chi <= 1 && df == 17) return 0.999999985180256d;
		if ( chi <= 1.25 && df == 17) return 0.999999911633378d;
		if ( chi <= 1.5 && df == 17) return 0.999999627515982d;
		if ( chi <= 1.75 && df == 17) return 0.999998764047811d;
		if ( chi <= 2 && df == 17) return 0.999996557703704d;
		if ( chi <= 2.25 && df == 17) return 0.999991612556039d;
		if ( chi <= 2.5 && df == 17) return 0.999981608193457d;
		if ( chi <= 2.75 && df == 17) return 0.999962966845648d;
		if ( chi <= 3 && df == 17) return 0.999930498263093d;
		if ( chi <= 3.25 && df == 17) return 0.999877043716555d;
		if ( chi <= 3.5 && df == 17) return 0.99979314119211d;
		if ( chi <= 3.75 && df == 17) return 0.999666732805588d;
		if ( chi <= 4 && df == 17) return 0.999482932894651d;
		if ( chi <= 4.25 && df == 17) return 0.999223871640296d;
		if ( chi <= 4.5 && df == 17) return 0.998868625092337d;
		if ( chi <= 4.75 && df == 17) return 0.998393237390429d;
		if ( chi <= 5 && df == 17) return 0.997770837428966d;
		if ( chi <= 5.25 && df == 17) return 0.996971847158896d;
		if ( chi <= 5.5 && df == 17) return 0.995964276375034d;
		if ( chi <= 5.75 && df == 17) return 0.994714093371847d;
		if ( chi <= 6 && df == 17) return 0.993185661900535d;
		if ( chi <= 6.25 && df == 17) return 0.991342230099815d;
		if ( chi <= 6.5 && df == 17) return 0.989146457045128d;
		if ( chi <= 6.75 && df == 17) return 0.986560965878589d;
		if ( chi <= 7 && df == 17) return 0.98354890130793d;
		if ( chi <= 7.25 && df == 17) return 0.980074487124697d;
		if ( chi <= 7.5 && df == 17) return 0.976103564590688d;
		if ( chi <= 7.75 && df == 17) return 0.9716041004614d;
		if ( chi <= 8 && df == 17) return 0.966546665767132d;
		if ( chi <= 8.25 && df == 17) return 0.960904851391363d;
		if ( chi <= 8.5 && df == 17) return 0.954655645139292d;
		if ( chi <= 8.75 && df == 17) return 0.947779740707663d;
		if ( chi <= 9 && df == 17) return 0.940261800565535d;
		if ( chi <= 9.25 && df == 17) return 0.932090630824708d;
		if ( chi <= 9.5 && df == 17) return 0.923259315886722d;
		if ( chi <= 9.75 && df == 17) return 0.913765280742422d;
		if ( chi <= 10 && df == 17) return 0.903610288952728d;
		if ( chi <= 12 && df == 17) return 0.800137230441238d;
		if ( chi <= 14 && df == 17) return 0.667101953716212d;
		if ( chi <= 16 && df == 17) return 0.523834981097981d;
		if ( chi <= 18 && df == 17) return 0.388840878971429d;
		if ( chi <= 20 && df == 17) return 0.27422926721169d;
		if ( chi <= 22 && df == 17) return 0.184719035488871d;
		if ( chi <= 24 && df == 17) return 0.119434969580386d;
		if ( chi <= 26 && df == 17) return 0.074460531105156d;
		if ( chi <= 41 && df == 17) return 0.000933446118799375d;
		if ( chi <= 56 && df == 17) return 4.72934792478759E-06d;
		if ( chi <= 71 && df == 17) return 1.4498563353042E-08d;
		if ( chi <= 86 && df == 17) return 3.23577130327469E-11d;
		if ( chi <= 101 && df == 17) return 5.80460885578845E-14d;
		if ( chi <= 151 && df == 17) return 1.559303738344E-23d;
		if ( chi <= 201 && df == 17) return 1.80206757572293E-33d;
		if ( chi <= 0 && df == 18) return 1d;
		if ( chi <= 0.25 && df == 18) return 0.999999999999982d;
		if ( chi <= 0.5 && df == 18) return 0.999999999991604d;
		if ( chi <= 0.75 && df == 18) return 0.999999999711465d;
		if ( chi <= 1 && df == 18) return 0.99999999656451d;
		if ( chi <= 1.25 && df == 18) return 0.999999977113455d;
		if ( chi <= 1.5 && df == 18) return 0.999999894397733d;
		if ( chi <= 1.75 && df == 18) return 0.999999621803467d;
		if ( chi <= 2 && df == 18) return 0.99999887479742d;
		if ( chi <= 2.25 && df == 18) return 0.999997094287678d;
		if ( chi <= 2.5 && df == 18) return 0.999993289052564d;
		if ( chi <= 2.75 && df == 18) return 0.999985838882022d;
		if ( chi <= 3 && df == 18) return 0.999972264181421d;
		if ( chi <= 3.25 && df == 18) return 0.999948971315209d;
		if ( chi <= 3.5 && df == 18) return 0.999910985626627d;
		if ( chi <= 3.75 && df == 18) return 0.999851685656987d;
		if ( chi <= 4 && df == 18) return 0.999762552677879d;
		if ( chi <= 4.25 && df == 18) return 0.999632949176651d;
		if ( chi <= 4.5 && df == 18) return 0.999449938763364d;
		if ( chi <= 4.75 && df == 18) return 0.999198157830022d;
		if ( chi <= 5 && df == 18) return 0.998859747195192d;
		if ( chi <= 5.25 && df == 18) return 0.998414349044d;
		if ( chi <= 5.5 && df == 18) return 0.997839171741679d;
		if ( chi <= 5.75 && df == 18) return 0.997109123059065d;
		if ( chi <= 6 && df == 18) return 0.996197008020691d;
		if ( chi <= 6.25 && df == 18) return 0.995073788083861d;
		if ( chi <= 6.5 && df == 18) return 0.99370889402825d;
		if ( chi <= 6.75 && df == 18) return 0.992070584283987d;
		if ( chi <= 7 && df == 18) return 0.990126342128794d;
		if ( chi <= 7.25 && df == 18) return 0.987843295957354d;
		if ( chi <= 7.5 && df == 18) return 0.985188659570832d;
		if ( chi <= 7.75 && df == 18) return 0.982130177507476d;
		if ( chi <= 8 && df == 18) return 0.978636565854046d;
		if ( chi <= 8.25 && df == 18) return 0.974677947481666d;
		if ( chi <= 8.5 && df == 18) return 0.970226254448091d;
		if ( chi <= 8.75 && df == 18) return 0.965255613201239d;
		if ( chi <= 9 && df == 18) return 0.959742690387882d;
		if ( chi <= 9.25 && df == 18) return 0.95366699627125d;
		if ( chi <= 9.5 && df == 18) return 0.947011161113225d;
		if ( chi <= 9.75 && df == 18) return 0.939761135404543d;
		if ( chi <= 10 && df == 18) return 0.931906369178495d;
		if ( chi <= 12 && df == 18) return 0.847237499840843d;
		if ( chi <= 14 && df == 18) return 0.729091296219422d;
		if ( chi <= 16 && df == 18) return 0.592547370610411d;
		if ( chi <= 18 && df == 18) return 0.455652604415594d;
		if ( chi <= 20 && df == 18) return 0.332819678818778d;
		if ( chi <= 22 && df == 18) return 0.231985133214895d;
		if ( chi <= 24 && df == 18) return 0.155027781799165d;
		if ( chi <= 26 && df == 18) return 0.0997579147884523d;
		if ( chi <= 41 && df == 18) return 0.00152238435846095d;
		if ( chi <= 56 && df == 18) return 8.91242648577124E-06d;
		if ( chi <= 71 && df == 18) return 3.05877855410822E-08d;
		if ( chi <= 86 && df == 18) return 7.48713227091272E-11d;
		if ( chi <= 101 && df == 18) return 1.45218055544604E-13d;
		if ( chi <= 151 && df == 18) return 4.75036501908959E-23d;
		if ( chi <= 201 && df == 18) return 6.3217918335287E-33d;
		return 0;
	}
	
	public static double roundToDecimals(double d, int c)
	{
		int temp=(int)((d*Math.pow(10,c)));
		return (((double)temp)/Math.pow(10,c));
	}
}